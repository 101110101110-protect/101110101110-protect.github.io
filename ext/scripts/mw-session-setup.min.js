/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_proxyHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _modules_emulatorHandler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _modules_useragentHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _modules_configManagerHandler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _modules_jsErrorsHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _modules_rabbitsEditHandler_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _modules_dist_tableHandler_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7);
/* harmony import */ var _modules_extended_urlBlacklist_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8);
/* harmony import */ var _modules_extended_httpHeaders_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9);
/* harmony import */ var _modules_extended_plugins_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(10);
/* harmony import */ var _modules_extended_fonts_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(11);
/* harmony import */ var _modules_extended_webgl_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(12);
/* harmony import */ var _modules_extended_properties_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(13);
/* harmony import */ var _modules_session_manager_sessionManagerHandler_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(14);
















new _modules_proxyHandler_js__WEBPACK_IMPORTED_MODULE_0__.default();
new _modules_emulatorHandler_js__WEBPACK_IMPORTED_MODULE_1__.default();
new _modules_useragentHandler_js__WEBPACK_IMPORTED_MODULE_2__.default();
new _modules_dist_tableHandler_js__WEBPACK_IMPORTED_MODULE_6__.default();
new _modules_configManagerHandler_js__WEBPACK_IMPORTED_MODULE_3__.default();
new _modules_jsErrorsHandler_js__WEBPACK_IMPORTED_MODULE_4__.default();
new _modules_rabbitsEditHandler_js__WEBPACK_IMPORTED_MODULE_5__.default();
new _modules_extended_urlBlacklist_js__WEBPACK_IMPORTED_MODULE_7__.default();
new _modules_extended_httpHeaders_js__WEBPACK_IMPORTED_MODULE_8__.default();
new _modules_extended_plugins_js__WEBPACK_IMPORTED_MODULE_9__.default();
new _modules_extended_fonts_js__WEBPACK_IMPORTED_MODULE_10__.default();
new _modules_extended_webgl_js__WEBPACK_IMPORTED_MODULE_11__.default();
new _modules_extended_properties_js__WEBPACK_IMPORTED_MODULE_12__.default();
new _modules_session_manager_sessionManagerHandler_js__WEBPACK_IMPORTED_MODULE_13__.default();

const setEventsForSelects = () => {
  const selects = document.querySelectorAll('.select');

  for (const select of selects) {
    select.addEventListener('click', function (e) {
      if (this.classList.contains('active')) {
        for (const select of selects) {
          select.querySelectorAll('ul')[0].style.display = 'none';
          select.classList.remove('active');
        }
      } else {
        for (const select of selects) {
          select.querySelectorAll('ul')[0].style.display = 'none';
          select.classList.remove('active');
        }

        if (!e.target.classList.contains('.input-option')) {
          this.classList.add('active');
          this.querySelectorAll('ul')[0].style.display = 'block';
        }
      }
    });
  }

  const selectOptions = document.querySelectorAll('li.input-option');

  for (const option of selectOptions) {
    option.addEventListener('click', function () {
      if (!this.closest('.select').classList.contains('disabled')) {
        let livalue = this.getAttribute('data-value');
        let lihtml = this.innerHTML;
        this.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
        this.closest('.select').querySelectorAll('.option').value = livalue;
      }
    });
  }

  document.addEventListener('click', e => {
    if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
      for (const select of selects) {
        select.querySelectorAll('ul')[0].style.display = 'none';
        select.classList.remove('active');
      }
    }
  });
};

const switchers = document.querySelectorAll('.switcher-wrapper');

for (const switcher of switchers) {
  switcher.addEventListener('click', () => {
    const checkbox = switcher.querySelectorAll('input')[0];
    checkbox.checked = !checkbox.checked;
  });
}

const inputsWrapper = document.querySelectorAll('.input-wrapper');

const setInputEventListeners = input => {
  const wrapper = input.closest('div');

  input.onfocus = function () {
    wrapper.classList.add('active');
    wrapper.querySelectorAll('label')[0].classList.add('active');
  };

  input.onblur = function () {
    wrapper.classList.remove('active');

    if (input.value === '') {
      wrapper.querySelectorAll('label')[0].classList.remove('active');
    }
  };

  const label = wrapper.querySelectorAll('label')[0];
  label.addEventListener('click', () => {
    input.focus();
  });
};

for (const inputWrapper of inputsWrapper) {
  inputWrapper.addEventListener('mouseover', function () {
    this.classList.add('hover');
  });
  inputWrapper.addEventListener('mouseout', function () {
    this.classList.remove('hover');
  });
  let textField = inputWrapper.querySelectorAll('input')[0];

  if (!textField) {
    textField = inputWrapper.querySelectorAll('textarea')[0];
  }

  if (!textField.classList.contains('hidden') && !inputWrapper.classList.contains('disabled')) {
    setInputEventListeners(textField);
  }
}

setEventsForSelects();
const sessionColor = document.querySelectorAll('.session-color')[0];
const sessionColorMark = document.querySelectorAll('.session-color-mark')[0];
const sessionColorsWrapper = document.querySelectorAll('.session-colors-wrapper')[0];
const sessionColorOption = sessionColorsWrapper.querySelectorAll('.session-color-option');
const sessionHighlightColorInput = document.querySelectorAll('#session-hightlight-color')[0]; // additional session color

const sessionColor2 = document.querySelectorAll('.session-color')[1];
const sessionColorMark2 = document.querySelectorAll('.session-color-mark')[1];
const sessionColorsWrapper2 = document.querySelectorAll('.session-colors-wrapper')[1];
const sessionColorOption2 = sessionColorsWrapper2.querySelectorAll('.session-color-option');
const sessionHighlightColorInput2 = document.querySelectorAll('#session-hightlight-color')[1];
sessionColor.addEventListener('click', e => {
  sessionColorsWrapper.classList.toggle('active');
});
let prevActiveMark;

for (const option of sessionColorOption) {
  option.addEventListener('click', function () {
    let color = this.getAttribute('data-color');
    sessionColorsWrapper.classList.remove('active');
    this.classList.add('active');

    if (prevActiveMark) {
      prevActiveMark.classList.remove('active');
    }

    sessionHighlightColorInput.value = color;

    if (color !== 'none') {
      sessionColor.classList.add('mark-active');
      sessionColorMark.style.backgroundColor = color;
    } else {
      sessionColor.classList.remove('mark-active');
    }

    prevActiveMark = this;
  });
}

sessionColor2.addEventListener('click', e => {
  sessionColorsWrapper2.classList.toggle('active');
});
let prevActiveMark2;

for (const option of sessionColorOption2) {
  option.addEventListener('click', function () {
    let color = this.getAttribute('data-color');
    sessionColorsWrapper2.classList.remove('active');
    this.classList.add('active');

    if (prevActiveMark) {
      prevActiveMark2.classList.remove('active');
    }

    sessionHighlightColorInput2.value = color;

    if (color !== 'none') {
      sessionColor2.classList.add('mark-active');
      sessionColorMark2.style.backgroundColor = color;
    } else {
      sessionColor2.classList.remove('mark-active');
    }

    prevActiveMark2 = this;
  });
}

const items = document.querySelectorAll('.item');

for (const item of items) {
  let checkbox = item.querySelectorAll('input')[0];
  checkbox.checked ? item.classList.add('active') : item.classList.remove('active');
  checkbox.addEventListener('click', function (e) {
    e.target.checked ? item.classList.add('active') : item.classList.remove('active');
  });
}

const filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
const holder = document.getElementById('holder');
const resultWrapper = document.getElementsByClassName('result')[0];
const inputElement = document.getElementById('fileInput');

holder.ondragover = function () {
  this.className = 'hover';
  return false;
};

holder.ondragend = function () {
  this.className = '';
  return false;
};

holder.ondrop = function (e) {
  this.className = '';
  e.preventDefault();
  resultWrapper.innerHTML = '';

  for (let i = 0, len = e.dataTransfer.files.length; i < len; i++) filesStore.items.add(e.dataTransfer.files[i]);

  for (let i = 0, len = filesStore.files.length; i < len; i++) {
    let elem = document.createElement('div');
    let close = document.createElement('div');
    elem.classList.add('filewrapper');
    close.classList.add('close');
    close.addEventListener('click', () => {
      filesStore.items.remove(i);
      elem.remove();
      inputElement.files = filesStore.files;
    });
    elem.innerHTML = filesStore.files[i].name;
    elem.appendChild(close);
    resultWrapper.appendChild(elem);
  }

  inputElement.files = filesStore.files;
};

inputElement.addEventListener('change', handleFiles, false);

function handleFiles(e) {
  const fileList = this.files;
  e.preventDefault();
  resultWrapper.innerHTML = '';

  for (let i = 0, len = fileList.length; i < len; i++) filesStore.items.add(fileList[i]);

  for (let i = 0, len = filesStore.files.length; i < len; i++) {
    let elem = document.createElement('div');
    let close = document.createElement('div');
    elem.classList.add('filewrapper');
    close.classList.add('close');
    close.addEventListener('click', () => {
      filesStore.items.remove(i);
      elem.remove();
      inputElement.files = filesStore.files;
    });
    elem.innerHTML = filesStore.files[i].name;
    elem.appendChild(close);
    resultWrapper.appendChild(elem);
  }

  inputElement.files = filesStore.files;
}

const tabsManager = document.getElementsByClassName('tabs_manager');

for (const singleTabsManager of tabsManager) {
  for (const tabsManagerLink of singleTabsManager.querySelectorAll('span')) {
    tabsManagerLink.addEventListener('click', function () {
      for (const tabsManagerLink1 of singleTabsManager.querySelectorAll('span')) {
        tabsManagerLink1.classList.remove('active');
      }

      tabsManagerLink.classList.add('active');
      let indexData = tabsManagerLink.getAttribute('data-index');

      for (const main of tabsManagerLink.closest('.mw').querySelectorAll('main')) {
        main.classList.contains('active') ? main.classList.remove('active') : null;

        if (main.getAttribute('data-index') === indexData) {
          main.classList.add('active');
          main.querySelectorAll('.search input')[0].focus();
        }
      }

      for (const footer of tabsManagerLink.closest('.mw').querySelectorAll('footer')) {
        footer.classList.contains('active') ? footer.classList.remove('active') : null;
        footer.getAttribute('data-index') === indexData ? footer.classList.add('active') : null;
      }
    });
  }
}

const btnsWrapper = document.querySelectorAll('.btns-wrapper--js');

for (const btnWrapper of btnsWrapper) {
  const btns = btnWrapper.querySelectorAll('.btn');

  for (const btn of btns) {
    btn.addEventListener('click', () => {
      for (const btn0 of btns) btn !== btn0 ? btn0.classList.remove('active') : btn.classList.add('active');
    });
  }
}

const windows = document.querySelectorAll('.mw');

for (const singleWindow of windows) {
  singleWindow.querySelectorAll('.close')[0].addEventListener('click', () => {
    singleWindow.classList.remove('active');
  });
}

const sessionName = document.getElementById('session_name');
document.querySelectorAll('.rename')[0].addEventListener('click', () => {
  sessionName.removeAttribute('disabled');
  setInputEventListeners(sessionName);
  sessionName.focus();
});
sessionName.addEventListener('blur', () => {
  sessionName.setAttribute('disabled', 'true');
});
document.querySelectorAll('.clone')[0].addEventListener('click', () => {
  document.querySelectorAll('.clone--success')[0].classList.add('active');
  document.querySelectorAll('#session_name')[0].select();
  document.execCommand('copy');
  setTimeout(() => {
    document.querySelectorAll('.clone--success')[0].classList.remove('active');
  }, 3000);
});
const numberInputs = document.querySelectorAll('.js-quantity-container');

for (const numberInputWrapper of numberInputs) {
  let input = numberInputWrapper.querySelectorAll('input')[0];
  let plus = numberInputWrapper.querySelectorAll('.js-plus')[0];
  let minus = numberInputWrapper.querySelectorAll('.js-minus')[0];
  plus.addEventListener('click', () => {
    input.value = parseInt(input.value) + 1;
  });
  minus.addEventListener('click', () => {
    if (parseInt(input.value) > 0) {
      input.value = parseInt(input.value) - 1;
    }
  });
}

/***/ }),
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const proxyWrapper = document.querySelectorAll('.mw__proxy_manager')[0];
    const proxyWrapperTable = proxyWrapper.querySelectorAll('.flexible_table')[0];
    const theadCheckbox = proxyWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const proxySearch = document.querySelectorAll('.mw__proxy_manager .search input')[0];
    let proxySearchData = [];
    let proxyData = [{
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 123,
      'state': {
        'checked': false,
        'check': 'success',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'User',
      'proxyPassword': '123456',
      'dns': '46.34.117.152',
      'id': 124,
      'state': {
        'checked': false,
        'check': 'error',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Minute',
      'proxyPassword': '123456',
      'dns': '46.34.117.152',
      'id': 125,
      'state': {
        'checked': false,
        'check': 'error',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 126,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 128,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 130,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 140,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 165,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true,
        'connectionIpFlag': 'usa',
        'proxyIpFlag': 'usa'
      }
    }]; // DataWorkers

    const createProxy = data => {
      proxyData.splice(proxyData.length, 0, {
        'type': data[0],
        'connectionIp': data[1],
        'proxyIp': data[2],
        'proxyPort': data[3],
        'proxyLogin': data[4],
        'proxyPassword': data[5],
        'dns': data[6],
        'id': +new Date(),
        'state': {
          'checked': false,
          'check': 'not checked',
          'set': true,
          'connectionIpFlag': 'unset',
          'proxyIpFlag': 'unset'
        }
      });
      rerenderProxyItems();
    };

    const changeProxyDataById = (id, key, value) => {
      proxyData = [...proxyData].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
      proxyWrapper.querySelectorAll('.proxy-save')[0].classList.remove('btn--disabled');
      proxyWrapper.querySelectorAll('.proxy-save')[0].classList.add('btn--green');
    };

    const setProxy = id => {
      let proxy = [...proxyData].filter(i => i.id === parseInt(id));
    };

    const setProxyAndClose = data => {
      let proxyInputWrapper = document.querySelectorAll('.dropdown--proxy')[0];
      let portWrapper = document.querySelectorAll('.dropdown--port')[0];
      document.querySelectorAll('#ip')[0].value = data.connectionIp;
      document.querySelectorAll('#ip')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#login')[0].value = data.proxyLogin;
      document.querySelectorAll('#login')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#password')[0].value = data.proxyPassword;
      document.querySelectorAll('#password')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#dns')[0].value = data.dns;
      document.querySelectorAll('#dns')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#web_rtc')[0].value = data.proxyIp;
      document.querySelectorAll('#web_rtc')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      proxyInputWrapper.querySelectorAll('.textfirst')[0].innerHTML = data.type;
      proxyInputWrapper.querySelectorAll('input')[0].value = data.type;
      portWrapper.querySelectorAll('.textfirst')[0].innerHTML = data.proxyPort;
      portWrapper.querySelectorAll('input')[0].value = data.proxyPort;
      proxyWrapper.classList.remove('active');
    }; // BUTTONS ============================================


    const closeProxyBtn = proxyWrapper.querySelectorAll('.proxy-close')[0];
    const addProxyBtn = proxyWrapper.querySelectorAll('.proxy-add')[0];
    const addFromFileProxyBtn = proxyWrapper.querySelectorAll('.proxy-addFromFile')[0];
    const deleteProxyBtn = proxyWrapper.querySelectorAll('.proxy-delete')[0];
    const checkProxyBtn = proxyWrapper.querySelectorAll('.proxy-check')[0];
    const saveProxyBtn = proxyWrapper.querySelectorAll('.proxy-save')[0];
    addProxyBtn.addEventListener('click', () => {
      createProxy(['Not selected', '', '', '', '', '', '']);
    });
    closeProxyBtn.addEventListener('click', () => {
      proxyWrapper.classList.remove('active');
    });
    saveProxyBtn.addEventListener('click', () => {
      if (!saveProxyBtn.classList.contains('btn--disabled')) {
        proxyWrapper.classList.remove('active');
      }
    });
    checkProxyBtn.addEventListener('click', () => {
      if (!checkProxyBtn.classList.contains('btn--disabled')) {
        proxyData = [...proxyData].map(i => {
          if (i.state.checked) {
            i.state.check = 'load';
          }

          return i;
        });
        let searchedData = proxyData.map(i => {
          if (i.state.checked) {
            i.state.checked = false;
            return i;
          }
        });
        searchedData.map(i => {
          //  console.log(i);
          setTimeout(() => {
            let item = i;
            i.state.check = 'success';
            changeProxyDataById(i.id, 'state', i.state);

            for (const status of document.querySelectorAll('.check_status')) {
              if (status.parentNode.getAttribute('data-id') == i.id) {
                status.setAttribute('data-status', 'success');
                status.querySelectorAll('.recheck')[0].classList.add('disabled');
                setTimeout(() => {
                  status.querySelectorAll('.recheck')[0].classList.remove('disabled');
                }, 3000);
              }
            }
          }, Math.random() * 7500);
        });
        theadCheckbox.checked = false;
        saveProxyBtn.classList.remove('btn--disabled');
        saveProxyBtn.classList.add('btn--green');
        rerenderProxyItems();
        hideBtns();
      }
    });
    deleteProxyBtn.addEventListener('click', () => {
      let checkedIds = [];
      [...proxyData].map(i => {
        if (i.state.checked) {
          checkedIds.push(i.id);
        }
      });
      checkedIds.map(id => {
        let rowCounter = 0;
        [...proxyData].map(dataRow => {
          if (dataRow.id === id) {
            proxyData.splice(rowCounter, 1);
          }

          rowCounter++;
        });
      });
      theadCheckbox.checked = false;
      rerenderProxyItems();
    });

    const showBtns = () => {
      deleteProxyBtn.classList.remove('btn--disabled');
      deleteProxyBtn.classList.add('btn--red');
      checkProxyBtn.classList.remove('btn--disabled');
      checkProxyBtn.classList.add('btn--blue');
    };

    const hideBtns = () => {
      deleteProxyBtn.classList.remove('btn--red');
      deleteProxyBtn.classList.add('btn--disabled');
      checkProxyBtn.classList.remove('btn--blue');
      checkProxyBtn.classList.add('btn--disabled');
    };

    const refreshButtonsState = () => {
      let active = false;
      proxyData.map(i => {
        if (i.state.checked) {
          active = true;
          showBtns();
        }
      });
    };

    addFromFileProxyBtn.addEventListener('click', e => {
      const proxyImportPopup = document.querySelectorAll('.mw__proxy_import')[0];
      proxyImportPopup.classList.add('active');
    }); // Checkboxes

    const initCheckboxes = () => {
      const checkboxes = proxyWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow = [];
          [...proxyData].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow.push(i.state);
            }
          });
          checkedRow.checked = e.target.checked;
          changeProxyDataById(id, 'state', checkedRow);
          refreshButtonsState();
        });
      }
    }; // init main Checkbox


    theadCheckbox.addEventListener('change', function (e) {
      let data = [...proxyData];

      if (proxySearch.value.length) {
        data = getSearchedProxyData(proxySearch.value);
        let searchedIds = [...data].map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          let rowCounter = 0;
          [...proxyData].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        proxyData.map(i => {
          i.state.checked = e.target.checked;

          if (e.target.checked) {
            showBtns();
          } else {
            hideBtns();
          }
        });
      }

      rerenderProxyItems();
    }); // init Selects

    const initEventsForSelects = () => {
      const selects = proxyWrapperTable.querySelectorAll('.select');

      for (const select of selects) {
        select.addEventListener('click', function (e) {
          if (select.classList.contains('active')) {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }
          } else {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }

            if (!e.target.classList.contains('.input-option')) {
              select.classList.add('active');
              select.querySelectorAll('ul')[0].style.display = 'block';
            }
          }
        });
      }

      const selectOptions = proxyWrapperTable.querySelectorAll('li.input-option');

      for (const option of selectOptions) {
        option.addEventListener('click', function () {
          if (!option.closest('.select').classList.contains('disabled')) {
            let livalue = option.getAttribute('data-value');
            let lihtml = option.innerHTML;
            option.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
            option.closest('.select').querySelectorAll('.option').value = livalue;
            let id = parseInt(option.parentNode.parentNode.parentNode.parentNode.getAttribute('data-id'));
            changeProxyDataById(id, 'type', livalue);
          }
        });
      }

      document.addEventListener('click', e => {
        if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
          for (const select of selects) {
            select.querySelectorAll('ul')[0].style.display = 'none';
            select.classList.remove('active');
          }
        }
      });
    }; // Flexible wrapper


    const makeFlexibleWidth = () => {
      for (const columnNav of proxyWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 10) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 10) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = proxyWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = proxyWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = proxyWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const initEventsForCheckStatus = () => {
      let checkItems = proxyWrapper.querySelectorAll('.check_status');

      for (const wrapper of checkItems) {
        let recheck = wrapper.querySelectorAll('.recheck')[0];
        let status = wrapper.querySelectorAll('.status')[0];
        let id = wrapper.parentNode.getAttribute('data-id');
        recheck.addEventListener('click', () => {
          recheck.classList.add('disabled');
          status.style.display = 'none';
          let proxyDataState;
          [...proxyData].map(i => {
            if (parseInt(i.id) === parseInt(id)) {
              proxyDataState = i.state;
            }
          });
          proxyDataState.check = 'success';
          changeProxyDataById(id, 'state', proxyDataState);
          status.parentNode.setAttribute('data-status', 'load');
          setTimeout(() => {
            status.parentNode.setAttribute('data-status', 'success');
            status.style.display = 'block';
          }, 3000);
          setTimeout(() => {
            recheck.classList.remove('disabled');
          }, 6000);
        });
      }
    };

    const initSetter = () => {
      let setItems = proxyWrapper.querySelectorAll('.set_status');

      for (const wrapper of setItems) {
        let set = wrapper.querySelectorAll('.setbtn')[0];
        let id = wrapper.parentNode.getAttribute('data-id');
        set.addEventListener('click', () => {
          let proxyDataRow;
          [...proxyData].map(i => {
            if (parseInt(i.id) === parseInt(id)) {
              proxyDataRow = i;
            }
          });

          if (proxyDataRow.state.check === 'success') {
            setProxyAndClose(proxyDataRow);
          }
        });
      }
    };

    const checkIP = inputField => {
      let newSTR = inputField.value;
      newSTR.replace(/[^\d.]/g, '');
      let pos = inputField.selectionStart;
      let ipArr = newSTR.length !== 0 ? newSTR.split(".") : [];
      ipArr = ipArr.map(item => {
        item = parseInt(item);

        if (item > 255) {
          item = 255;
        } else if (item < 0) {
          item = 0;
        }

        if (item.toString() !== 'NaN') {
          return item;
        }
      });
      inputField.value = ipArr.join('.');
    }; // RERENDER ============================================


    const rerenderProxyItems = () => {
      let columns = proxyWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...proxyData];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (proxySearch.value.length !== 0) {
        data = getSearchedProxyData(proxySearch.value);
      }

      let i = 0;

      for (const proxyRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = proxyRow.state.checked ? 'checked' : '';
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-id="' + proxyRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else if (colCounter === 1) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="select"><div class="mm-dropdown"><div class="textfirst">' + proxyRow[Object.keys(proxyRow)[colCounter - 1]] + '</div><ul>  <li class="input-option" data-value="Tor">Tor</li><li class="input-option" data-value="Http">Http</li><li class="input-option" data-value="Socks5">Socks5</li><li class="input-option" data-value="Dynamic socks5">Dynamic socks5</li><li class="input-option" data-value="SSH Tunnel">SSH Tunnel</li><li class="input-option" data-value="Tor + SSH Tunnel">Tor + SSH Tunnel</li><li class="input-option" data-value="SSH + Socks5">SSH + Socks5</li></ul><input type="hidden" class="option" value=""/></div></div></div>');
          } else if (colCounter === 8) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="check_status" data-status="' + proxyRow.state.check + '"><div class="status"></div><div class="preloader"></div><div class="recheck"></div></div></div>');
          } else if (colCounter === 9) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="set_status" data-status="' + proxyRow.state.set + '"><div class="status"></div><div class="setbtn"></div></div></div>');
          } else {
            let colData = proxyRow[Object.keys(proxyRow)[colCounter - 1]].toString();
            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute('data-id', proxyRow.id);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('maxlength', '15');
            x.setAttribute('value', proxyRow[Object.keys(proxyRow)[colCounter - 1]]);

            if (colCounter === 2 || colCounter === 3) {
              divWrapper.classList.add('flexible_wrapper--flag');
            }

            if (colCounter === 2) {
              divWrapper.style.backgroundImage = "url(./images/mw/" + proxyRow.state.connectionIpFlag + ".svg)";
            }

            if (colCounter === 3) {
              divWrapper.style.backgroundImage = "url(./images/mw/" + proxyRow.state.proxyIpFlag + ".svg)";
            }

            if (colCounter === 2 || colCounter === 3 || colCounter === 7) {
              x.setAttribute('placeholder', '10.10.10.10');
              x.addEventListener('keyup', e => {
                checkIP(x);
              });
            }

            if (colCounter === 4) {
              let value = x.value;
              x.addEventListener('keyup', e => {
                x.value = x.value.replace(/[^\d]/g, '');

                if (parseInt(x.value) > 65535) {
                  x.value = 65535;
                }
              });
            }

            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changeProxyDataById(proxyRow.id, Object.keys(proxyRow)[colDuplicator], e.target.value);
            });

            if (proxySearch.value.length !== 0) {
              let text = proxySearch.value;
              let searchReg = new RegExp(text, "igm");
              divWrapper.innerHTML = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              divWrapper.innerHTML = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
            }

            divWrapper.classList.add('wrapper_withoutinput');
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      proxyWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      initEventsForSelects();
      initEventsForCheckStatus();
      initSetter();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderProxyItems();
    initEventsForSelects(); // SEARCH ======================================

    proxySearch.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        proxyWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        proxyWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderProxyItems();
    });
    proxyWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      proxySearch.value = '';
      proxyWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderProxyItems();
    });

    const getSearchedProxyData = value => {
      let proxySearchData1 = [];
      let proxySearchData2 = [];
      let arrayOfvaluesId = [];
      let dataClone1 = [...proxyData].map(x => {
        let isSearchTrueForThisElem = false;
        Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().startsWith(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              arrayOfvaluesId.push(x.id);
              proxySearchData1.push(x);
            }
          }
        });
      });
      let dataClone2 = [...proxyData].map(x => {
        if (arrayOfvaluesId.filter(i => i === x.id).length === 0) {
          let isSearchTrueForThisElem = false;
          Object.values(x).some((item, i) => {
            if (typeof item !== 'object') {
              if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
                isSearchTrueForThisElem = true;
                proxySearchData2.push(x);
              }
            }
          });
        }
      });
      return [...proxySearchData1, ...proxySearchData2];
    }; // IMPORT PROXY =====================================


    let filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
    const holder = document.getElementById('proxyHolder');
    const resultWrapper = document.getElementsByClassName('proxyResult')[0];
    const inputElement = document.getElementById('proxyFileInput');
    const importFilesBtn = document.querySelectorAll('.proxy_import_files')[0];
    const importClosesBtn = document.querySelectorAll('.proxy_import_close')[0];

    holder.ondragover = function () {
      this.className = 'hover';
      return false;
    };

    holder.ondragend = function () {
      this.className = '';
      return false;
    };

    holder.ondrop = function (e) {
      this.className = '';
      e.preventDefault();
      resultWrapper.innerHTML = '';

      for (let i = 0, len = e.dataTransfer.files.length; i < len; i++) filesStore.items.add(e.dataTransfer.files[i]);

      for (let i = 0, len = filesStore.files.length; i < len; i++) {
        let elem = document.createElement('div');
        let close = document.createElement('div');
        elem.classList.add('filewrapper');
        close.classList.add('close');
        close.addEventListener('click', () => {
          filesStore.items.remove(i);
          elem.remove();
          inputElement.files = filesStore.files;
        });
        elem.innerHTML = filesStore.files[i].name;
        elem.appendChild(close);
        resultWrapper.appendChild(elem);
      }

      inputElement.files = filesStore.files;
    };

    const handleImport = e => {
      if (importFilesBtn.classList.contains('btn--green')) {
        for (let i = 0; i < filesStore.files.length; i++) {
          (function (file) {
            let reader = new FileReader();
            reader.addEventListener('load', function (e) {
              let text = e.target.result;
              createProxy(text.split(';'));
            });
            reader.readAsText(file);
          })(filesStore.files[i]);
        }

        filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
        resultWrapper.innerHTML = '';
        importFilesBtn.classList.remove('btn--green');
        importFilesBtn.classList.add('btn--disabled');
        handleClose();
      }
    };

    const handleFiles = e => {
      const fileList = e.target.files;
      e.preventDefault();
      resultWrapper.innerHTML = '';

      for (let i = 0, len = fileList.length; i < len; i++) filesStore.items.add(fileList[i]);

      for (let i = 0, len = filesStore.files.length; i < len; i++) {
        let elem = document.createElement('div');
        let close = document.createElement('div');
        elem.classList.add('filewrapper');
        close.classList.add('close');
        close.addEventListener('click', () => {
          filesStore.items.remove(i);
          elem.remove();
          inputElement.files = filesStore.files;

          if (filesStore.files.length !== 0) {
            importFilesBtn.classList.add('btn--green');
            importFilesBtn.classList.remove('btn--disabled');
          } else {
            importFilesBtn.classList.remove('btn--green');
            importFilesBtn.classList.add('btn--disabled');
          }
        });
        elem.innerHTML = filesStore.files[i].name;
        elem.appendChild(close);
        resultWrapper.appendChild(elem);
      }

      inputElement.files = filesStore.files;
      console.log(filesStore.files.length);

      if (filesStore.files.length !== 0) {
        importFilesBtn.classList.add('btn--green');
        importFilesBtn.classList.remove('btn--disabled');
      } else {
        importFilesBtn.classList.remove('btn--green');
        importFilesBtn.classList.add('btn--disabled');
      }
    };

    const handleClose = () => {
      const proxyImportPopup = document.querySelectorAll('.mw__proxy_import')[0];
      proxyImportPopup.classList.remove('active');
    };

    inputElement.addEventListener('change', handleFiles);
    importFilesBtn.addEventListener('click', handleImport);
    importClosesBtn.addEventListener('click', handleClose);
  }

});
;

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const emulatorWrapper = document.querySelectorAll(".mw__emulator")[0];
    const emulatorWrapperTable = emulatorWrapper.querySelectorAll(".flexible_table")[0];
  }

});

/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const agentWrapper = document.querySelectorAll('.mw__useragent_manager')[0];
    const agentWrapperTable = agentWrapper.querySelectorAll('.flexible_table')[0];
    const theadCheckbox = agentWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const agentSearch = agentWrapper.querySelectorAll('.search input')[0];
    let mwState = {
      'category': 'lastUsed',
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      }
    };
    const btnsWrappers = agentWrapper.querySelectorAll('.btns-wrapper--js');

    for (let btnsWrapper of btnsWrappers) {
      let buttons = btnsWrapper.querySelectorAll('.btn');

      for (let btn of buttons) {
        btn.addEventListener('click', e => {
          let cat = e.target.getAttribute('data-category');
          let val = e.target.getAttribute('data-value');
          mwState.config[cat] = val;
          theadCheckbox.checked = false;
          rerenderAgentsItems();
        });
      }
    }

    let tabsBtns = agentWrapper.querySelectorAll('.tabs_manager span');

    for (let btn of tabsBtns) {
      btn.addEventListener('click', e => {
        let val = e.target.getAttribute('data-value');
        mwState.category = val;
        theadCheckbox.checked = false;
        rerenderAgentsItems();
      });
    }

    let agentData = [{
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      },
      'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',
      'id': 123,
      'state': {
        'checked': false,
        'current': true,
        'set': true,
        'lastUsed': 1603709258344,
        'dateAdded': 1603709258322,
        'setCounter': 1
      }
    }, {
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      },
      'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',
      'id': 124,
      'state': {
        'checked': false,
        'current': false,
        'set': true,
        'lastUsed': 111,
        'dateAdded': 110,
        //'lastUsed': 1603709258344,
        //'dateAdded':  1603709258322,
        'setCounter': 2
      }
    }, {
      'config': {
        'os': 'linux',
        'browser': 'safari'
      },
      'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',
      'id': 125,
      'state': {
        'checked': false,
        'current': false,
        'set': true,
        'lastUsed': 222,
        'dateAdded': 220,
        'setCounter': 0
      }
    }, {
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      },
      'useragent': 'useragent',
      'id': 126,
      'state': {
        'checked': false,
        'current': false,
        'set': true,
        'lastUsed': 1603709258344,
        'dateAdded': 1603709258322,
        'setCounter': 1
      }
    }]; // DataWorkers

    const createAgent = data => {
      agentData.splice(agentData.length, 0, {
        'config': {
          'os': data[0],
          'browser': data[1]
        },
        'useragent': data[2],
        'id': +new Date(),
        'state': {
          'checked': false,
          'current': false,
          'set': true,
          'lastUsed': 0,
          'dateAdded': +new Date(),
          'setCounter': 0
        }
      });
      rerenderAgentsItems();
    };

    const changeAgentDataById = (id, key, value) => {
      agentData = [...agentData].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
      agentWrapper.querySelectorAll('.agent-save')[0].classList.remove('btn--disabled');
      agentWrapper.querySelectorAll('.agent-save')[0].classList.add('btn--green');
    };

    const setAgentAndClose = data => {
      agentData.map(i => {
        if (i.state.current) {
          i.state.current = false;
        }

        return i;
      });
      agentData.map(i => {
        if (i.id == data.id) {
          i.state.current = true;
          i.state.lastUsed = +new Date();
          i.state.setCounter = i.state.setCounter++;
        }

        return i;
      });
      rerenderAgentsItems();
      document.querySelectorAll('#useragent')[0].value = data.useragent;
      document.querySelectorAll('#useragent')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      setTimeout(() => {
        agentWrapper.classList.remove('active');
      }, 500);
    }; // BUTTONS ============================================


    const closeAgentsBtn = agentWrapper.querySelectorAll('.agent-close')[0];
    const addAgentBtn = agentWrapper.querySelectorAll('.agent-add')[0];
    const deleteAgentBtn = agentWrapper.querySelectorAll('.agent-delete')[0];
    const saveAgentBtn = agentWrapper.querySelectorAll('.agent-save')[0];
    addAgentBtn.addEventListener('click', () => {
      createAgent(['unset', 'unset', '']);
    });
    closeAgentsBtn.addEventListener('click', () => {
      agentWrapper.classList.remove('active');
    });
    saveAgentBtn.addEventListener('click', () => {
      if (!saveAgentBtn.classList.contains('btn--disabled')) {
        agentWrapper.classList.remove('active');
      }
    });
    deleteAgentBtn.addEventListener('click', () => {
      let checkedIds = [];
      [...agentData].map(i => {
        if (i.state.checked) {
          checkedIds.push(i.id);
        }
      });
      checkedIds.map(id => {
        let rowCounter = 0;
        [...agentData].map(dataRow => {
          if (dataRow.id === id) {
            agentData.splice(rowCounter, 1);
          }

          rowCounter++;
        });
      });
      theadCheckbox.checked = false;
      rerenderAgentsItems();
    });

    const showBtns = () => {
      deleteAgentBtn.classList.remove('btn--disabled');
      deleteAgentBtn.classList.add('btn--red');
    };

    const hideBtns = () => {
      deleteAgentBtn.classList.remove('btn--red');
      deleteAgentBtn.classList.add('btn--disabled');
    };

    const refreshButtonsState = () => {
      let active = false;
      agentData.map(i => {
        if (i.state.checked) {
          active = true;
          showBtns();
        }
      });
    }; // Checkboxes


    const initCheckboxes = () => {
      const checkboxes = agentWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow;
          [...agentData].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow = i.state;
            }
          });
          checkedRow.checked = e.target.checked;
          changeAgentDataById(id, 'state', checkedRow);
          let checkedIds = [];
          [...agentData].map(i => {
            if (i.state.checked) {
              checkedIds.push(i.id);
            }
          });

          if (checkedIds.length > 0) {
            deleteAgentBtn.classList.remove('btn--disabled');
            deleteAgentBtn.classList.add('btn--red');
          } else {
            deleteAgentBtn.classList.add('btn--disabled');
            deleteAgentBtn.classList.remove('btn--red');
          }

          refreshButtonsState();
        });
      }
    };

    theadCheckbox.addEventListener('change', function (e) {
      let data = getCategorizedData();

      if (agentSearch.value.length) {
        data = getSearchedagentData(agentSearch.value);
        let searchedIds = getCategorizedData().map(i => {
          return i.id;
        });
        console.log(searchedIds);
        searchedIds.map(id => {
          let rowCounter = 0;
          [...agentData].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        data = getCategorizedData();
        let searchedIds = data.map(i => {
          return i.id;
        }); //mwState.config.

        searchedIds.map(id => {
          agentData.map(i => {
            if (i.id === id) {
              i.state.checked = e.target.checked;
            }

            if (e.target.checked) {
              showBtns();
            } else {
              hideBtns();
            }
          });
        });
      }

      rerenderAgentsItems();
    }); // Flexible wrapper

    const makeFlexibleWidth = () => {
      for (const columnNav of agentWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 4) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 4) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = agentWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = agentWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = agentWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const initSetter = () => {
      let setItems = agentWrapper.querySelectorAll('.set_status');

      for (const wrapper of setItems) {
        let set = wrapper.querySelectorAll('.setbtn')[0];

        if (set) {
          let id = wrapper.parentNode.getAttribute('data-id');
          set.addEventListener('click', () => {
            let agentDataRow;
            [...agentData].map(i => {
              if (parseInt(i.id) === parseInt(id)) {
                agentDataRow = i;
              }
            });

            if (!agentDataRow.state.current) {
              setAgentAndClose(agentDataRow);
            }
          });
        }
      }
    };

    const getCategorizedData = () => {
      let data = [...agentData];
      let rowCounter = 0;
      let lastUsedIndex = 0;

      switch (mwState.category) {
        case 'lastUsed':
          data.sort((a, b) => {
            return b['state'].lastUsed - a['state'].lastUsed;
          });
          data.map(i => {
            if (i.state.current) {
              lastUsedIndex = rowCounter;
            }

            rowCounter++;
          });
          data.unshift(...data.splice(lastUsedIndex, 1));
          break;

        case 'dateAdded':
          data.sort((a, b) => {
            return b['state'].dateAdded - a['state'].dateAdded;
          });
          data.map(i => {
            if (i.state.current) {
              lastUsedIndex = rowCounter;
            }

            rowCounter++;
          });
          data.unshift(...data.splice(lastUsedIndex, 1));
          break;

        case 'mostUsed':
          data.sort((a, b) => {
            return b['state'].setCounter - a['state'].setCounter;
          });
          data.map(i => {
            if (i.state.current) {
              lastUsedIndex = rowCounter;
            }

            rowCounter++;
          });
          data.unshift(...data.splice(lastUsedIndex, 1));
          break;

        default:
          break;
      }

      let newData = [];

      switch (mwState.config.os) {
        case 'windows':
          [...data].map(i => {
            if (i.config.os === 'windows') {
              newData.push(i);
            }
          });
          break;

        case 'linux':
          [...data].map(i => {
            console.log(i.config.os);

            if (i.config.os === 'linux') {
              newData.push(i);
            }
          });
          break;

        case 'macos':
          [...data].map(i => {
            if (i.config.os === 'macos') {
              newData.push(i);
            }
          });
          break;

        case 'android':
          [...data].map(i => {
            if (i.config.os === 'android') {
              newData.push(i);
            }
          });
          break;

        case 'ios':
          [...data].map(i => {
            if (i.config.os === 'ios') {
              newData.push(i);
            }
          });
          break;

        default:
          break;
      }

      let newData1 = [];

      switch (mwState.config.browser) {
        case 'chrome':
          [...newData].map(i => {
            if (i.config.browser === 'chrome') {
              newData1.push(i);
            }
          });
          break;

        case 'safari':
          [...newData].map(i => {
            if (i.config.browser === 'safari') {
              newData1.push(i);
            }
          });
          break;

        case 'firefox':
          [...newData].map(i => {
            if (i.config.browser === 'firefox') {
              newData1.push(i);
            }
          });
          break;

        case 'opera':
          [...newData].map(i => {
            if (i.config.browser === 'opera') {
              newData1.push(i);
            }
          });
          break;

        case 'explorer':
          [...newData].map(i => {
            if (i.config.browser === 'explorer') {
              newData1.push(i);
            }
          });
          break;

        default:
          break;
      }

      let uncatData = [];
      agentData.map(i => {
        if (i.config.os === 'unset' || i.config.browser === 'unset') {
          uncatData.push(i);
        }
      });
      return [...newData1, ...uncatData];
    }; // RERENDER ============================================


    const rerenderAgentsItems = () => {
      let columns = agentWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = getCategorizedData();

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (agentSearch.value.length !== 0) {
        data = getSearchedAgentData(agentSearch.value);
      }

      let i = 0;

      for (const agentRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = agentRow.state.checked ? 'checked' : '';
            agentWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-current="' + agentRow.state.current + '" data-id="' + agentRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else if (colCounter === 1) {
            let osImg = '<img src="./images/userAgents/' + agentRow.config.os + '.png" style="margin-top: 12px;margin-left: 16px;margin-right: 12px;"/>';
            let browserImg = '<img src="./images/userAgents/' + agentRow.config.browser + '.png"/>';
            agentWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-current="' + agentRow.state.current + '" class="flexible_wrapper" data-id="' + agentRow.id + '">' + osImg + browserImg + '</div>');
          } else if (colCounter === 3) {
            let rowContent;

            if (agentRow.state.current) {
              rowContent = '<div class="set_status" data-status="' + agentRow.state.set + '"><svg width="12" style="margin:13px 25px" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.8125 6.5C11.8125 3.3125 9.1875 0.6875 6 0.6875C2.78906 0.6875 0.1875 3.3125 0.1875 6.5C0.1875 9.71094 2.78906 12.3125 6 12.3125C9.1875 12.3125 11.8125 9.71094 11.8125 6.5ZM5.32031 9.59375C5.17969 9.73438 4.92188 9.73438 4.78125 9.59375L2.34375 7.15625C2.20312 7.01562 2.20312 6.75781 2.34375 6.61719L2.88281 6.10156C3.02344 5.9375 3.25781 5.9375 3.39844 6.10156L5.0625 7.74219L8.57812 4.22656C8.71875 4.0625 8.95312 4.0625 9.09375 4.22656L9.63281 4.74219C9.77344 4.88281 9.77344 5.14062 9.63281 5.28125L5.32031 9.59375Z" fill="#E99C61"/></svg></div>';
            } else {
              rowContent = '<div class="set_status" data-status="' + agentRow.state.set + '"><div class="status"></div><div class="setbtn"></div></div>';
            }

            agentWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-current="' + agentRow.state.current + '" class="flexible_wrapper" data-id="' + agentRow.id + '">' + rowContent + '</div>');
          } else {
            let colData = agentRow[Object.keys(agentRow)[colCounter - 1]].toString();
            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute('data-id', agentRow.id);
            divWrapper.setAttribute('data-current', agentRow.state.current);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('value', agentRow[Object.keys(agentRow)[colCounter - 1]]);
            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changeAgentDataById(agentRow.id, Object.keys(agentRow)[colDuplicator], e.target.value);
            });

            if (agentSearch.value.length !== 0) {
              let text = agentSearch.value;
              let searchReg = new RegExp(text, "igm");
              divWrapper.innerHTML = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              divWrapper.innerHTML = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
            }

            divWrapper.classList.add('wrapper_withoutinput');
            agentWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      agentWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      initSetter();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderAgentsItems(); // SEARCH ======================================

    agentSearch.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        agentWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        agentWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderAgentsItems();
    });
    agentWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      agentSearch.value = '';
      agentWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderAgentsItems();
    });

    const getSearchedAgentData = value => {
      let vals2;
      let agentSearchData2 = [];
      getCategorizedData().map(x => {
        let isSearchTrueForThisElem = false;
        vals2 = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              agentSearchData2.push(x);
            }
          }
        });
      });
      return [...agentSearchData2];
    };
  }

});
;

/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    let mw = document.querySelectorAll('.mw__config_manager')[0];
    const refreshBTN = document.querySelectorAll('.config--refresh')[0];
    const resetBTN = document.querySelectorAll('.config--reset')[0];
    const saveBTN = document.querySelectorAll('.config--save')[0];
    const closeBTN = document.querySelectorAll('.config--close')[0];
    let btnsWrapper = mw.querySelectorAll('.btns-wrapper--js');
    let os = 'Windows';
    let browser = 'Chrome';
    refreshBTN.addEventListener('click', () => {
      let text = document.querySelectorAll('#useragent_comment')[0];
      let width = document.querySelectorAll('#manager_width_screen')[0];
      let height = document.querySelectorAll('#manager_height_screen')[0];
      let video = document.querySelectorAll('#config_videocart')[0];

      if (text.value === 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246') {
        text.value = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36';
        width.value = '1920';
        height.value = '1080';
        video.value = 'HD6000';
      } else {
        text.value = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246';
        width.value = '1366';
        height.value = '768';
        video.value = 'GTX 1060 TI';
      }
    });
    resetBTN.addEventListener('click', () => {
      let text = document.querySelectorAll('#useragent_comment')[0];
      let width = document.querySelectorAll('#manager_width_screen')[0];
      let height = document.querySelectorAll('#manager_height_screen')[0];
      let video = document.querySelectorAll('#config_videocart')[0];
      text.value = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246';
      width.value = '1366';
      height.value = '768';
      video.value = 'GTX 1060 TI';

      for (let wrapper of btnsWrapper) {
        let btns = wrapper.querySelectorAll('.btn');
        let counter = 0;

        for (let btn of btns) {
          btn.classList.remove('active');

          if (counter === 0) {
            btn.classList.add('active');
          }

          counter++;
        }
      }
    });
    closeBTN.addEventListener('click', () => {
      mw.classList.remove('active');
    });
    saveBTN.addEventListener('click', () => {
      let text = document.querySelectorAll('#useragent_comment')[0];
      let width = document.querySelectorAll('#manager_width_screen')[0];
      let height = document.querySelectorAll('#manager_height_screen')[0];
      let video = document.querySelectorAll('#config_videocart')[0];
      let osOrBrowser = 0;

      for (let wrapper of btnsWrapper) {
        let btns = wrapper.querySelectorAll('.btn');
        let counter = 0;

        for (let btn of btns) {
          if (btn.classList.contains('active')) {
            if (osOrBrowser === 0) {
              os = btn.textContent.replace(/\s/g, '');
            } else {
              browser = btn.textContent.replace(/\s/g, '');
            }
          }
        }

        osOrBrowser++;
      }

      let useragent = document.querySelectorAll('#useragent')[0];
      useragent.value = document.querySelectorAll('#useragent_comment')[0].value;
      document.querySelectorAll('#useragent_os')[0].innerHTML = '';
      document.querySelectorAll('#useragent_os')[0].insertAdjacentHTML('beforeend', '<img src="images/mw/' + os.toLowerCase() + '.svg" /> ' + os + '');
      document.querySelectorAll('#useragent_browser')[0].innerHTML = '';
      document.querySelectorAll('#useragent_browser')[0].insertAdjacentHTML('beforeend', '<img src="images/mw/' + browser.toLowerCase() + '.svg" />' + browser + '');
    });
  }

});

/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__js_errors')[0];
    let data = [{
      'timestamp': 1611245096712,
      'message': 'WebSocket connection to wss://chat5-1.jivosite.com/WWzUz7zx7F?bb152f0fb2c34ead failed: Error in connection establishment: net::ERR_SOCKS_CONNECTION_FAILED',
      'line': 12,
      'source': 'emulatorHandler.js'
    }, {
      'timestamp': 1611245251451,
      'message': 'WebSocket connection to wss://chat5-1.jivosite.com/WWzUz7zx7F?bb152f0fb2c34ead failed: Error in connection establishment: net::ERR_SOCKS_CONNECTION_FAILED',
      'line': 122,
      'source': 'emulatorHandler.js'
    }, {
      'timestamp': 1611245281120,
      'message': 'WebSocket connection to wss://chat5-1.jivosite.com/WWzUz7zx7F?bb152f0fb2c34ead failed: Error in connection establishment: net::ERR_SOCKS_CONNECTION_FAILED',
      'line': 991,
      'source': ' '
    }, {
      'timestamp': 1611245216712,
      'message': 'WebSocket connection to wss://chat5-1.jivosite.com/WWzUz7zx7F?bb152f0fb2c34ead failed: Error in connection establishment: net::ERR_SOCKS_CONNECTION_FAILED',
      'line': 8881,
      'source': ' '
    }, {
      'timestamp': 1611245096712,
      'message': 'WebSocket connection to wss://chat5-1.jivosite.com/WWzUz7zx7F?bb152f0fb2c34ead failed: Error in connection establishment: net::ERR_SOCKS_CONNECTION_FAILED',
      'line': 12,
      'source': ' '
    }]; // BUTTONS ============================================
    // const closeAgentsBtn = mwWrapper.querySelectorAll('.')[0]
    //
    //
    // const saveAgentBtn = mwWrapper.querySelectorAll('.')[0]
    // closeAgentsBtn.addEventListener('click', () => {
    //     mwWrapper.classList.remove('active')
    //   })
    // saveAgentBtn.addEventListener('click', () => {
    //   if (!saveAgentBtn.classList.contains('btn--disabled')) {
    //     mwWrapper.classList.remove('active')
    //   }
    // })

    const getTimeFromDate = timestamp => {
      let date = new Date(timestamp * 1000);
      let hours = date.getHours();
      let minutes = date.getMinutes();
      let seconds = date.getSeconds();

      const pad = num => {
        return ("0" + num).slice(-2);
      };

      return pad(hours) + ":" + pad(minutes) + ":" + pad(seconds);
    };

    const createDivWithContent = (classNameSuffix, content) => {
      let div = document.createElement('div');
      div.classList.add(classNameSuffix + '__row');
      let p = document.createElement('p');
      p.classList.add(classNameSuffix + '__text');
      p.innerHTML = content;
      div.appendChild(p);
      return div;
    }; // RERENDER ============================================


    const renderItems = () => {
      const dataView = data.map(item => {
        let errorWrapper = document.createElement('div');
        errorWrapper.classList.add('error');
        let errorString = '[' + getTimeFromDate(item.timestamp) + '] Message: ' + item.message;
        let errorAdditionalString = 'Line: ' + item.line + ' Source: ' + item.source;
        let mainWrapper = createDivWithContent('error', errorString);
        let additionalWrapper = createDivWithContent('error', errorAdditionalString);
        errorWrapper.appendChild(mainWrapper);
        errorWrapper.appendChild(additionalWrapper);
        return errorWrapper;
      });
      let contentWrapper = mwWrapper.querySelectorAll('.error-content')[0];
      contentWrapper.innerHTML = '';
      dataView.map(item => {
        contentWrapper.appendChild(item);
      });
    };

    renderItems();
  }

});
;

/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__rabbitsEdit')[0];
    const searchInput = mwWrapper.querySelectorAll('.search input')[0];
    let contentWrapper = mwWrapper.querySelectorAll('.edit-search-body')[0];
    let data = [{
      'name': 'Shevchenko',
      'id': 1
    }, {
      'name': 'Rebrov',
      'id': 2
    }, {
      'name': 'Roberto',
      'id': 3
    }, {
      'name': 'Zidane',
      'id': 4
    }, {
      'name': 'James',
      'id': 5
    }, {
      'name': 'Sheringham',
      'id': 6
    }, {
      'name': 'Lemon Brother =)',
      'id': 7
    }];
    let proxiedData = new Proxy(data, {
      get(target, prop) {
        console.log(target);
        return target;
      }

    });
    let qwe = proxiedData[0]; // get index of object with id:37

    const removeHashtag = id => {
      let removeIndex = data.map(function (item) {
        return item.id;
      }).indexOf(id);
      data.splice(removeIndex, 1);
    }; // BUTTONS ============================================
    // const closeAgentsBtn = mwWrapper.querySelectorAll('.')[0]
    //
    //
    // const saveAgentBtn = mwWrapper.querySelectorAll('.')[0]
    // closeAgentsBtn.addEventListener('click', () => {
    //     mwWrapper.classList.remove('active')
    //   })
    // saveAgentBtn.addEventListener('click', () => {
    //   if (!saveAgentBtn.classList.contains('btn--disabled')) {
    //     mwWrapper.classList.remove('active')
    //   }
    // })


    const createHashtag = hashtagData => {
      let div = document.createElement('div');
      div.classList.add('edit-hashtag');
      div.setAttribute('id', hashtagData.id);
      let close = document.createElement('div');
      close.classList.add('close-hashtag');
      div.innerHTML = hashtagData.name;
      div.appendChild(close);
      div.addEventListener('click', e => {
        div.classList.add('hidden');
        setTimeout(() => {
          div.remove();
          removeHashtag(hashtagData.id);
        }, 1000);
      });
      return div;
    }; // RERENDER ============================================


    const renderItems = () => {
      const clonedData = searchInput.value.length === 0 ? [...data] : [...getSearchedData(searchInput.value)]; // Original data or searched

      const hashtagArray = clonedData.map(item => {
        return createHashtag(item);
      });
      contentWrapper.innerHTML = '';
      hashtagArray.map(item => {
        contentWrapper.appendChild(item);
      });
    };

    renderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      renderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      renderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      data.map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }
        });
      });
      return [...searchInputData];
    };
  }

});
;

/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    for (const nav of document.querySelectorAll('.columnNav')) {
      dragElement(nav);
    }

    function dragElement(elmnt) {
      let pos1 = 0,
          pos3 = 0;
      elmnt.onmousedown = dragMouseDown;

      function dragMouseDown(e) {
        e = e || window.event;
        e.preventDefault();
        document.onmouseup = closeDragElement;
        document.onmousemove = elementDrag;
      }

      function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();

        const getRightOffset = (index, wrapper) => {
          return wrapper.children.length - parseInt(index);
        };

        let columnIndex = parseInt(elmnt.parentNode.getAttribute('data-column'));
        let stopLeftPosition = 50 * parseInt(columnIndex);
        let stopRightPosition = getRightOffset(columnIndex, elmnt.parentNode.parentNode) * 50;
        let mwOffsetLeft = elmnt.parentNode.parentNode.parentNode.parentNode.offsetLeft / 2;
        pos1 = e.clientX - mwOffsetLeft;

        if (e.clientX - mwOffsetLeft < stopLeftPosition) {
          pos1 = stopLeftPosition;
        } else if (e.clientX - mwOffsetLeft > 950 - stopRightPosition) {
          pos1 = 950 - stopRightPosition;
        }

        elmnt.parentNode.style.left = pos1 + 'px';

        if (elmnt.parentNode.parentNode.children.length > columnIndex + 1) {
          for (const wrapper of elmnt.parentNode.querySelectorAll('.flexible_wrapper')) {
            wrapper.style.maxWidth = parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        } else {
          for (const wrapper of elmnt.parentNode.querySelectorAll('.flexible_wrapper')) {
            wrapper.style.maxWidth = 950 - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }

        for (const wrapper of elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1].querySelectorAll('.flexible_wrapper')) {
          wrapper.style.maxWidth = parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1].style.left) + 'px';
        }
      }

      function closeDragElement() {
        /* stop moving when mouse button is released: */
        document.onmouseup = null;
        document.onmousemove = null;
      }
    }
  }

});
;

/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__extended_settings')[0];
    const mwWrapperTable = mwWrapper.querySelectorAll('.main--blocked .flexible_table')[0];
    const theadCheckbox = mwWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const searchInput = mwWrapper.querySelectorAll('.main--blocked .search input')[0];
    let dataArr = [{
      'title': 'Twitter website title',
      'url': 'https://twitter.com/adv/detection',
      'id': 1603709258344,
      'state': {
        'checked': false
      }
    }, {
      'title': 'Facebook website title',
      'url': 'https://facebook.com/adv/detection',
      'id': 1603709258346,
      'state': {
        'checked': false
      }
    }, {
      'title': 'VK website title',
      'url': 'https://vk.com/adv/detection',
      'id': 1603709258348,
      'state': {
        'checked': false
      }
    }]; // DataWorkers

    const createDataItem = data => {
      dataArr.splice(dataArr.length, 0, {
        'title': data[0],
        'url': data[1],
        'id': +new Date(),
        'state': {
          'checked': false
        }
      });
      rerenderItems();
    };

    const changedataArrById = (id, key, value) => {
      dataArr = [...dataArr].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    }; // BUTTONS ============================================


    const closeBtn = mwWrapper.querySelectorAll('.blocked-close')[0];
    const addBtn = mwWrapper.querySelectorAll('.blocked-add')[0];
    const deleteBtn = mwWrapper.querySelectorAll('.blocked-delete')[0];
    const saveBtn = mwWrapper.querySelectorAll('.blocked-save')[0];
    addBtn.addEventListener('click', () => {
      createDataItem(['', '']);
      saveBtn.classList.remove('btn--disabled');
      saveBtn.classList.add('btn--green');
    });
    closeBtn.addEventListener('click', () => {
      mwWrapper.classList.remove('active');
    });
    saveBtn.addEventListener('click', () => {
      if (!saveBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
        saveBtn.classList.add('btn--disabled');
        saveBtn.classList.remove('btn--green');
      }
    });
    deleteBtn.addEventListener('click', e => {
      if (!e.target.classList.contains('btn--disabled')) {
        let checkedIds = [];
        [...dataArr].map(i => {
          if (i.state.checked) {
            checkedIds.push(i.id);
          }
        });
        checkedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataArr.splice(rowCounter, 1);
            }

            rowCounter++;
          });
        });
        theadCheckbox.checked = false;
        e.target.classList.add('btn--disabled');
        e.target.classList.remove('btn--red');
        rerenderItems();
      }
    }); // Checkboxes

    const initCheckboxes = () => {
      const checkboxes = mwWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow;
          [...dataArr].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow = i.state;
            }
          });
          checkedRow.checked = e.target.checked;
          changedataArrById(id, 'state', checkedRow);
          let checkedIds = [];
          [...dataArr].map(i => {
            if (i.state.checked) {
              checkedIds.push(i.id);
            }
          });

          if (checkedIds.length > 0) {
            deleteBtn.classList.remove('btn--disabled');
            deleteBtn.classList.add('btn--red');
          } else {
            deleteBtn.classList.add('btn--disabled');
            deleteBtn.classList.remove('btn--red');
          }
        });
      }
    };

    theadCheckbox.addEventListener('change', function (e) {
      let data = [...dataArr];

      if (searchInput.value.length) {
        data = getSearchedData(searchInput.value);
        let searchedIds = [...dataArr].map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        data = [...dataArr];
        let searchedIds = data.map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          dataArr.map(i => {
            if (i.id === id) {
              i.state.checked = e.target.checked;
            }
          });
        });
      }

      if (e.target.checked) {
        deleteBtn.classList.add('btn--red');
        deleteBtn.classList.remove('btn--disabled');
      } else {
        deleteBtn.classList.add('btn--disabled');
        deleteBtn.classList.remove('btn--red');
      }

      rerenderItems();
    }); // Flexible wrapper

    const makeFlexibleWidth = () => {
      for (const columnNav of mwWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 3) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 3) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = mwWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    }; // RERENDER ============================================


    const rerenderItems = () => {
      let columns = mwWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...dataArr];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (searchInput.value.length !== 0) {
        data = getSearchedData(searchInput.value);
      }

      let i = 0;

      for (const dataRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = dataRow.state.checked ? 'checked' : '';
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div  data-id="' + dataRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else {
            let colData = dataRow[Object.keys(dataRow)[colCounter - 1]].toString();
            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].querySelectorAll('.flexible_wrapper');
            divWrapper.setAttribute('data-id', dataRow.id);
            divWrapper.setAttribute('data-current', dataRow.state.current);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter - 1]]);
            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changedataArrById(dataRow.id, Object.keys(dataRow)[colDuplicator], e.target.value);
              saveBtn.classList.remove('btn--disabled');
              saveBtn.classList.add('btn--green');
            });
            divWrapper.classList.add('wrapper_withoutinput');

            if (searchInput.value.length !== 0) {
              let text = searchInput.value;
              let searchReg = new RegExp(text, "igm");
              divWrapper.innerHTML = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              divWrapper.innerHTML = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
            }

            mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      mwWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      [...dataArr].map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }
        });
      });
      return [...searchInputData];
    };
  }

});
;

/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__extended_settings')[0];
    const mwWrapperTable = mwWrapper.querySelectorAll('.main--headers .flexible_table')[0];
    const theadCheckbox = mwWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const searchInput = mwWrapper.querySelectorAll('.main--headers .search input')[0];
    let dataArr = [{
      'title': 'Header name',
      'value': 'Header value',
      'id': 1603709258344,
      'state': {
        'checked': false
      }
    }]; // DataWorkers

    const createDataItem = data => {
      dataArr.splice(dataArr.length, 0, {
        'title': data[0],
        'value': data[1],
        'id': +new Date(),
        'state': {
          'checked': false
        }
      });
      rerenderItems();
    };

    const changedataArrById = (id, key, value) => {
      dataArr = [...dataArr].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    }; // BUTTONS ============================================


    const closeBtn = mwWrapper.querySelectorAll('.headers-close')[0];
    const addBtn = mwWrapper.querySelectorAll('.headers-add')[0];
    const deleteBtn = mwWrapper.querySelectorAll('.headers-delete')[0];
    const saveBtn = mwWrapper.querySelectorAll('.headers-save')[0];
    addBtn.addEventListener('click', () => {
      createDataItem(['', '']);
      saveBtn.classList.remove('btn--disabled');
      saveBtn.classList.add('btn--green');
    });
    closeBtn.addEventListener('click', () => {
      mwWrapper.classList.remove('active');
    });
    saveBtn.addEventListener('click', () => {
      if (!saveBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
        saveBtn.classList.add('btn--disabled');
        saveBtn.classList.remove('btn--green');
      }
    });
    deleteBtn.addEventListener('click', e => {
      if (!e.target.classList.contains('btn--disabled')) {
        let checkedIds = [];
        [...dataArr].map(i => {
          if (i.state.checked) {
            checkedIds.push(i.id);
          }
        });
        checkedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataArr.splice(rowCounter, 1);
            }

            rowCounter++;
          });
        });
        theadCheckbox.checked = false;
        e.target.classList.add('btn--disabled');
        e.target.classList.remove('btn--red');
        rerenderItems();
      }
    }); // Checkboxes

    const initCheckboxes = () => {
      const checkboxes = mwWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow;
          [...dataArr].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow = i.state;
            }
          });
          checkedRow.checked = e.target.checked;
          changedataArrById(id, 'state', checkedRow);
          let checkedIds = [];
          [...dataArr].map(i => {
            if (i.state.checked) {
              checkedIds.push(i.id);
            }
          });

          if (checkedIds.length > 0) {
            deleteBtn.classList.remove('btn--disabled');
            deleteBtn.classList.add('btn--red');
          } else {
            deleteBtn.classList.add('btn--disabled');
            deleteBtn.classList.remove('btn--red');
          }
        });
      }
    };

    theadCheckbox.addEventListener('change', function (e) {
      let data = [...dataArr];

      if (searchInput.value.length) {
        data = getSearchedData(searchInput.value);
        let searchedIds = [...dataArr].map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        data = [...dataArr];
        let searchedIds = data.map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          dataArr.map(i => {
            if (i.id === id) {
              i.state.checked = e.target.checked;
            }
          });
        });
      }

      if (e.target.checked) {
        deleteBtn.classList.add('btn--red');
        deleteBtn.classList.remove('btn--disabled');
      } else {
        deleteBtn.classList.add('btn--disabled');
        deleteBtn.classList.remove('btn--red');
      }

      rerenderItems();
    }); // Flexible wrapper

    const makeFlexibleWidth = () => {
      for (const columnNav of mwWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 3) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 3) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = mwWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    }; // RERENDER ============================================


    const rerenderItems = () => {
      let columns = mwWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...dataArr];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (searchInput.value.length !== 0) {
        data = getSearchedData(searchInput.value);
      }

      let i = 0;

      for (const dataRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = dataRow.state.checked ? 'checked' : '';
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div  data-id="' + dataRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else {
            let colData = dataRow[Object.keys(dataRow)[colCounter - 1]];
            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute('data-id', dataRow.id);
            divWrapper.setAttribute('data-current', dataRow.state.current);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter - 1]]);
            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changedataArrById(dataRow.id, Object.keys(dataRow)[colDuplicator], e.target.value);
              saveBtn.classList.remove('btn--disabled');
              saveBtn.classList.add('btn--green');
            });
            divWrapper.classList.add('wrapper_withoutinput');

            if (searchInput.value.length !== 0) {
              let text = searchInput.value;
              let searchReg = new RegExp(text, "igm");
              divWrapper.innerHTML = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              divWrapper.innerHTML = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
            }

            mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      mwWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      [...dataArr].map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }
        });
      });
      return [...searchInputData];
    };
  }

});
;

/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__extended_settings')[0];
    const mwWrapperTable = mwWrapper.querySelectorAll('.main--plugins .flexible_table')[0];
    const theadCheckbox = mwWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const searchInput = mwWrapper.querySelectorAll('.main--plugins .search input')[0];
    let dataArr = [{
      'name': 'Yanado - Task Man',
      'description': 'Yanado - Task Man',
      'version': '6.6',
      'filename': 'Yanado - Task Man',
      'mime': [{
        'type': 'application/x-unknown',
        'description': 'Mime description',
        'suffix': 'ksh'
      }, {
        'type': 'application/x-unknown',
        'description': 'Portable Nati',
        'suffix': 'ksh'
      }],
      'id': 1603709258344,
      'state': {
        'checked': false
      }
    }, {
      'name': 'Yanado - Task Man',
      'description': 'Yanado - Task Man',
      'version': '6.6',
      'filename': 'Yanado - Task Man',
      'mime': [{
        'type': 'application/x-unknown',
        'description': 'Mime description',
        'suffix': 'ksh'
      }],
      'id': 1603709258345,
      'state': {
        'checked': false
      }
    }]; // DataWorkers

    const createDataItem = data => {
      dataArr.splice(dataArr.length, 0, {
        'name': '',
        'description': '',
        'version': '',
        'filename': '',
        'mime': [{
          'type': '',
          'description': '',
          'suffix': ''
        }],
        'id': +new Date(),
        'state': {
          'checked': false
        }
      });
      rerenderItems();
    };

    const changedataArrById = (id, key, value) => {
      dataArr = [...dataArr].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    };

    const createMimeTypeById = (id, index) => {
      dataArr.map(i => {
        if (i.id === parseInt(id)) {
          i.mime.insert(index, {
            'type': '',
            'description': '',
            'suffix': ''
          });
        }
      });
      rerenderItems();
    };

    const delMimeTypeById = (id, index) => {
      dataArr.map(i => {
        if (i.id === parseInt(id)) {
          if (i.mime.length !== 1) {
            i.mime.splice(index, 1);
          }
        }
      });
      rerenderItems();
    };

    const delItemById = id => {
      let index = 0;
      dataArr.map(i => {
        if (i.id === id) {
          dataArr.splice(index, 1);
        }

        index++;
      });
      rerenderItems();
    }; // BUTTONS ============================================


    const closeBtn = mwWrapper.querySelectorAll('.plugins-close')[0];
    const addBtn = mwWrapper.querySelectorAll('.plugins-add')[0];
    const deleteBtn = mwWrapper.querySelectorAll('.plugins-delete')[0];
    const saveBtn = mwWrapper.querySelectorAll('.plugins-save')[0];
    addBtn.addEventListener('click', () => {
      createDataItem(['', '']);
      saveBtn.classList.remove('btn--disabled');
      saveBtn.classList.add('btn--green');
    });
    closeBtn.addEventListener('click', () => {
      mwWrapper.classList.remove('active');
    });
    saveBtn.addEventListener('click', () => {
      if (!saveBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
        saveBtn.classList.add('btn--disabled');
        saveBtn.classList.remove('btn--green');
      }
    });
    deleteBtn.addEventListener('click', e => {
      if (!e.target.classList.contains('btn--disabled')) {
        let checkedIds = [];
        [...dataArr].map(i => {
          if (i.state.checked) {
            checkedIds.push(i.id);
          }
        });
        checkedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataArr.splice(rowCounter, 1);
            }

            rowCounter++;
          });
        });
        theadCheckbox.checked = false;
        e.target.classList.add('btn--disabled');
        e.target.classList.remove('btn--red');
        rerenderItems();
      }
    }); // Checkboxes

    const initCheckboxes = () => {
      const checkboxes = mwWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow;
          [...dataArr].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow = i.state;
            }
          });
          checkedRow.checked = e.target.checked;
          changedataArrById(id, 'state', checkedRow);
          let checkedIds = [];
          [...dataArr].map(i => {
            if (i.state.checked) {
              checkedIds.push(i.id);
            }
          });

          if (checkedIds.length > 0) {
            deleteBtn.classList.remove('btn--disabled');
            deleteBtn.classList.add('btn--red');
          } else {
            deleteBtn.classList.add('btn--disabled');
            deleteBtn.classList.remove('btn--red');
          }
        });
      }
    };

    theadCheckbox.addEventListener('change', function (e) {
      let data = [...dataArr];

      if (searchInput.value.length) {
        data = getSearchedData(searchInput.value);
        let searchedIds = [...dataArr].map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        data = [...dataArr];
        let searchedIds = data.map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          dataArr.map(i => {
            if (i.id === id) {
              i.state.checked = e.target.checked;
            }
          });
        });
      }

      if (e.target.checked) {
        deleteBtn.classList.add('btn--red');
        deleteBtn.classList.remove('btn--disabled');
      } else {
        deleteBtn.classList.add('btn--disabled');
        deleteBtn.classList.remove('btn--red');
      }

      rerenderItems();
    }); // Flexible wrapper

    const makeFlexibleWidth = () => {
      for (const columnNav of mwWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 8) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 8) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = mwWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const initHeightForRow = (rowId, rowsInside) => {
      if (rowsInside !== 0 || rowsInside !== 1) {
        let row = mwWrapperTable.querySelectorAll('[data-id="' + rowId + '"]');

        for (const rowElem of row) {
          rowElem.style.height = 40 * rowsInside + 'px';
        }
      }
    };

    const getMimeNav = (index, id) => {
      let nav = document.createElement('DIV');
      let plus = document.createElement('DIV');
      let minus = document.createElement('DIV');
      nav.classList.add('mime_nav');
      plus.classList.add('plus');
      minus.classList.add('minus');
      dataArr.map(i => {
        if (i.id === id) {
          if (i.mime.length === 1) {
            minus.classList.add('dissabled');
          }
        }
      });
      plus.innerHTML = '+';
      minus.innerHTML = '-';
      minus.addEventListener('click', e => {
        delMimeTypeById(id, index);
      });
      plus.addEventListener('click', e => {
        createMimeTypeById(id, index + 1);
      });
      nav.appendChild(minus);
      nav.appendChild(plus);
      return nav;
    };

    const setEventsForRow = (wrapper, input, dataRow, colDuplicator) => {
      let activeWrapper = true;

      if (colDuplicator < 4) {
        wrapper.addEventListener('click', e => {
          let isClickedOnNav = e.target.parentNode.classList.value === 'mime_nav';

          if (isClickedOnNav) {} else {
            if (activeWrapper) {
              wrapper.innerHTML = '';
              wrapper.classList.remove('wrapper_withoutinput');
              wrapper.appendChild(input);
              activeWrapper = false;
              input.focus();
            }
          }
        });
        input.addEventListener('blur', e => {
          wrapper.innerHTML = e.target.value;
          wrapper.classList.add('wrapper_withoutinput');
          activeWrapper = true;
          changedataArrById(dataRow.id, Object.keys(dataRow)[colDuplicator], e.target.value);
          saveBtn.classList.remove('btn--disabled');
          saveBtn.classList.add('btn--green');
        });
      }

      if (colDuplicator === 4) {
        let index = 0;

        for (const i of wrapper.children[0].children) {
          let activeWrapper = true;
          let mime = dataRow.mime[index];
          const x = document.createElement('INPUT');
          x.setAttribute('type', 'text');
          x.setAttribute('value', mime.type);
          x.setAttribute('mimeIndex', index);
          i.addEventListener('click', e => {
            let isClickedOnNav = e.target.parentNode.classList.value === 'mime_nav';
            console.log(e.target.classList.value === 'mimetype_wrapper');

            if (activeWrapper && e.target.classList.value === 'mimetype_wrapper') {
              e.target.innerHTML = ''; //i.appendChild(getMimeNav(index, wrapper.getAttribute('data-id')))

              e.target.appendChild(x);
              activeWrapper = false;
              x.focus();
            }
          });
          x.addEventListener('blur', e => {
            console.dir(e.target.parentNode);
            let index = parseInt(x.getAttribute('mimeIndex'));
            dataRow.mime[index].type = e.target.value; //i.appendChild(getMimeNav(index, wrapper.getAttribute('data-id')))

            e.target.parentNode.innerHTML = e.target.value; //e.target.parentNode.appendChild(document.createTextNode(e.target.value))

            activeWrapper = true;
            changedataArrById(dataRow.id, 'mime', dataRow.mime);
            saveBtn.classList.remove('btn--disabled');
            saveBtn.classList.add('btn--green');
          });
          index++;
        }
      }

      if (colDuplicator === 5) {
        let index = 0;

        for (const i of wrapper.children[0].children) {
          let activeWrapper = true;
          let inputClone = input;
          let mime = dataRow.mime[index];
          const x = document.createElement('INPUT');
          x.setAttribute('type', 'text');
          x.setAttribute('value', mime.description);
          x.setAttribute('mimeIndex', index);
          i.addEventListener('click', e => {
            if (activeWrapper) {
              i.innerHTML = '';
              i.appendChild(x);
              activeWrapper = false;
              x.focus();
            }
          });
          x.addEventListener('blur', e => {
            i.innerHTML = '';
            let index = parseInt(x.getAttribute('mimeIndex'));
            dataRow.mime[index].description = e.target.value;
            i.appendChild(document.createTextNode(e.target.value));
            activeWrapper = true;
            changedataArrById(dataRow.id, 'mime', dataRow.mime);
            saveBtn.classList.remove('btn--disabled');
            saveBtn.classList.add('btn--green');
          });
          index++;
        }
      }

      if (colDuplicator === 6) {
        let index = 0;

        for (const i of wrapper.children[0].children) {
          let activeWrapper = true;
          let inputClone = input;
          let mime = dataRow.mime[index];
          const x = document.createElement('INPUT');
          x.setAttribute('type', 'text');
          x.setAttribute('value', mime.suffix);
          x.setAttribute('mimeIndex', index);
          i.addEventListener('click', e => {
            if (activeWrapper) {
              i.innerHTML = '';
              i.appendChild(x);
              activeWrapper = false;
              x.focus();
            }
          });
          x.addEventListener('blur', e => {
            i.innerHTML = '';
            let index = parseInt(x.getAttribute('mimeIndex'));
            dataRow.mime[index].suffix = e.target.value;
            i.appendChild(document.createTextNode(e.target.value));
            activeWrapper = true;
            changedataArrById(dataRow.id, 'mime', dataRow.mime);
            saveBtn.classList.remove('btn--disabled');
            saveBtn.classList.add('btn--green');
          });
          index++;
        }
      }
    }; // RERENDER ============================================


    const rerenderItems = () => {
      let columns = mwWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...dataArr];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (searchInput.value.length !== 0) {
        data = getSearchedData(searchInput.value);
      }

      let i = 0;

      for (const dataRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = dataRow.state.checked ? 'checked' : '';
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div  data-id="' + dataRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else if (colCounter === 8) {
            const divWrapper = document.createElement('DIV');
            const trashIcon = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            trashIcon.classList.add('trashIcon');
            divWrapper.setAttribute('data-id', dataRow.id);
            divWrapper.appendChild(trashIcon);
            trashIcon.addEventListener('click', e => {
              delItemById(dataRow.id);
            });
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
            initHeightForRow(dataRow.id, dataRow.mime.length);
          } else {
            let colData = dataRow[Object.keys(dataRow)[colCounter - 1]];
            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute('data-id', dataRow.id);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter - 1]]);
            let colDuplicator = colCounter - 1;
            divWrapper.classList.add('wrapper_withoutinput');
            let colContent;

            if (searchInput.value.length !== 0) {
              let searchReg = new RegExp(searchInput.value, "igm");
              colContent = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              colContent = colData.toString();
            }

            let mimeData = dataRow[Object.keys(dataRow)[4]];

            if (colCounter === 5) {
              const wrapper = document.createElement('DIV');
              wrapper.classList.add('mime_wrapper');
              x.setAttribute('value', dataRow.mime.type);

              for (let [i, mimeItem] of mimeData.entries()) {
                const mimeWrapper = document.createElement('DIV');
                let text = document.createElement('DIV');
                text.classList.add('mimetype_wrapper');

                if (searchInput.value.length !== 0) {
                  let searchReg = new RegExp(searchInput.value, "igm");
                  let searchValue = mimeItem.type.toString().replace(searchReg, "<span class='marker'>$&</span>");
                  text.insertAdjacentHTML('beforeend', searchValue);
                } else {
                  text.insertAdjacentHTML('beforeend', mimeItem.type);
                }

                text.addEventListener('click', () => {});
                mimeWrapper.appendChild(getMimeNav(i, dataRow.id));
                mimeWrapper.appendChild(text);
                wrapper.appendChild(mimeWrapper);
              }

              divWrapper.setAttribute('data-id', dataRow.id);
              divWrapper.appendChild(wrapper);
            } else if (colCounter === 6) {
              const wrapper = document.createElement('DIV');
              wrapper.classList.add('mime_wrapper');

              for (let mimeItem of mimeData) {
                const mimeWrapper = document.createElement('DIV');
                let colContent = mimeItem.description;

                if (searchInput.value.length !== 0) {
                  let searchReg = new RegExp(searchInput.value, "igm");
                  colContent = mimeItem.description.toString().replace(searchReg, "<span class='marker'>$&</span>");
                }

                mimeWrapper.innerHTML = colContent;
                wrapper.appendChild(mimeWrapper);
              }

              divWrapper.setAttribute('data-id', dataRow.id);
              divWrapper.appendChild(wrapper);
            } else if (colCounter === 7) {
              const wrapper = document.createElement('DIV');
              wrapper.classList.add('mime_wrapper');

              for (let mimeItem of mimeData) {
                const mimeWrapper = document.createElement('DIV');
                let colContent = mimeItem.suffix;

                if (searchInput.value.length !== 0) {
                  let searchReg = new RegExp(searchInput.value, "igm");
                  colContent = mimeItem.suffix.toString().replace(searchReg, "<span class='marker'>$&</span>");
                }

                mimeWrapper.innerHTML = colContent;
                wrapper.appendChild(mimeWrapper);
              }

              divWrapper.setAttribute('data-id', dataRow.id);
              divWrapper.appendChild(wrapper);
            } else {
              divWrapper.innerHTML = colContent;
            }

            setEventsForRow(divWrapper, x, dataRow, colDuplicator);
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
            initHeightForRow(dataRow.id, dataRow.mime.length);
          }

          colCounter++;
        }

        i++;
      }

      let rowsCounter = 0;
      data.map(i => {
        rowsCounter = rowsCounter + i.mime.length;
      });
      mwWrapperTable.style.height = rowsCounter * 40 + 60 + 'px';
      initCheckboxes();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      [...dataArr].map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }

          if (typeof item === 'object') {
            if (Object.prototype.toString.call(item) == '[object Array]') {
              for (const mimeItem of item) {
                if (mimeItem.type.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
                  isSearchTrueForThisElem = true;
                  searchInputData.push(x);
                }

                if (mimeItem.description.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
                  isSearchTrueForThisElem = true;
                  searchInputData.push(x);
                }

                if (mimeItem.suffix.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
                  isSearchTrueForThisElem = true;
                  searchInputData.push(x);
                }
              }
            }
          }
        });
      });
      return [...searchInputData];
    };
  }

});
;

Array.prototype.insert = function (index, item) {
  this.splice(index, 0, item);
};

/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__extended_settings')[0];
    const mwWrapperTable = mwWrapper.querySelectorAll('.main--fonts .flexible_table')[0];
    const searchInput = mwWrapper.querySelectorAll('.main--fonts .search input')[0];
    let dataArr = [{
      'title': 'Avenir',
      'id': 1603709258344,
      'state': {
        'checked': false
      }
    }, {
      'title': 'Avenir Next',
      'id': 1603709258345,
      'state': {
        'checked': false
      }
    }];
    let btnsState = {
      'lastAddedId': 0,
      // initial
      'isWaiting': false
    }; // DataWorkers

    const createDataItem = data => {
      let id = +new Date();
      dataArr.splice(dataArr.length, 0, {
        'title': data[0],
        'id': id,
        'state': {
          'checked': false
        }
      });
      btnsState.lastAddedId = id; // initial

      btnsState.isWaiting = true;
      rerenderItems();
    };

    const changedataArrById = (id, key, value) => {
      dataArr = [...dataArr].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    }; // BUTTONS ============================================


    const closeBtn = mwWrapper.querySelectorAll('.fonts-close')[0];
    const addBtn = mwWrapper.querySelectorAll('.fonts-add')[0];
    const addFromFileBtn = mwWrapper.querySelectorAll('.fonts-addFromFile')[0];
    const deleteBtn = mwWrapper.querySelectorAll('.fonts-delete')[0];
    const saveBtn = mwWrapper.querySelectorAll('.fonts-save')[0];
    addBtn.addEventListener('click', () => {
      createDataItem([' ']);
    });
    closeBtn.addEventListener('click', () => {
      if (!closeBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
      }
    });
    saveBtn.addEventListener('click', () => {
      if (!saveBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
        saveBtn.classList.add('btn--disabled');
        saveBtn.classList.remove('btn--green');
      }
    });
    deleteBtn.addEventListener('click', e => {
      if (!e.target.classList.contains('btn--disabled')) {
        let checkedIds = [];
        [...dataArr].map(i => {
          if (i.state.checked) {
            checkedIds.push(i.id);
          }
        });
        checkedIds.map(id => {
          let rowCounter = 0;
          [...dataArr].map(dataRow => {
            if (dataRow.id === id) {
              dataArr.splice(rowCounter, 1);
            }

            rowCounter++;
          });
        });
        deleteBtn.classList.add('btn--disabled');
        deleteBtn.classList.remove('btn--red');
        rerenderItems();
      }
    }); // Checkboxes

    const initCheckboxes = () => {
      const checkboxes = mwWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow;
          [...dataArr].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow = i.state;
            }
          });
          checkedRow.checked = e.target.checked;
          changedataArrById(id, 'state', checkedRow);
          let checkedIds = [];
          [...dataArr].map(i => {
            if (i.state.checked) {
              checkedIds.push(i.id);
            }
          });

          if (checkedIds.length > 0) {
            deleteBtn.classList.remove('btn--disabled');
            deleteBtn.classList.add('btn--red');
          } else {
            deleteBtn.classList.add('btn--disabled');
            deleteBtn.classList.remove('btn--red');
          }
        });
      }
    };

    addFromFileBtn.addEventListener('click', e => {
      const importPopup = document.querySelectorAll('.mw__fonts_import')[0];
      importPopup.classList.add('active');
    }); // Flexible wrapper

    const makeFlexibleWidth = () => {
      for (const columnNav of mwWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 1) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 1) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = mwWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const getCheckbox = dataRow => {
      const label = document.createElement('LABEL');
      label.classList.add('checkbox-container');
      let checked = dataRow.state.checked ? 'checked' : '';
      const checkbox = document.createElement('INPUT');
      checkbox.setAttribute('type', 'checkbox');

      if (checked === 'checked') {
        checkbox.setAttribute('checked', checked);
      }

      const checkmark = document.createElement('LABEL');
      checkmark.classList.add('checkmark');
      label.appendChild(checkbox);
      label.appendChild(checkmark);
      return label;
    }; // RERENDER ============================================


    const rerenderItems = () => {
      let columns = mwWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...dataArr];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (searchInput.value.length !== 0) {
        data = getSearchedData(searchInput.value);
      }

      let i = 0;

      for (const dataRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          let colData = dataRow[Object.keys(dataRow)[colCounter]];
          const divWrapper = document.createElement('DIV');
          const rowContent = document.createElement('DIV');
          rowContent.classList.add('font-wrapper');
          divWrapper.classList.add('flexible_wrapper');
          divWrapper.setAttribute('data-id', dataRow.id);
          const x = document.createElement('INPUT');
          x.setAttribute('type', 'text');
          x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter]]);
          x.addEventListener('blur', e => {
            changedataArrById(dataRow.id, Object.keys(dataRow)[colDuplicator], e.target.value);
            saveBtn.classList.remove('btn--disabled');
            saveBtn.classList.add('btn--green');
            divWrapper.innerHTML = '';
            divWrapper.appendChild(getCheckbox(dataRow));
            divWrapper.appendChild(rowContent);
            rowContent.innerHTML = e.target.value;
          });
          rowContent.addEventListener('click', e => {
            divWrapper.innerHTML = '';
            divWrapper.appendChild(getCheckbox(dataRow));
            divWrapper.appendChild(x);
          });
          let colDuplicator = colCounter;
          let activeWrapper = true;

          if (searchInput.value.length !== 0) {
            let text = searchInput.value;
            let searchReg = new RegExp(text, "igm");
            colData = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
          } else {
            colData = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
          }

          rowContent.innerHTML = colData;
          divWrapper.appendChild(getCheckbox(dataRow));
          divWrapper.appendChild(rowContent);

          if (btnsState.lastAddedId === dataRow.id && btnsState.isWaiting) {
            divWrapper.innerHTML = '';
            divWrapper.appendChild(getCheckbox(dataRow));
            divWrapper.appendChild(x);
          }

          mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);

          if (btnsState.lastAddedId === dataRow.id && btnsState.isWaiting) {
            mwWrapperTable.querySelectorAll('.column_body')[colCounter].querySelectorAll('input[type="text"]')[0].focus();
            btnsState.isWaiting = false;
          }

          colCounter++;
        }

        i++;
      }

      mwWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      rerenderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      [...dataArr].map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }
        });
      });
      return [...searchInputData];
    };

    let filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
    const holder = document.getElementById('fontsHolder');
    const resultWrapper = document.getElementsByClassName('fontsResult')[0];
    const inputElement = document.getElementById('fontsFileInput');
    const importFilesBtn = document.querySelectorAll('.fonts_import_files')[0];
    const importClosesBtn = document.querySelectorAll('.fonts_import_close')[0];

    holder.ondragover = function () {
      this.className = 'hover';
      return false;
    };

    holder.ondragend = function () {
      this.className = '';
      return false;
    };

    holder.ondrop = function (e) {
      this.className = '';
      e.preventDefault();
      resultWrapper.innerHTML = '';

      for (let i = 0, len = e.dataTransfer.files.length; i < len; i++) filesStore.items.add(e.dataTransfer.files[i]);

      for (let i = 0, len = filesStore.files.length; i < len; i++) {
        let elem = document.createElement('div');
        let close = document.createElement('div');
        elem.classList.add('filewrapper');
        close.classList.add('close');
        close.addEventListener('click', () => {
          filesStore.items.remove(i);
          elem.remove();
          inputElement.files = filesStore.files;
        });
        elem.innerHTML = filesStore.files[i].name;
        elem.appendChild(close);
        resultWrapper.appendChild(elem);
      }

      inputElement.files = filesStore.files;
    };

    const handleImport = e => {
      if (importFilesBtn.classList.contains('btn--green')) {
        for (let i = 0; i < filesStore.files.length; i++) {
          (function (file) {
            createDataItem([file.name]);
          })(filesStore.files[i]);
        }

        filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
        resultWrapper.innerHTML = '';
        importFilesBtn.classList.remove('btn--green');
        importFilesBtn.classList.add('btn--disabled');
        handleClose();
      }
    };

    const handleFiles = e => {
      const fileList = e.target.files;
      e.preventDefault();
      resultWrapper.innerHTML = '';

      for (let i = 0, len = fileList.length; i < len; i++) filesStore.items.add(fileList[i]);

      for (let i = 0, len = filesStore.files.length; i < len; i++) {
        let elem = document.createElement('div');
        let close = document.createElement('div');
        elem.classList.add('filewrapper');
        close.classList.add('close');
        close.addEventListener('click', () => {
          filesStore.items.remove(i);
          elem.remove();
          inputElement.files = filesStore.files;

          if (filesStore.files.length !== 0) {
            importFilesBtn.classList.add('btn--green');
            importFilesBtn.classList.remove('btn--disabled');
          } else {
            importFilesBtn.classList.remove('btn--green');
            importFilesBtn.classList.add('btn--disabled');
          }
        });
        console.log(filesStore.files[i]);
        elem.innerHTML = filesStore.files[i].name;
        elem.appendChild(close);
        resultWrapper.appendChild(elem);
      }

      inputElement.files = filesStore.files;

      if (filesStore.files.length !== 0) {
        importFilesBtn.classList.add('btn--green');
        importFilesBtn.classList.remove('btn--disabled');
      } else {
        importFilesBtn.classList.remove('btn--green');
        importFilesBtn.classList.add('btn--disabled');
      }
    };

    const handleClose = () => {
      const importPopup = document.querySelectorAll('.mw__fonts_import')[0];
      importPopup.classList.remove('active');
      saveBtn.classList.remove('btn--disabled');
      saveBtn.classList.add('btn--green');
    };

    inputElement.addEventListener('change', handleFiles);
    importFilesBtn.addEventListener('click', handleImport);
    importClosesBtn.addEventListener('click', handleClose);
  }

});
;

/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__extended_settings')[0];
    const mwWrapperTable = mwWrapper.querySelectorAll('.main--webgl .flexible_table')[0];
    const searchInput = mwWrapper.querySelectorAll('.main--webgl .search input')[0];
    let dataArr = [{
      'option': 'Supported Context Name',
      'value': 'webgl, weblg, experimental-webgl',
      'editable': true,
      'id': 1603709258344
    }, {
      'option': 'Unmasked Renderer',
      'value': {
        'current': 'ANGLE(Intel(R) HD Graphics 520 Direct3D11 vs_5_0 ps_5_0)',
        'values': ['ANGLE(Intel(R) HD Graphics 520 Direct3D11 vs_5_0 ps_5_0)', 'ANGLE(Intel(R) HD Graphics 520 Direct3D11 vs_5_0 ps_4_0)', 'ANGLE(Intel(R) HD Graphics 520 Direct3D11 vs_4_0 ps_3_0)']
      },
      'editable': true,
      'id': 1603709258345
    }, {
      'option': 'Max Vertex Output Components',
      'value': '128',
      'editable': false,
      'id': 1603709258346
    }, {
      'option': 'Max Vertex Uniform Components',
      'value': {
        'current': '4096',
        'values': ['4096']
      },
      'editable': false,
      'id': 1603709258347
    }];

    const changedataArrById = (id, key, value) => {
      dataArr = [...dataArr].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    }; // BUTTONS ============================================


    const closeBtn = mwWrapper.querySelectorAll('.webgl-close')[0];
    const saveBtn = mwWrapper.querySelectorAll('.webgl-save')[0];
    closeBtn.addEventListener('click', () => {
      mwWrapper.classList.remove('active');
    });
    saveBtn.addEventListener('click', () => {
      if (!saveBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
        saveBtn.classList.add('btn--disabled');
        saveBtn.classList.remove('btn--green');
      }
    }); // init Selects

    const initEventsForSelects = () => {
      const selects = mwWrapperTable.querySelectorAll('.select');

      for (const select of selects) {
        select.addEventListener('click', function (e) {
          if (!select.classList.contains('active')) {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }
          } else {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }

            if (!e.target.classList.contains('.input-option')) {
              select.classList.add('active');
              select.querySelectorAll('ul')[0].style.display = 'block';
            }
          }
        });
      }

      const selectOptions = mwWrapperTable.querySelectorAll('li.input-option');

      for (const option of selectOptions) {
        option.addEventListener('click', function () {
          if (!option.closest('.select').classList.contains('disabled')) {
            let livalue = option.getAttribute('data-value');
            let lihtml = option.innerHTML;
            option.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
            option.closest('.select').querySelectorAll('.option').value = livalue;
            let id = parseInt(option.parentNode.parentNode.parentNode.parentNode.getAttribute('data-id'));
            let dataArrItem = [...dataArr].filter(i => i.id === parseInt(id));
            let valueObj = {
              'current': livalue,
              'values': dataArrItem[0].value.values,
              'editable': dataArrItem[0].editable
            };
            changedataArrById(id, 'value', valueObj);
          }
        });
      }

      document.addEventListener('click', e => {
        if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
          for (const select of selects) {
            select.querySelectorAll('ul')[0].style.display = 'none';
            select.classList.remove('active');
          }
        }
      });
    }; // Flexible wrapper


    const makeFlexibleWidth = () => {
      for (const columnNav of mwWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 2) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 2) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = mwWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    }; // RERENDER ============================================


    const rerenderItems = () => {
      let columns = mwWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...dataArr];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (searchInput.value.length !== 0) {
        data = getSearchedData(searchInput.value);
      }

      let i = 0;

      for (const dataRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let colData = dataRow[Object.keys(dataRow)[colCounter]].toString();

            if (searchInput.value.length !== 0) {
              let text = searchInput.value;
              let searchReg = new RegExp(text, "igm");
              colData = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              colData = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
            }

            mwWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div  data-id="' + dataRow.id + '">' + colData + '</div>');
          } else {
            let colData = dataRow[Object.keys(dataRow)[colCounter]];
            let isSelect = typeof dataRow[Object.keys(dataRow)[colCounter]] === 'object' ? true : false;

            if (isSelect) {
              const divWrapper = document.createElement('DIV');
              const select = document.createElement('DIV');
              const dropdown = document.createElement('DIV');
              const textfirst = document.createElement('DIV');
              const list = document.createElement('UL');
              divWrapper.classList.add('flexible_wrapper');
              divWrapper.setAttribute('data-id', dataRow.id);
              select.classList.add('select');

              if (!dataRow.editable) {
                select.classList.add('disabled');
              }

              dropdown.classList.add('mm-dropdown');
              textfirst.classList.add('textfirst');
              let tfContent = dataRow[Object.keys(dataRow)[colCounter]].current;

              if (searchInput.value !== 0) {
                tfContent = tfContent.replace(new RegExp(searchInput.value, 'i'), "<span class='marker'>" + searchInput.value + '</span>');
              }

              textfirst.innerHTML = tfContent;
              const x = document.createElement('INPUT');
              x.setAttribute('type', 'hidden');
              x.classList.add('option');
              x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter]].current);

              for (const option of dataRow[Object.keys(dataRow)[colCounter]].values) {
                const li = document.createElement('LI');
                li.setAttribute('data-value', option);
                li.classList.add('input-option');
                li.innerHTML = option.replace(new RegExp(searchInput.value, 'i'), "<span class='marker'>" + searchInput.value + '</span>');
                list.appendChild(li);
              }

              dropdown.appendChild(textfirst);
              dropdown.appendChild(list);
              dropdown.appendChild(x);
              select.appendChild(dropdown);
              divWrapper.appendChild(select);
              mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
            } else {
              if (searchInput.value !== 0) {
                colData = colData.replace(new RegExp(searchInput.value, 'i'), "<span class='marker'>" + searchInput.value + '</span>');
              }

              const divWrapper = document.createElement('DIV');
              divWrapper.classList.add('flexible_wrapper');
              divWrapper.setAttribute('data-id', dataRow.id);

              if (dataRow.editable) {
                const x = document.createElement('INPUT');
                x.setAttribute('type', 'text');
                x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter]]);
                let colDuplicator = colCounter - 1;
                let activeWrapper = true;
                divWrapper.addEventListener('click', e => {
                  if (activeWrapper) {
                    divWrapper.innerHTML = '';
                    divWrapper.classList.remove('wrapper_withoutinput');
                    divWrapper.appendChild(x);
                    activeWrapper = false;
                    x.focus();
                  }
                });
                x.addEventListener('blur', e => {
                  divWrapper.innerHTML = e.target.value;
                  divWrapper.classList.add('wrapper_withoutinput');
                  activeWrapper = true;
                  changedataArrById(dataRow.id, Object.keys(dataRow)[colDuplicator], e.target.value);
                  saveBtn.classList.remove('btn--disabled');
                  saveBtn.classList.add('btn--green');
                });
              } else {
                divWrapper.classList.add('disabled');
              }

              divWrapper.innerHTML = colData;
              divWrapper.classList.add('wrapper_withoutinput');
              mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
            }
          }

          colCounter++;
        }

        i++;
      }

      mwWrapperTable.style.height = data.length * 40 + 260 + 'px';
      makeFlexibleWidth();
      initRowsEvents();
      initEventsForSelects();
    };

    rerenderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      rerenderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.main--webgl .search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      [...dataArr].map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }

          if (typeof item === 'object') {
            if (item.current.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }

            for (const values of item.values) {
              if (values.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
                isSearchTrueForThisElem = true;
                searchInputData.push(x);
              }
            }
          }
        });
      });
      return [...searchInputData];
    };
  }

});
;

/***/ }),
/* 13 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    const mwWrapper = document.querySelectorAll('.mw__extended_settings')[0];
    const mwWrapperTable = mwWrapper.querySelectorAll('.main--properties .flexible_table')[0];
    const searchInput = mwWrapper.querySelectorAll('.main--properties .search input')[0];
    let dataArr = [{
      'option': 'navigator.vendor',
      'value': 'Google Inc.',
      'editable': true,
      'id': 1603709258344
    }, {
      'option': 'navigator.language',
      'value': 'ru-UA',
      'editable': true,
      'id': 1603709257344
    }, {
      'option': 'navigator.productSub',
      'value': '20030107',
      'editable': true,
      'id': 1603709259344
    }, {
      'option': 'navigator.hardwareConcurrency',
      'value': '2',
      'editable': true,
      'id': 1603709253344
    }, {
      'option': 'navigator.gamepads',
      'value': {
        'current': 'true',
        'values': ['true', 'false']
      },
      'editable': true,
      'id': 1603709258345
    }, {
      'option': 'navigator.deviceMemory',
      'value': {
        'current': '15',
        'values': ['15', '30']
      },
      'editable': true,
      'id': 1603709258335
    }];

    const changedataArrById = (id, key, value) => {
      dataArr = [...dataArr].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    }; // BUTTONS ============================================


    const closeBtn = mwWrapper.querySelectorAll('.properties-close')[0];
    const saveBtn = mwWrapper.querySelectorAll('.properties-save')[0];
    closeBtn.addEventListener('click', () => {
      mwWrapper.classList.remove('active');
    });
    saveBtn.addEventListener('click', () => {
      if (!saveBtn.classList.contains('btn--disabled')) {
        mwWrapper.classList.remove('active');
        saveBtn.classList.add('btn--disabled');
        saveBtn.classList.remove('btn--green');
      }
    }); // init Selects

    const initEventsForSelects = () => {
      const selects = mwWrapperTable.querySelectorAll('.select');

      for (const select of selects) {
        select.addEventListener('click', function (e) {
          if (!select.classList.contains('active')) {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }
          } else {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }

            if (!e.target.classList.contains('.input-option')) {
              select.classList.add('active');
              select.querySelectorAll('ul')[0].style.display = 'block';
            }
          }
        });
      }

      const selectOptions = mwWrapperTable.querySelectorAll('li.input-option');

      for (const option of selectOptions) {
        option.addEventListener('click', function () {
          if (!option.closest('.select').classList.contains('disabled')) {
            let livalue = option.getAttribute('data-value');
            let lihtml = option.innerHTML;
            option.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
            option.closest('.select').querySelectorAll('.option').value = livalue;
            let id = parseInt(option.parentNode.parentNode.parentNode.parentNode.getAttribute('data-id'));
            let dataArrItem = [...dataArr].filter(i => i.id === parseInt(id));
            let valueObj = {
              'current': livalue,
              'values': dataArrItem[0].value.values,
              'editable': dataArrItem[0].editable
            };
            changedataArrById(id, 'value', valueObj);
          }
        });
      }

      document.addEventListener('click', e => {
        if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
          for (const select of selects) {
            select.querySelectorAll('ul')[0].style.display = 'none';
            select.classList.remove('active');
          }
        }
      });
    }; // Flexible wrapper


    const makeFlexibleWidth = () => {
      for (const columnNav of mwWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 2) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 2) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = mwWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = mwWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    }; // RERENDER ============================================


    const rerenderItems = () => {
      let columns = mwWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...dataArr];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (searchInput.value.length !== 0) {
        data = getSearchedData(searchInput.value);
      }

      let i = 0;

      for (const dataRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let colData = dataRow[Object.keys(dataRow)[colCounter]].toString();

            if (searchInput.value.length !== 0) {
              let text = searchInput.value;
              let searchReg = new RegExp(text, "igm");
              colData = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
            } else {
              colData = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
            }

            mwWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div  data-id="' + dataRow.id + '">' + colData + '</div>');
          } else {
            let colData = dataRow[Object.keys(dataRow)[colCounter]];
            let isSelect = typeof dataRow[Object.keys(dataRow)[colCounter]] === 'object' ? true : false;

            if (isSelect) {
              const divWrapper = document.createElement('DIV');
              const select = document.createElement('DIV');
              const dropdown = document.createElement('DIV');
              const textfirst = document.createElement('DIV');
              const list = document.createElement('UL');
              divWrapper.classList.add('flexible_wrapper');
              divWrapper.setAttribute('data-id', dataRow.id);
              select.classList.add('select');

              if (!dataRow.editable) {
                select.classList.add('disabled');
              }

              dropdown.classList.add('mm-dropdown');
              textfirst.classList.add('textfirst');
              let tfContent = dataRow[Object.keys(dataRow)[colCounter]].current;

              if (searchInput.value !== 0) {
                tfContent = tfContent.replace(new RegExp(searchInput.value, 'i'), "<span class='marker'>" + searchInput.value + '</span>');
              }

              textfirst.innerHTML = tfContent;
              const x = document.createElement('INPUT');
              x.setAttribute('type', 'hidden');
              x.classList.add('option');
              x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter]].current);

              for (const option of dataRow[Object.keys(dataRow)[colCounter]].values) {
                const li = document.createElement('LI');
                li.setAttribute('data-value', option);
                li.classList.add('input-option');
                li.innerHTML = option.replace(new RegExp(searchInput.value, 'i'), "<span class='marker'>" + searchInput.value + '</span>');
                list.appendChild(li);
              }

              dropdown.appendChild(textfirst);
              dropdown.appendChild(list);
              dropdown.appendChild(x);
              select.appendChild(dropdown);
              divWrapper.appendChild(select);
              mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
            } else {
              const divWrapper = document.createElement('DIV');
              divWrapper.classList.add('flexible_wrapper');
              divWrapper.setAttribute('data-id', dataRow.id);

              if (dataRow.editable) {
                const x = document.createElement('INPUT');
                x.setAttribute('type', 'text');
                x.setAttribute('value', dataRow[Object.keys(dataRow)[colCounter]]);
                let colDuplicator = colCounter - 1;
                let activeWrapper = true;
                divWrapper.addEventListener('click', e => {
                  if (activeWrapper) {
                    divWrapper.innerHTML = '';
                    divWrapper.classList.remove('wrapper_withoutinput');
                    divWrapper.appendChild(x);
                    activeWrapper = false;
                    x.focus();
                  }
                });
                x.addEventListener('blur', e => {
                  divWrapper.innerHTML = e.target.value;
                  divWrapper.classList.add('wrapper_withoutinput');
                  activeWrapper = true;
                  changedataArrById(dataRow.id, Object.keys(dataRow)[colDuplicator], e.target.value);
                  saveBtn.classList.remove('btn--disabled');
                  saveBtn.classList.add('btn--green');
                });
              } else {
                divWrapper.classList.add('disabled');
              }

              if (searchInput.value.length !== 0) {
                let text = searchInput.value;
                let searchReg = new RegExp(text, "igm");
                divWrapper.innerHTML = colData.toString().replace(searchReg, "<span class='marker'>$&</span>");
              } else {
                divWrapper.innerHTML = colData.toString().replace(/(<span class='marker'>|<\/span>)/igm, "");
              }

              divWrapper.classList.add('wrapper_withoutinput');
              mwWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
            }
          }

          colCounter++;
        }

        i++;
      }

      mwWrapperTable.style.height = data.length * 40 + 260 + 'px';
      makeFlexibleWidth();
      initRowsEvents();
      initEventsForSelects();
    };

    rerenderItems(); // SEARCH ======================================

    searchInput.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        mwWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      rerenderItems();
    });
    mwWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      searchInput.value = '';
      mwWrapper.querySelectorAll('.main--properties .search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderItems();
    });

    const getSearchedData = value => {
      let vals;
      let searchInputData = [];
      [...dataArr].map(x => {
        let isSearchTrueForThisElem = false;
        vals = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }
          }

          if (typeof item === 'object') {
            if (item.current.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
              isSearchTrueForThisElem = true;
              searchInputData.push(x);
            }

            for (const values of item.values) {
              if (values.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem && typeof item !== 'boolean') {
                isSearchTrueForThisElem = true;
                searchInputData.push(x);
              }
            }
          }
        });
      });
      return [...searchInputData];
    };
  }

});
;

/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _privateSessionsSingleDataViewComponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/* harmony import */ var _dist_sortArrayByField_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var _dist_delArrayItemByFieldAndValue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor() {
    this.init();
  }

  init() {
    this.initDefaultData();
    this.initPrivateSessions();
  }

  initDefaultData() {
    // default data
    this._STORE_privateSessions = [{
      name: 'Hello Name',
      config: {
        os: 'windows',
        browser: 'chrome'
      },
      proxy: {
        flag: 'united-kingdom',
        ip: '142.222.147.987'
      },
      created: 1611736652436,
      lastUsed: 1611736659999,
      comments: 'Lorem ipsum dolor sit amet'
    }, {
      name: 'Hello Name2',
      config: {
        os: 'linux',
        browser: 'opera'
      },
      proxy: {
        flag: 'ukraine',
        ip: '14.2.1.1'
      },
      created: 1611739952437,
      lastUsed: 1611739959999,
      comments: 'Lorem ipsum dolor sit amet'
    }, {
      name: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit ',
      config: {
        os: 'macos',
        browser: 'safari'
      },
      proxy: {
        flag: 'united-states',
        ip: '14.2.1.1'
      },
      created: 1611739952439,
      lastUsed: 1611739959999,
      comments: 'Lorem ipsum dolor sit amet'
    }, {
      name: 'Hello Name752',
      config: {
        os: 'android',
        browser: 'ie'
      },
      proxy: {
        flag: 'andorra',
        ip: '14.2.1.1'
      },
      created: 1699939952438,
      lastUsed: 1699939959999,
      comments: 'Lorem ipsum dolor sit amet'
    }];
    this._STORE_syncSessions = [{
      name: 'Hello Name',
      nameIcons: ['windows', 'chrome', 'usa'],
      status: 'Free',
      group: 'name',
      creator: 'Rivaldo',
      lastUser: 'Zidane',
      comments: 'Lorem ipsum dolor sit amet'
    }];
    this._STORE_sessionArchive = [{
      name: 'Hello Name',
      config: {
        os: 'windows',
        browser: 'chrome'
      },
      proxy: {
        flag: 'usa',
        ip: '142.222.147.987'
      },
      created: 1611722437994,
      lastUsed: 1611722438994,
      lastUsed: 1611722439994,
      comments: 'Lorem ipsum dolor sit amet'
    }];
    let mw = document.querySelectorAll('.mw__session_manager')[0];
    this._VIEW_privateSessions = {
      table: mw.querySelectorAll('.static_table .tbody')[0],
      mainCheckbox: mw.querySelectorAll('.thead input[type=checkbox]')[0],
      search: mw.querySelectorAll('.search input')[0],
      sortBtn: mw.querySelectorAll('.thead .triangle')[0],
      footer: {
        delete: mw.querySelectorAll('footer .js--delete')[0],
        archive: mw.querySelectorAll('footer .js--archive')[0]
      }
    };
    this._STATE_privateSessions = {
      sortByName: {
        isActive: false,
        isReverse: false
      },
      checkedIDs: [],
      searchedIDs: []
    };
  }

  initPrivateSessions() {
    const rootProps = {
      store: this._STORE_privateSessions,
      state: this._STATE_privateSessions,
      view: this._VIEW_privateSessions
    };
    this.renderData(rootProps);
    this.initSearch(rootProps);
    this.initSort(rootProps);
    this.initRootCheckbox(rootProps);
    this.initFooterButtons(rootProps);
  }

  getRowHandlers(tableName, id) {
    // timestamp -- uniq ID
    const checkboxHandler = checkboxVal => {
      if (checkboxVal) {
        this._STATE_privateSessions.checkedIDs.push(id);
      } else {
        const index = this._STATE_privateSessions.checkedIDs.indexOf(id);

        if (index > -1) {
          this._STATE_privateSessions.checkedIDs.splice(index, 1);
        }
      }
    };

    const delHandler = () => {
      this._STORE_privateSessions = (0,_dist_delArrayItemByFieldAndValue_js__WEBPACK_IMPORTED_MODULE_2__.default)(this._STORE_privateSessions, 'created', id);
      this.renderData(this._STORE_privateSessions, this._VIEW_privateSessions.table);
    };

    const editHandler = () => {
      console.log('edit');
    };

    return {
      checkbox: checkboxHandler,
      del: delHandler,
      edit: editHandler
    };
  }

  renderData(props) {
    props.view.table.innerHTML = '';
    this.getData(props).map(item => {
      let isChecked = props.state.checkedIDs.includes(item.created);
      const componentInstance = new _privateSessionsSingleDataViewComponent_js__WEBPACK_IMPORTED_MODULE_0__.default(item, this.getRowHandlers('privateSessions', item.created), isChecked);
      const component = componentInstance.getComponent();
      props.view.table.appendChild(component);
    });
  }

  getData(props) {
    let data;

    if (props.view.search.value.length) {
      let vals;
      let searchedData = [];
      props.store.map(x => {
        let isSearchTrueForThisElem = false;
        Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(props.view.search.value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              searchedData.push(x);
            }
          }
        });
      });
      data = searchedData;
      console.log(searchedData);
    } else {
      data = props.store;
    }

    return this.sortData(data, props.state.sortByName);
  }

  initRootCheckbox(props) {
    props.view.mainCheckbox.addEventListener('click', e => {
      this.getData(props).map(i => {
        if (e.target.checked) {
          if (!props.state.checkedIDs.includes(i.created)) {
            props.state.checkedIDs.push(i.created);
          }
        } else {
          const index = props.state.checkedIDs.indexOf(i.created);

          if (index > -1) {
            props.state.checkedIDs.splice(index, 1);
          }
        }
      });
      this.renderData(props);
    });

    props.view.mainCheckbox.reset = e => {
      props.view.mainCheckbox.checked = false;
    };
  }

  resetRootCheckbox(props) {
    props.view.mainCheckbox.reset();
  }

  initSearch(props) {
    props.view.search.addEventListener('keyup', e => {
      this.renderData(props);
      this.resetRootCheckbox(props);
    }); // proxyWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', ()=> {
    //   proxySearch.value = '';
    //   proxyWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active')
    //   rerenderProxyItems()
    // })
  }

  initSort(props) {
    let sortState = props.state.sortByName;
    props.view.sortBtn.addEventListener('click', e => {
      this.renderData(props);

      if (!sortState.isActive && !sortState.isReverse) {
        sortState.isActive = true;
        e.target.classList.add('active');
        e.target.classList.add('down');
        let sortedData = (0,_dist_sortArrayByField_js__WEBPACK_IMPORTED_MODULE_1__.default)(props.store, 'name', sortState.isReverse);
        this.renderData(props);
        return;
      }

      if (sortState.isActive && !sortState.isReverse) {
        sortState.isReverse = true;
        e.target.classList.remove('down');
        let sortedData = (0,_dist_sortArrayByField_js__WEBPACK_IMPORTED_MODULE_1__.default)(props.store, 'name', sortState.isReverse);
        this.renderData(props);
        return;
      }

      if (sortState.isActive && sortState.isReverse) {
        sortState.isReverse = false;
        sortState.isActive = false;
        e.target.classList.remove('active');
        this.renderData(props);
        return;
      }
    });
  }

  sortData(data, sortState) {
    if (!sortState.isActive && !sortState.isReverse) {
      return data;
    }

    if (sortState.isActive && !sortState.isReverse) {
      return (0,_dist_sortArrayByField_js__WEBPACK_IMPORTED_MODULE_1__.default)(data, 'name', sortState.isReverse);
    }

    if (sortState.isActive && sortState.isReverse) {
      return (0,_dist_sortArrayByField_js__WEBPACK_IMPORTED_MODULE_1__.default)(data, 'name', sortState.isReverse);
    }
  }

  initFooterButtons(props) {
    props.view.footer.delete.addEventListener('click', () => {
      props.state.checkedIDs.map(item => {
        props.store = (0,_dist_delArrayItemByFieldAndValue_js__WEBPACK_IMPORTED_MODULE_2__.default)(props.store, 'created', item);
      });
      props.state.checkedIDs = [];
      this.renderData(props);
    });
  }

});
;

/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _dist_dateProvider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _dist_iconProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
/* harmony import */ var _viewComponents_checkbox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor(dataString, handlers, isChecked) {
    this.dataString = dataString;
    this.handlers = handlers;
    this.isChecked = isChecked;
  }

  createComponent() {
    let wrapper = document.createElement('div');
    let checkBoxCallback = this.handlers.checkbox;
    let checkbox = new _viewComponents_checkbox_js__WEBPACK_IMPORTED_MODULE_2__.default(checkBoxCallback, this.isChecked).getCheckbox();
    let checkboxWrapper = document.createElement('div');
    let trimmedWrapper = document.createElement('div');
    trimmedWrapper.classList.add('trimmed');
    checkboxWrapper.appendChild(checkbox);
    trimmedWrapper.appendChild(document.createTextNode(this.dataString.name));
    checkboxWrapper.appendChild(trimmedWrapper);
    let configWrapper = document.createElement('div');
    configWrapper.appendChild(new _dist_iconProvider_js__WEBPACK_IMPORTED_MODULE_1__.default(this.dataString.config.os).getIcon());
    configWrapper.appendChild(new _dist_iconProvider_js__WEBPACK_IMPORTED_MODULE_1__.default(this.dataString.config.browser).getIcon());
    let proxyWrapper = document.createElement('div');
    proxyWrapper.appendChild(new _dist_iconProvider_js__WEBPACK_IMPORTED_MODULE_1__.default(this.dataString.proxy.flag).getIcon());
    proxyWrapper.appendChild(document.createTextNode(this.dataString.proxy.ip));
    let dateCreatedWrapper = document.createElement('div');
    let dateCreated = document.createTextNode(new _dist_dateProvider_js__WEBPACK_IMPORTED_MODULE_0__.default(this.dataString.created).getFullTime());
    dateCreatedWrapper.appendChild(dateCreated);
    let lastUsedWrapper = document.createElement('div');
    let lastUsed = document.createTextNode(new _dist_dateProvider_js__WEBPACK_IMPORTED_MODULE_0__.default(this.dataString.lastUsed).getFullTime());
    lastUsedWrapper.appendChild(lastUsed);
    let commentWrapper = document.createElement('div');
    let trimmedСommentWrapper = document.createElement('div');
    trimmedСommentWrapper.classList.add('trimmed');
    trimmedСommentWrapper.appendChild(document.createTextNode(this.dataString.comments));
    commentWrapper.appendChild(trimmedСommentWrapper);
    let navbarWrapper = document.createElement('div');
    let delWrapper = document.createElement('div');
    let editWrapper = document.createElement('div');
    delWrapper.addEventListener('click', () => {
      this.handlers.del();
    });
    editWrapper.addEventListener('click', () => {
      this.handlers.edit();
    });
    checkbox.addEventListener('change', e => {
      this.handlers.checkbox(e.target.checked);
    });
    delWrapper.appendChild(new _dist_iconProvider_js__WEBPACK_IMPORTED_MODULE_1__.default('trash').getIcon());
    editWrapper.appendChild(new _dist_iconProvider_js__WEBPACK_IMPORTED_MODULE_1__.default('edit').getIcon());
    navbarWrapper.appendChild(delWrapper);
    navbarWrapper.appendChild(editWrapper);
    navbarWrapper.classList.add('row-actions');
    commentWrapper.appendChild(navbarWrapper);
    wrapper.appendChild(checkboxWrapper);
    wrapper.appendChild(configWrapper);
    wrapper.appendChild(proxyWrapper);
    wrapper.appendChild(dateCreatedWrapper);
    wrapper.appendChild(lastUsedWrapper);
    wrapper.appendChild(commentWrapper);
    return wrapper;
  }

  getComponent() {
    return this.createComponent();
  }

});
;

/***/ }),
/* 16 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor(timestamp) {
    this.timestamp = timestamp;
    this.date = new Date(this.timestamp);
  }

  prepear(numb) {
    if (parseInt(numb) < 10) {
      return '0' + numb.toString();
    }

    return numb;
  }

  getFullTime() {
    return this.date.getFullYear() + '.' + this.prepear(this.date.getMonth() + 1) + '.' + this.prepear(this.date.getDate()) + ' ' + this.prepear(this.date.getHours()) + ':' + this.prepear(this.date.getMinutes()) + ':' + this.prepear(this.date.getSeconds());
  }

});

/***/ }),
/* 17 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor(icon) {
    this.icon = icon;
  }

  getIconUrl() {
    return './icons/' + this.icon + '.svg';
  }

  getIcon() {
    let img = document.createElement('img');
    img.src = this.getIconUrl();
    return img;
  }

});

/***/ }),
/* 18 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor(callback, isChecked) {
    this.callback = callback;
    this.isChecked = isChecked;
  }

  createCheckbox() {
    let label = document.createElement('label');
    label.classList.add('checkbox-container');
    let input = document.createElement('input');
    input.setAttribute('type', 'checkbox');
    input.checked = this.isChecked;
    let span = document.createElement('span');
    span.classList.add('checkmark');
    label.appendChild(input);
    label.appendChild(span); //  label.addEventListener('click', this.callback)

    return label;
  }

  getCheckbox() {
    return this.createCheckbox();
  }

});

/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ sortArrayByField
/* harmony export */ });
function sortArrayByField(array, field, isReverse) {
  const byField = fieldName => {
    if (!isReverse) {
      return (a, b) => a[fieldName] > b[fieldName] ? 1 : -1;
    } else {
      return (a, b) => a[fieldName] < b[fieldName] ? 1 : -1;
    }
  };

  return array.map(i => i).sort(byField(field));
}

/***/ }),
/* 20 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ delArrayItemByFieldAndValue
/* harmony export */ });
function delArrayItemByFieldAndValue(array, fieldName, value) {
  return array.filter(i => i[fieldName] !== value);
}

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__(0);
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=mw-session-setup.min.js.map