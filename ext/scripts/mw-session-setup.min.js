/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_proxyWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _modules_useragentWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _modules_tableWorker_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);





new _modules_proxyWorker_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
new _modules_useragentWorker_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
new _modules_tableWorker_js__WEBPACK_IMPORTED_MODULE_2__["default"]();

const setEventsForSelects = () => {
  const selects = document.querySelectorAll('.select');

  for (const select of selects) {
    select.addEventListener('click', function (e) {
      if (this.classList.contains('active')) {
        for (const select of selects) {
          select.querySelectorAll('ul')[0].style.display = 'none';
          select.classList.remove('active');
        }
      } else {
        for (const select of selects) {
          select.querySelectorAll('ul')[0].style.display = 'none';
          select.classList.remove('active');
        }

        if (!e.target.classList.contains('.input-option')) {
          this.classList.add('active');
          this.querySelectorAll('ul')[0].style.display = 'block';
        }
      }
    });
  }

  const selectOptions = document.querySelectorAll('li.input-option');

  for (const option of selectOptions) {
    option.addEventListener('click', function () {
      if (!this.closest('.select').classList.contains('disabled')) {
        let livalue = this.getAttribute('data-value');
        let lihtml = this.innerHTML;
        this.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
        this.closest('.select').querySelectorAll('.option').value = livalue;
      }
    });
  }

  document.addEventListener('click', e => {
    if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
      for (const select of selects) {
        select.querySelectorAll('ul')[0].style.display = 'none';
        select.classList.remove('active');
      }
    }
  });
}; // =============================================== plugins worker


let pluginsSearchData = [];
let pluginsData = [{
  'name': 'Yanado - Task Man',
  'description': 'Yanado - Task Man',
  'version': '6.6',
  'filename': 'Yanado - Task Man',
  'mimetype': 'application/x-unknown',
  'mimedescription': 'Mime description',
  'suffixes': 'ksh'
}, {
  'name': 'Yanado - Task Man',
  'description': 'Yanado - Task Man',
  'version': '6.6',
  'filename': 'Yanado - Task Man',
  'mimetype': 'application/x-unknown',
  'mimedescription': 'Mime description',
  'suffixes': 'ksh'
}];
const extendedWrapper = document.querySelectorAll('.mw__extended_settings')[0];
const extendedWrapperTable = document.querySelectorAll('.table--plugins')[0];

const rerenderPluginsItems = data => {
  let columns = extendedWrapperTable.querySelectorAll('.column');
  let x = 0;

  for (const column of columns) {
    column.querySelectorAll('.column_body')[0].innerHTML = '';
    x === 1 ? column.style.left = 57 + 'px' : column.style.left = 115 * x + 'px';
    x++;
  }

  let i = 0;

  for (const row of data) {
    let colCounter = 0;

    for (const column of columns) {
      colCounter === 0 ? extendedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div><label class="checkbox-container"><input type="checkbox" /><span class="checkmark"></span></label></div>') : extendedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div>' + row[Object.keys(row)[colCounter - 1]] + '</div>');
      colCounter++;
    }

    i++;
  }

  extendedWrapperTable.style.height = data.length * 40 + 40 + 'px';
};

window.addEventListener('load', () => {
  rerenderPluginsItems(pluginsData);
});
const pluginsExtendedSearch = document.querySelectorAll('.mw__extended_settings .main--plugins input')[0];
pluginsExtendedSearch.addEventListener('keyup', e => {
  searchPluginsData(e.target.value);
});

const searchPluginsData = value => {
  let vals;
  let searchData = [];
  let dataClone = [...pluginsData].map(x => {
    let isSearchTrueForThisElem = false;
    vals = Object.values(x).some((item, i) => {
      // get data obj
      if (typeof item !== 'object') {
        if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
          isSearchTrueForThisElem = true;
          searchData.push(x);
        }
      }
    });
  });
  rerenderPluginsItems(searchData);
};

const addPluginBtn = document.querySelectorAll('.plugin-add')[0];
const deletePluginBtn = document.querySelectorAll('.plugin-delete')[0];
addPluginBtn.addEventListener('click', () => {
  pluginsData.splice(pluginsData.length, 0, {
    'name': 'New Yanado - Task Man',
    'description': 'New Yanado - Task Man',
    'version': '6.7',
    'filename': 'New Yanado - Task Man',
    'mimetype': 'application/x-unknown',
    'mimedescription': 'Mime description',
    'suffixes': 'ksh'
  });
  rerenderPluginsItems(pluginsData);
});
deletePluginBtn.addEventListener('click', () => {
  let i = 0;
  let checkboxArray = [];

  for (const checkbox of extendedWrapper.querySelectorAll('.table--plugins .column_body input[type=checkbox]')) {
    checkboxArray.push(checkbox.checked);
  }

  let checkboxIndex = 0;
  let checkboxecondIndex = 0;

  for (const checkbox of checkboxArray) {
    if (checkbox) {
      pluginsData.splice(checkboxecondIndex - checkboxIndex, 1);
      checkboxIndex++;
    }

    checkboxecondIndex++;
  }

  rerenderPluginsItems(pluginsData);
}); // ========================================= End
// =============================================== Headers worker

let headersSearchData = [];
let headersData = [{
  'name': 'Name',
  'value': 'Value'
}];
const headersWrapperTable = extendedWrapper.querySelectorAll('.table--headers')[0];

const rerenderHeadersItems = data => {
  let columns = headersWrapperTable.querySelectorAll('.column');
  let x = 0;

  for (const column of columns) {
    column.querySelectorAll('.column_body')[0].innerHTML = '';
    x === 1 ? column.style.left = 57 + 'px' : column.style.left = 115 * x + 'px';
    x++;
  }

  let i = 0;

  for (const row of data) {
    let colCounter = 0;

    for (const column of columns) {
      colCounter === 0 ? headersWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div><label class="checkbox-container"><input type="checkbox" /><span class="checkmark"></span></label></div>') : headersWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div>' + row[Object.keys(row)[colCounter - 1]] + '</div>');
      colCounter++;
    }

    i++;
  }

  headersWrapperTable.style.height = data.length * 40 + 40 + 'px';
};

window.addEventListener('load', () => {
  rerenderHeadersItems(headersData);
});
const headersSearch = document.querySelectorAll('.mw__extended_settings .main--headers input')[0];
headersSearch.addEventListener('keyup', e => {
  searchHeadersData(e.target.value);
});

const searchHeadersData = value => {
  let vals;
  let searchData = [];
  let dataClone = [...headersData].map(x => {
    let isSearchTrueForThisElem = false;
    vals = Object.values(x).some((item, i) => {
      if (typeof item !== 'object') {
        if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
          isSearchTrueForThisElem = true;
          searchData.push(x);
        }
      }
    });
  });
  rerenderHeadersItems(searchData);
};

const addHeadersBtn = extendedWrapper.querySelectorAll('.headers-add')[0];
const deleteHeadersBtn = extendedWrapper.querySelectorAll('.headers-delete')[0];
addHeadersBtn.addEventListener('click', () => {
  headersData.splice(headersData.length, 0, {
    'Http headers': 'New name',
    'Header value': 'New Value'
  });
  rerenderHeadersItems(headersData);
});
deleteHeadersBtn.addEventListener('click', () => {
  let i = 0;
  let checkboxArray = [];

  for (const checkbox of extendedWrapper.querySelectorAll('.table--headers .column_body input[type=checkbox]')) {
    checkboxArray.push(checkbox.checked);
  }

  let checkboxIndex = 0;
  let checkboxecondIndex = 0;

  for (const checkbox of checkboxArray) {
    if (checkbox) {
      headersData.splice(checkboxecondIndex - checkboxIndex, 1);
      checkboxIndex++;
    }

    checkboxecondIndex++;
  }

  rerenderHeadersItems(headersData);
}); // ========================================= End
// =============================================== Blocked worker

let blockedSearchData = [];
let blockedData = [{
  'title': 'Twitter website title',
  'value': 'https://twitter.com/adv/detection'
}];
const blockedWrapperTable = extendedWrapper.querySelectorAll('.table--blocked')[0];

const rerenderBlockedItems = data => {
  let columns = blockedWrapperTable.querySelectorAll('.column');
  let x = 0;

  for (const column of columns) {
    column.querySelectorAll('.column_body')[0].innerHTML = '';
    x === 1 ? column.style.left = 57 + 'px' : column.style.left = 115 * x + 'px';
    x++;
  }

  let i = 0;

  for (const row of data) {
    let colCounter = 0;

    for (const column of columns) {
      colCounter === 0 ? blockedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div><label class="checkbox-container"><input type="checkbox" /><span class="checkmark"></span></label></div>') : blockedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div>' + row[Object.keys(row)[colCounter - 1]] + '</div>');
      colCounter++;
    }

    i++;
  }

  blockedWrapperTable.style.height = data.length * 40 + 40 + 'px';
};

window.addEventListener('load', () => {
  rerenderBlockedItems(blockedData);
});
const blockedSearch = document.querySelectorAll('.mw__extended_settings .main--blocked input')[0];
blockedSearch.addEventListener('keyup', e => {
  searchBlockedData(e.target.value);
});

const searchBlockedData = value => {
  let vals;
  let searchData = [];
  let dataClone = [...blockedData].map(x => {
    let isSearchTrueForThisElem = false;
    vals = Object.values(x).some((item, i) => {
      if (typeof item !== 'object') {
        if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
          isSearchTrueForThisElem = true;
          searchData.push(x);
        }
      }
    });
  });
  rerenderBlockedItems(blockedData);
};

const addBlockedBtn = extendedWrapper.querySelectorAll('.blocked-add')[0];
const deleteBlockedBtn = extendedWrapper.querySelectorAll('.blocked-delete')[0];
addBlockedBtn.addEventListener('click', () => {
  blockedData.splice(blockedData.length, 0, {
    'Website': 'Twitter website title',
    'Banned URL': 'Banned URL'
  });
  rerenderBlockedItems(blockedData);
});
deleteBlockedBtn.addEventListener('click', () => {
  let i = 0;
  let checkboxArray = [];

  for (const checkbox of extendedWrapper.querySelectorAll('.table--blocked .column_body input[type=checkbox]')) {
    checkboxArray.push(checkbox.checked);
  }

  let checkboxIndex = 0;
  let checkboxecondIndex = 0;

  for (const checkbox of checkboxArray) {
    if (checkbox) {
      blockedData.splice(checkboxecondIndex - checkboxIndex, 1);
      checkboxIndex++;
    }

    checkboxecondIndex++;
  }

  rerenderBlockedItems(blockedData);
}); // ========================================= End

const switchers = document.querySelectorAll('.switcher-wrapper');

for (const switcher of switchers) {
  switcher.addEventListener('click', () => {
    const checkbox = switcher.querySelectorAll('input')[0];
    checkbox.checked = !checkbox.checked;
  });
}

const inputsWrapper = document.querySelectorAll('.input-wrapper');

const setInputEventListeners = input => {
  const wrapper = input.closest('div');

  input.onfocus = function () {
    wrapper.classList.add('active');
    wrapper.querySelectorAll('label')[0].classList.add('active');
  };

  input.onblur = function () {
    wrapper.classList.remove('active');

    if (input.value === '') {
      wrapper.querySelectorAll('label')[0].classList.remove('active');
    }
  };

  const label = wrapper.querySelectorAll('label')[0];
  label.addEventListener('click', () => {
    input.focus();
  });
};

for (const inputWrapper of inputsWrapper) {
  inputWrapper.addEventListener('mouseover', function () {
    this.classList.add('hover');
  });
  inputWrapper.addEventListener('mouseout', function () {
    this.classList.remove('hover');
  });
  let textField = inputWrapper.querySelectorAll('input')[0];

  if (!textField) {
    textField = inputWrapper.querySelectorAll('textarea')[0];
  }

  if (!textField.classList.contains('hidden') && !inputWrapper.classList.contains('disabled')) {
    setInputEventListeners(textField);
  }
}

setEventsForSelects();
const sessionColor = document.querySelectorAll('.session-color')[0];
const sessionColorMark = document.querySelectorAll('.session-color-mark')[0];
const sessionColorsWrapper = document.querySelectorAll('.session-colors-wrapper')[0];
const sessionColorOption = document.querySelectorAll('.session-color-option');
const sessionHighlightColorInput = document.querySelectorAll('#session-hightlight-color')[0];
sessionColor.addEventListener('click', e => {
  sessionColorsWrapper.classList.toggle('active');
});
let prevActiveMark;

for (const option of sessionColorOption) {
  option.addEventListener('click', function () {
    let color = this.getAttribute('data-color');
    sessionColorsWrapper.classList.remove('active');
    this.classList.add('active');

    if (prevActiveMark) {
      prevActiveMark.classList.remove('active');
    }

    sessionHighlightColorInput.value = color;

    if (color !== 'none') {
      sessionColor.classList.add('mark-active');
      sessionColorMark.style.backgroundColor = color;
    } else {
      sessionColor.classList.remove('mark-active');
    }

    prevActiveMark = this;
  });
}

const items = document.querySelectorAll('.item');

for (const item of items) {
  let checkbox = item.querySelectorAll('input')[0];
  checkbox.checked ? item.classList.add('active') : item.classList.remove('active');
  checkbox.addEventListener('click', function (e) {
    e.target.checked ? item.classList.add('active') : item.classList.remove('active');
  });
}

const filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
const holder = document.getElementById('holder');
const resultWrapper = document.getElementsByClassName('result')[0];
const inputElement = document.getElementById('fileInput');

holder.ondragover = function () {
  this.className = 'hover';
  return false;
};

holder.ondragend = function () {
  this.className = '';
  return false;
};

holder.ondrop = function (e) {
  this.className = '';
  e.preventDefault();
  resultWrapper.innerHTML = '';

  for (let i = 0, len = e.dataTransfer.files.length; i < len; i++) filesStore.items.add(e.dataTransfer.files[i]);

  for (let i = 0, len = filesStore.files.length; i < len; i++) {
    let elem = document.createElement('div');
    let close = document.createElement('div');
    elem.classList.add('filewrapper');
    close.classList.add('close');
    close.addEventListener('click', () => {
      filesStore.items.remove(i);
      elem.remove();
      inputElement.files = filesStore.files;
    });
    elem.innerHTML = filesStore.files[i].name;
    elem.appendChild(close);
    resultWrapper.appendChild(elem);
  }

  inputElement.files = filesStore.files;
};

inputElement.addEventListener('change', handleFiles, false);

function handleFiles(e) {
  const fileList = this.files;
  e.preventDefault();
  resultWrapper.innerHTML = '';

  for (let i = 0, len = fileList.length; i < len; i++) filesStore.items.add(fileList[i]);

  for (let i = 0, len = filesStore.files.length; i < len; i++) {
    let elem = document.createElement('div');
    let close = document.createElement('div');
    elem.classList.add('filewrapper');
    close.classList.add('close');
    close.addEventListener('click', () => {
      filesStore.items.remove(i);
      elem.remove();
      inputElement.files = filesStore.files;
    });
    elem.innerHTML = filesStore.files[i].name;
    elem.appendChild(close);
    resultWrapper.appendChild(elem);
  }

  inputElement.files = filesStore.files;
}

const tabsManager = document.getElementsByClassName('tabs_manager');

for (const singleTabsManager of tabsManager) {
  for (const tabsManagerLink of singleTabsManager.querySelectorAll('span')) {
    tabsManagerLink.addEventListener('click', function () {
      for (const tabsManagerLink1 of singleTabsManager.querySelectorAll('span')) {
        tabsManagerLink1.classList.remove('active');
      }

      tabsManagerLink.classList.add('active');
      let indexData = tabsManagerLink.getAttribute('data-index');

      for (const main of tabsManagerLink.closest('.mw').querySelectorAll('main')) {
        main.classList.contains('active') ? main.classList.remove('active') : null;
        main.getAttribute('data-index') === indexData ? main.classList.add('active') : null;
      }

      for (const footer of tabsManagerLink.closest('.mw').querySelectorAll('footer')) {
        footer.classList.contains('active') ? footer.classList.remove('active') : null;
        footer.getAttribute('data-index') === indexData ? footer.classList.add('active') : null;
      }
    });
  }
}

const btnsWrapper = document.querySelectorAll('.btns-wrapper--js');

for (const btnWrapper of btnsWrapper) {
  const btns = btnWrapper.querySelectorAll('.btn');

  for (const btn of btns) {
    btn.addEventListener('click', () => {
      for (const btn0 of btns) btn !== btn0 ? btn0.classList.remove('active') : btn.classList.add('active');
    });
  }
}

const windows = document.querySelectorAll('.mw');

for (const singleWindow of windows) {
  singleWindow.querySelectorAll('.close')[0].addEventListener('click', () => {
    singleWindow.classList.remove('active');
  });
}

const sessionName = document.getElementById('session_name');
document.querySelectorAll('.rename')[0].addEventListener('click', () => {
  sessionName.removeAttribute('disabled');
  setInputEventListeners(sessionName);
  sessionName.focus();
});
sessionName.addEventListener('blur', () => {
  sessionName.setAttribute('disabled', 'true');
});
document.querySelectorAll('.clone')[0].addEventListener('click', () => {
  document.querySelectorAll('.clone--success')[0].classList.add('active');
  document.querySelectorAll('#session_name')[0].select();
  document.execCommand('copy');
  setTimeout(() => {
    document.querySelectorAll('.clone--success')[0].classList.remove('active');
  }, 3000);
});

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (class {
  constructor() {
    this.init();
  }

  init() {
    const proxyWrapper = document.querySelectorAll('.mw__proxy_manager')[0];
    const proxyWrapperTable = proxyWrapper.querySelectorAll('.flexible_table')[0];
    const theadCheckbox = proxyWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const proxySearch = document.querySelectorAll('.mw__proxy_manager .search input')[0];
    let proxySearchData = [];
    let proxyData = [{
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 123,
      'state': {
        'checked': false,
        'check': 'success',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'User',
      'proxyPassword': '123456',
      'dns': '46.34.117.152',
      'id': 124,
      'state': {
        'checked': false,
        'check': 'error',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Minute',
      'proxyPassword': '123456',
      'dns': '46.34.117.152',
      'id': 125,
      'state': {
        'checked': false,
        'check': 'error',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 126,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 128,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 130,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 140,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 165,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }]; // DataWorkers

    const createProxy = data => {
      proxyData.splice(proxyData.length, 0, {
        'type': data[0],
        'connectionIp': data[1],
        'proxyIp': data[2],
        'proxyPort': data[3],
        'proxyLogin': data[4],
        'proxyPassword': data[5],
        'dns': data[6],
        'id': +new Date(),
        'state': {
          'checked': false,
          'check': 'not checked',
          'set': true
        }
      });
      rerenderProxyItems();
    };

    const changeProxyDataById = (id, key, value) => {
      proxyData = [...proxyData].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
      proxyWrapper.querySelectorAll('.proxy-save')[0].classList.remove('btn--disabled');
      proxyWrapper.querySelectorAll('.proxy-save')[0].classList.add('btn--green');
    };

    const setProxy = id => {
      let proxy = [...proxyData].filter(i => i.id === parseInt(id));
    };

    const setProxyAndClose = data => {
      let proxyInputWrapper = document.querySelectorAll('.dropdown--proxy')[0];
      let portWrapper = document.querySelectorAll('.dropdown--port')[0];
      document.querySelectorAll('#ip')[0].value = data.connectionIp;
      document.querySelectorAll('#ip')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#login')[0].value = data.proxyLogin;
      document.querySelectorAll('#login')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#password')[0].value = data.proxyPassword;
      document.querySelectorAll('#password')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#dns')[0].value = data.dns;
      document.querySelectorAll('#dns')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      document.querySelectorAll('#web_rtc')[0].value = data.proxyIp;
      document.querySelectorAll('#web_rtc')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      proxyInputWrapper.querySelectorAll('.textfirst')[0].innerHTML = data.type;
      proxyInputWrapper.querySelectorAll('input')[0].value = data.type;
      portWrapper.querySelectorAll('.textfirst')[0].innerHTML = data.proxyPort;
      portWrapper.querySelectorAll('input')[0].value = data.proxyPort;
      proxyWrapper.classList.remove('active');
    }; // BUTTONS ============================================


    const closeProxyBtn = proxyWrapper.querySelectorAll('.proxy-close')[0];
    const addProxyBtn = proxyWrapper.querySelectorAll('.proxy-add')[0];
    const addFromFileProxyBtn = proxyWrapper.querySelectorAll('.proxy-addFromFile')[0];
    const deleteProxyBtn = proxyWrapper.querySelectorAll('.proxy-delete')[0];
    const checkProxyBtn = proxyWrapper.querySelectorAll('.proxy-check')[0];
    const saveProxyBtn = proxyWrapper.querySelectorAll('.proxy-save')[0];
    addProxyBtn.addEventListener('click', () => {
      createProxy(['Not selected', '', '', '', '', '', '']);
    });
    closeProxyBtn.addEventListener('click', () => {
      proxyWrapper.classList.remove('active');
    });
    saveProxyBtn.addEventListener('click', () => {
      if (!saveProxyBtn.classList.contains('btn--disabled')) {
        proxyWrapper.classList.remove('active');
      }
    });
    checkProxyBtn.addEventListener('click', () => {
      if (!checkProxyBtn.classList.contains('btn--disabled')) {
        proxyData = [...proxyData].map(i => {
          if (i.state.checked) {
            i.state.check = 'load';
          }

          return i;
        });
        let searchedData = proxyData.map(i => {
          if (i.state.checked) {
            i.state.checked = false;
            return i;
          }
        });
        searchedData.map(i => {
          //  console.log(i);
          setTimeout(() => {
            let item = i;
            i.state.check = 'success';
            changeProxyDataById(i.id, 'state', i.state);

            for (const status of document.querySelectorAll('.check_status')) {
              if (status.parentNode.getAttribute('data-id') == i.id) {
                status.setAttribute('data-status', 'success');
                status.querySelectorAll('.recheck')[0].classList.add('disabled');
                setTimeout(() => {
                  status.querySelectorAll('.recheck')[0].classList.remove('disabled');
                }, 3000);
              }
            }
          }, Math.random() * 7500);
        });
        theadCheckbox.checked = false;
        saveProxyBtn.classList.remove('btn--disabled');
        saveProxyBtn.classList.add('btn--green');
        rerenderProxyItems();
        hideBtns();
      }
    });
    deleteProxyBtn.addEventListener('click', () => {
      let checkedIds = [];
      [...proxyData].map(i => {
        if (i.state.checked) {
          checkedIds.push(i.id);
        }
      });
      console.log(checkedIds);
      checkedIds.map(id => {
        let rowCounter = 0;
        [...proxyData].map(dataRow => {
          if (dataRow.id === id) {
            proxyData.splice(rowCounter, 1);
          }

          rowCounter++;
        });
      });
      console.log(proxyData);
      theadCheckbox.checked = false;
      rerenderProxyItems();
    });

    const showBtns = () => {
      deleteProxyBtn.classList.remove('btn--disabled');
      deleteProxyBtn.classList.add('btn--red');
      checkProxyBtn.classList.remove('btn--disabled');
      checkProxyBtn.classList.add('btn--blue');
    };

    const hideBtns = () => {
      deleteProxyBtn.classList.remove('btn--red');
      deleteProxyBtn.classList.add('btn--disabled');
      checkProxyBtn.classList.remove('btn--blue');
      checkProxyBtn.classList.add('btn--disabled');
    };

    const refreshButtonsState = () => {
      let active = false;
      proxyData.map(i => {
        if (i.state.checked) {
          active = true;
          showBtns();
        }
      });
    };

    addFromFileProxyBtn.addEventListener('click', e => {
      const proxyImportPopup = document.querySelectorAll('.mw__proxy_import')[0];
      proxyImportPopup.classList.add('active');
    }); // Checkboxes

    const initCheckboxes = () => {
      const checkboxes = proxyWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow = [];
          [...proxyData].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow.push(i.state);
            }
          });
          checkedRow.checked = e.target.checked;
          changeProxyDataById(id, 'state', checkedRow);
          refreshButtonsState();
        });
      }
    }; // init main Checkbox


    theadCheckbox.addEventListener('change', function (e) {
      let data = [...proxyData];

      if (proxySearch.value.length) {
        data = getSearchedProxyData(proxySearch.value);
        let searchedIds = [...data].map(i => {
          return i.id;
        });
        searchedIds.map(id => {
          let rowCounter = 0;
          [...proxyData].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        proxyData.map(i => {
          i.state.checked = e.target.checked;

          if (e.target.checked) {
            showBtns();
          } else {
            hideBtns();
          }
        });
      }

      rerenderProxyItems();
    }); // init Selects

    const initEventsForSelects = () => {
      const selects = proxyWrapperTable.querySelectorAll('.select');

      for (const select of selects) {
        select.addEventListener('click', function (e) {
          if (select.classList.contains('active')) {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }
          } else {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }

            if (!e.target.classList.contains('.input-option')) {
              select.classList.add('active');
              select.querySelectorAll('ul')[0].style.display = 'block';
            }
          }
        });
      }

      const selectOptions = proxyWrapperTable.querySelectorAll('li.input-option');

      for (const option of selectOptions) {
        option.addEventListener('click', function () {
          if (!option.closest('.select').classList.contains('disabled')) {
            let livalue = option.getAttribute('data-value');
            let lihtml = option.innerHTML;
            option.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
            option.closest('.select').querySelectorAll('.option').value = livalue;
            let id = parseInt(option.parentNode.parentNode.parentNode.parentNode.getAttribute('data-id'));
            changeProxyDataById(id, 'type', livalue);
          }
        });
      }

      document.addEventListener('click', e => {
        if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
          for (const select of selects) {
            select.querySelectorAll('ul')[0].style.display = 'none';
            select.classList.remove('active');
          }
        }
      });
    }; // Flexible wrapper


    const makeFlexibleWidth = () => {
      for (const columnNav of proxyWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 10) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 10) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = proxyWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = proxyWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = proxyWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const initEventsForCheckStatus = () => {
      let checkItems = proxyWrapper.querySelectorAll('.check_status');

      for (const wrapper of checkItems) {
        let recheck = wrapper.querySelectorAll('.recheck')[0];
        let status = wrapper.querySelectorAll('.status')[0];
        let id = wrapper.parentNode.getAttribute('data-id');
        recheck.addEventListener('click', () => {
          recheck.classList.add('disabled');
          status.style.display = 'none';
          let proxyDataState;
          [...proxyData].map(i => {
            if (parseInt(i.id) === parseInt(id)) {
              proxyDataState = i.state;
            }
          });
          proxyDataState.check = 'success';
          changeProxyDataById(id, 'state', proxyDataState);
          status.parentNode.setAttribute('data-status', 'load');
          setTimeout(() => {
            status.parentNode.setAttribute('data-status', 'success');
            status.style.display = 'block';
          }, 3000);
          setTimeout(() => {
            recheck.classList.remove('disabled');
          }, 6000);
        });
      }
    };

    const initSetter = () => {
      let setItems = proxyWrapper.querySelectorAll('.set_status');

      for (const wrapper of setItems) {
        let set = wrapper.querySelectorAll('.setbtn')[0];
        let id = wrapper.parentNode.getAttribute('data-id');
        set.addEventListener('click', () => {
          let proxyDataRow;
          [...proxyData].map(i => {
            if (parseInt(i.id) === parseInt(id)) {
              proxyDataRow = i;
            }
          });

          if (proxyDataRow.state.check === 'success') {
            setProxyAndClose(proxyDataRow);
          }
        });
      }
    }; // RERENDER ============================================


    const rerenderProxyItems = () => {
      let columns = proxyWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = [...proxyData];

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (proxySearch.value.length !== 0) {
        data = getSearchedProxyData(proxySearch.value);
      }

      let i = 0;

      for (const proxyRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = proxyRow.state.checked ? 'checked' : '';
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-id="' + proxyRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else if (colCounter === 1) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="select"><div class="mm-dropdown"><div class="textfirst">' + proxyRow[Object.keys(proxyRow)[colCounter - 1]] + '</div><ul>  <li class="input-option" data-value="Tor">Tor</li><li class="input-option" data-value="Http">Http</li><li class="input-option" data-value="Socks5">Socks5</li><li class="input-option" data-value="Dynamic socks5">Dynamic socks5</li><li class="input-option" data-value="SSH Tunnel">SSH Tunnel</li><li class="input-option" data-value="Tor + SSH Tunnel">Tor + SSH Tunnel</li><li class="input-option" data-value="SSH + Socks5">SSH + Socks5</li></ul><input type="hidden" class="option" value=""/></div></div></div>');
          } else if (colCounter === 8) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="check_status" data-status="' + proxyRow.state.check + '"><div class="status"></div><div class="preloader"></div><div class="recheck"></div></div></div>');
          } else if (colCounter === 9) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="set_status" data-status="' + proxyRow.state.set + '"><div class="status"></div><div class="setbtn"></div></div></div>');
          } else {
            let colData = proxyRow[Object.keys(proxyRow)[colCounter - 1]].toString();

            if (proxySearch.value !== 0) {
              colData = colData.replace(new RegExp(proxySearch.value, 'i'), "<span class='marker'>" + proxySearch.value + '</span>');
            }

            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute('data-id', proxyRow.id);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('value', proxyRow[Object.keys(proxyRow)[colCounter - 1]]);

            if (colCounter === 2 || colCounter === 3) {
              divWrapper.classList.add('flexible_wrapper--flag');
            }

            if (colCounter === 2 || colCounter === 3 || colCounter === 7) {
              let value = x.value;
              x.addEventListener('keydown', e => {
                if (e.which >= 48 && e.which <= 57 || // цифры
                e.which >= 96 && e.which <= 105 // num lock
                || e.which == 8 // backspace
                || e.which == 190 // dot
                || e.which >= 37 && e.which <= 40 // стрелки
                || e.which == 46) // delete
                  {} else {
                  e.preventDefault();
                }
              });
              x.addEventListener('keyup', e => {
                let ipItems = e.target.value.split('.');
                ipItems = ipItems.map(i => {
                  if (parseInt(i) > 255) {
                    i = 255;
                  }

                  return i;
                });
                e.target.value = ipItems.join('.');
              });
            }

            if (colCounter === 4) {
              let value = x.value;
              x.addEventListener('keydown', e => {
                if (e.which >= 48 && e.which <= 57 || // цифры
                e.which >= 96 && e.which <= 105 // num lock
                || e.which == 8 // backspace
                || e.which >= 37 && e.which <= 40 // стрелки
                || e.which == 46) // delete
                  {} else {
                  e.preventDefault();
                }
              });
              x.addEventListener('keyup', e => {
                let port = parseInt(e.target.value);

                if (port > 65535) {
                  port = 65535;
                }

                if (isNaN(port)) {
                  port = '';
                }

                e.target.value = port;
              });
            }

            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changeProxyDataById(proxyRow.id, Object.keys(proxyRow)[colDuplicator], e.target.value);
            });
            divWrapper.innerHTML = colData;
            divWrapper.classList.add('wrapper_withoutinput');
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      proxyWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      initEventsForSelects();
      initEventsForCheckStatus();
      initSetter();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderProxyItems();
    initEventsForSelects(); // SEARCH ======================================

    proxySearch.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        proxyWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        proxyWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderProxyItems();
    });
    proxyWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      proxySearch.value = '';
      proxyWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderProxyItems();
    });

    const getSearchedProxyData = value => {
      let vals1;
      let vals2;
      let proxySearchData1 = [];
      let proxySearchData2 = [];
      let arrayOfvaluesId = [];
      let dataClone1 = [...proxyData].map(x => {
        let isSearchTrueForThisElem = false;
        vals1 = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().startsWith(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              arrayOfvaluesId.push(x.id);
              proxySearchData1.push(x);
            }
          }
        });
      });
      let dataClone2 = [...proxyData].map(x => {
        if (arrayOfvaluesId.filter(i => i === x.id).length === 0) {
          let isSearchTrueForThisElem = false;
          vals2 = Object.values(x).some((item, i) => {
            if (typeof item !== 'object') {
              if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
                isSearchTrueForThisElem = true;
                proxySearchData2.push(x);
              }
            }
          });
        }
      });
      return [...proxySearchData1, ...proxySearchData2];
    }; // IMPORT PROXY =====================================


    let filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
    const holder = document.getElementById('proxyHolder');
    const resultWrapper = document.getElementsByClassName('proxyResult')[0];
    const inputElement = document.getElementById('proxyFileInput');
    const importFilesBtn = document.querySelectorAll('.proxy_import_files')[0];
    const importClosesBtn = document.querySelectorAll('.proxy_import_close')[0]; // proxy_import_close

    holder.ondragover = function () {
      this.className = 'hover';
      return false;
    };

    holder.ondragend = function () {
      this.className = '';
      return false;
    };

    holder.ondrop = function (e) {
      this.className = '';
      e.preventDefault();
      resultWrapper.innerHTML = '';

      for (let i = 0, len = e.dataTransfer.files.length; i < len; i++) filesStore.items.add(e.dataTransfer.files[i]);

      for (let i = 0, len = filesStore.files.length; i < len; i++) {
        let elem = document.createElement('div');
        let close = document.createElement('div');
        elem.classList.add('filewrapper');
        close.classList.add('close');
        close.addEventListener('click', () => {
          filesStore.items.remove(i);
          elem.remove();
          inputElement.files = filesStore.files;
        });
        elem.innerHTML = filesStore.files[i].name;
        elem.appendChild(close);
        resultWrapper.appendChild(elem);
      }

      inputElement.files = filesStore.files;
    };

    const handleImport = e => {
      if (importFilesBtn.classList.contains('btn--green')) {
        for (let i = 0; i < filesStore.files.length; i++) {
          (function (file) {
            let reader = new FileReader();
            reader.addEventListener('load', function (e) {
              let text = e.target.result;
              createProxy(text.split(';'));
            });
            reader.readAsText(file);
          })(filesStore.files[i]);
        }

        filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
        resultWrapper.innerHTML = '';
        importFilesBtn.classList.remove('btn--green');
        importFilesBtn.classList.add('btn--disabled');
        handleClose();
      }
    };

    const handleFiles = e => {
      const fileList = e.target.files;
      e.preventDefault();
      resultWrapper.innerHTML = '';

      for (let i = 0, len = fileList.length; i < len; i++) filesStore.items.add(fileList[i]);

      for (let i = 0, len = filesStore.files.length; i < len; i++) {
        let elem = document.createElement('div');
        let close = document.createElement('div');
        elem.classList.add('filewrapper');
        close.classList.add('close');
        close.addEventListener('click', () => {
          filesStore.items.remove(i);
          elem.remove();
          inputElement.files = filesStore.files;

          if (filesStore.files.length !== 0) {
            importFilesBtn.classList.add('btn--green');
            importFilesBtn.classList.remove('btn--disabled');
          } else {
            importFilesBtn.classList.remove('btn--green');
            importFilesBtn.classList.add('btn--disabled');
          }
        });
        elem.innerHTML = filesStore.files[i].name;
        elem.appendChild(close);
        resultWrapper.appendChild(elem);
      }

      inputElement.files = filesStore.files;
      console.log(filesStore.files.length);

      if (filesStore.files.length !== 0) {
        importFilesBtn.classList.add('btn--green');
        importFilesBtn.classList.remove('btn--disabled');
      } else {
        importFilesBtn.classList.remove('btn--green');
        importFilesBtn.classList.add('btn--disabled');
      }
    };

    const handleClose = () => {
      // mw__proxy_import
      const proxyImportPopup = document.querySelectorAll('.mw__proxy_import')[0];
      proxyImportPopup.classList.remove('active');
    };

    inputElement.addEventListener('change', handleFiles);
    importFilesBtn.addEventListener('click', handleImport);
    importClosesBtn.addEventListener('click', handleClose);
  }

});
;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (class {
  constructor() {
    this.init();
  }

  init() {
    const agentWrapper = document.querySelectorAll('.mw__useragent_manager')[0];
    const agentWrapperTable = agentWrapper.querySelectorAll('.flexible_table')[0];
    const theadCheckbox = agentWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const agentSearch = agentWrapper.querySelectorAll('.search input')[0];
    let mwState = {
      'category': 'lastUsed',
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      }
    };
    const btnsWrappers = agentWrapper.querySelectorAll('.btns-wrapper--js');

    for (let btnsWrapper of btnsWrappers) {
      let buttons = btnsWrapper.querySelectorAll('.btn');

      for (let btn of buttons) {
        btn.addEventListener('click', e => {
          let cat = e.target.getAttribute('data-category');
          let val = e.target.getAttribute('data-value');
          mwState.config[cat] = val;
          theadCheckbox.checked = false;
          rerenderAgentsItems();
        });
      }
    }

    let tabsBtns = agentWrapper.querySelectorAll('.tabs_manager span');

    for (let btn of tabsBtns) {
      btn.addEventListener('click', e => {
        let val = e.target.getAttribute('data-value');
        mwState.category = val;
        theadCheckbox.checked = false;
        rerenderAgentsItems();
      });
    }

    let agentData = [{
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      },
      'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',
      'id': 123,
      'state': {
        'checked': false,
        'current': true,
        'set': true,
        'lastUsed': 1603709258344,
        'dateAdded': 1603709258322,
        'setCounter': 1
      }
    }, {
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      },
      'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',
      'id': 124,
      'state': {
        'checked': false,
        'current': false,
        'set': true,
        'lastUsed': 111,
        'dateAdded': 110,
        //'lastUsed': 1603709258344,
        //'dateAdded':  1603709258322,
        'setCounter': 2
      }
    }, {
      'config': {
        'os': 'linux',
        'browser': 'safari'
      },
      'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246',
      'id': 125,
      'state': {
        'checked': false,
        'current': false,
        'set': true,
        'lastUsed': 222,
        'dateAdded': 220,
        'setCounter': 0
      }
    }, {
      'config': {
        'os': 'windows',
        'browser': 'chrome'
      },
      'useragent': 'useragent',
      'id': 126,
      'state': {
        'checked': false,
        'current': false,
        'set': true,
        'lastUsed': 1603709258344,
        'dateAdded': 1603709258322,
        'setCounter': 1
      }
    }]; // DataWorkers

    const createAgent = data => {
      agentData.splice(agentData.length, 0, {
        'config': {
          'os': data[0],
          'browser': data[1]
        },
        'useragent': data[2],
        'id': +new Date(),
        'state': {
          'checked': false,
          'current': false,
          'set': true,
          'lastUsed': 0,
          'dateAdded': +new Date(),
          'setCounter': 0
        }
      });
      rerenderAgentsItems();
    };

    const changeAgentDataById = (id, key, value) => {
      agentData = [...agentData].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
      agentWrapper.querySelectorAll('.agent-save')[0].classList.remove('btn--disabled');
      agentWrapper.querySelectorAll('.agent-save')[0].classList.add('btn--green');
    };

    const setAgentAndClose = data => {
      agentData.map(i => {
        if (i.state.current) {
          i.state.current = false;
        }

        return i;
      });
      agentData.map(i => {
        if (i.id == data.id) {
          i.state.current = true;
          i.state.lastUsed = +new Date();
          i.state.setCounter = i.state.setCounter++;
        }

        return i;
      });
      rerenderAgentsItems();
      document.querySelectorAll('#useragent')[0].value = data.useragent;
      document.querySelectorAll('#useragent')[0].parentNode.querySelectorAll('label')[0].classList.add('active');
      setTimeout(() => {
        agentWrapper.classList.remove('active');
      }, 370);
    }; // BUTTONS ============================================


    const closeAgentsBtn = agentWrapper.querySelectorAll('.agent-close')[0];
    const addAgentBtn = agentWrapper.querySelectorAll('.agent-add')[0];
    const deleteAgentBtn = agentWrapper.querySelectorAll('.agent-delete')[0];
    const saveAgentBtn = agentWrapper.querySelectorAll('.agent-save')[0];
    addAgentBtn.addEventListener('click', () => {
      createAgent(['unset', 'unset', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246']);
    });
    closeAgentsBtn.addEventListener('click', () => {
      agentWrapper.classList.remove('active');
    });
    saveAgentBtn.addEventListener('click', () => {
      if (!saveAgentBtn.classList.contains('btn--disabled')) {
        agentWrapper.classList.remove('active');
      }
    });
    deleteAgentBtn.addEventListener('click', () => {
      let checkedIds = [];
      [...agentData].map(i => {
        if (i.state.checked) {
          checkedIds.push(i.id);
        }
      });
      checkedIds.map(id => {
        let rowCounter = 0;
        [...agentData].map(dataRow => {
          if (dataRow.id === id) {
            agentData.splice(rowCounter, 1);
          }

          rowCounter++;
        });
      });
      theadCheckbox.checked = false;
      rerenderAgentsItems();
    });

    const showBtns = () => {
      deleteAgentBtn.classList.remove('btn--disabled');
      deleteAgentBtn.classList.add('btn--red');
    };

    const hideBtns = () => {
      deleteAgentBtn.classList.remove('btn--red');
      deleteAgentBtn.classList.add('btn--disabled');
    };

    const refreshButtonsState = () => {
      let active = false;
      agentData.map(i => {
        if (i.state.checked) {
          active = true;
          showBtns();
        }
      });
    }; // Checkboxes


    const initCheckboxes = () => {
      const checkboxes = agentWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          let id = parseInt(e.target.parentNode.parentNode.getAttribute('data-id'));
          let checkedRow = [];
          [...agentData].map(i => {
            if (parseInt(i.id) === id) {
              checkedRow.push(i.state);
            }
          });
          checkedRow.checked = e.target.checked;
          changeAgentDataById(id, 'state', checkedRow);
          let checkedIds = [];
          [...agentData].map(i => {
            if (i.state.checked) {
              checkedIds.push(i.id);
            }
          });

          if (checkedIds.length > 0) {
            deleteAgentBtn.classList.remove('btn--disabled');
            deleteAgentBtn.classList.add('btn--red');
          } else {
            deleteAgentBtn.classList.add('btn--disabled');
            deleteAgentBtn.classList.remove('btn--red');
          }

          refreshButtonsState();
        });
      }
    };

    theadCheckbox.addEventListener('change', function (e) {
      let data = getCategorizedData();

      if (agentSearch.value.length) {
        data = getSearchedagentData(agentSearch.value);
        let searchedIds = getCategorizedData().map(i => {
          return i.id;
        });
        console.log(searchedIds);
        searchedIds.map(id => {
          let rowCounter = 0;
          [...agentData].map(dataRow => {
            if (dataRow.id === id) {
              dataRow.state.checked = e.target.value;
            }

            rowCounter++;
          });
        });
      } else {
        data = getCategorizedData();
        let searchedIds = data.map(i => {
          return i.id;
        }); //mwState.config.

        searchedIds.map(id => {
          agentData.map(i => {
            if (i.id === id) {
              i.state.checked = e.target.checked;
            }

            if (e.target.checked) {
              showBtns();
            } else {
              hideBtns();
            }
          });
        });
      }

      rerenderAgentsItems();
    }); // Flexible wrapper

    const makeFlexibleWidth = () => {
      for (const columnNav of agentWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (columnIndex + 1 < 4) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (columnIndex + 1 === 4) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = agentWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = agentWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = agentWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const initSetter = () => {
      let setItems = agentWrapper.querySelectorAll('.set_status');

      for (const wrapper of setItems) {
        let set = wrapper.querySelectorAll('.setbtn')[0];

        if (set) {
          let id = wrapper.parentNode.getAttribute('data-id');
          set.addEventListener('click', () => {
            let agentDataRow;
            [...agentData].map(i => {
              console.log(parseInt(i.id) + ' ' + id);

              if (parseInt(i.id) === parseInt(id)) {
                agentDataRow = i;
              }
            });

            if (!agentDataRow.state.current) {
              setAgentAndClose(agentDataRow);
            }
          });
        }
      }
    };

    const getCategorizedData = () => {
      let data = [...agentData];

      switch (mwState.category) {
        case 'lastUsed':
          data.sort((a, b) => {
            return b['state'].lastUsed - a['state'].lastUsed;
          });
          break;

        case 'dateAdded':
          data.sort((a, b) => {
            return b['state'].dateAdded - a['state'].dateAdded;
          });
          break;

        case 'mostUsed':
          data.sort((a, b) => {
            return b['state'].setCounter - a['state'].setCounter;
          });
          break;

        default:
          break;
      }

      let newData = [];

      switch (mwState.config.os) {
        case 'windows':
          [...data].map(i => {
            if (i.config.os === 'windows') {
              newData.push(i);
            }
          });
          break;

        case 'linux':
          [...data].map(i => {
            console.log(i.config.os);

            if (i.config.os === 'linux') {
              newData.push(i);
            }
          });
          break;

        case 'macos':
          [...data].map(i => {
            if (i.config.os === 'macos') {
              newData.push(i);
            }
          });
          break;

        case 'android':
          [...data].map(i => {
            if (i.config.os === 'android') {
              newData.push(i);
            }
          });
          break;

        case 'ios':
          [...data].map(i => {
            if (i.config.os === 'ios') {
              newData.push(i);
            }
          });
          break;

        default:
          break;
      }

      let newData1 = [];

      switch (mwState.config.browser) {
        case 'chrome':
          [...newData].map(i => {
            if (i.config.browser === 'chrome') {
              newData1.push(i);
            }
          });
          break;

        case 'safari':
          [...newData].map(i => {
            if (i.config.browser === 'safari') {
              newData1.push(i);
            }
          });
          break;

        case 'firefox':
          [...newData].map(i => {
            if (i.config.browser === 'firefox') {
              newData1.push(i);
            }
          });
          break;

        case 'opera':
          [...newData].map(i => {
            if (i.config.browser === 'opera') {
              newData1.push(i);
            }
          });
          break;

        case 'explorer':
          [...newData].map(i => {
            if (i.config.browser === 'explorer') {
              newData1.push(i);
            }
          });
          break;

        default:
          break;
      }

      let uncatData = [];
      agentData.map(i => {
        if (i.config.os === 'unset' || i.config.browser === 'unset') {
          uncatData.push(i);
        }
      });
      return [...newData1, ...uncatData];
    }; // RERENDER ============================================


    const rerenderAgentsItems = () => {
      let columns = agentWrapperTable.querySelectorAll('.column');
      let x = 0;
      let data = getCategorizedData();

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      if (agentSearch.value.length !== 0) {
        data = getSearchedAgentData(agentSearch.value);
      }

      let i = 0;

      for (const agentRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = agentRow.state.checked ? 'checked' : '';
            agentWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-current="' + agentRow.state.current + '" data-id="' + agentRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else if (colCounter === 1) {
            let osImg = '<img src="./images/userAgents/' + agentRow.config.os + '.png" style="margin-top: 12px;margin-left: 16px;margin-right: 12px;"/>';
            let browserImg = '<img src="./images/userAgents/' + agentRow.config.browser + '.png"/>';
            agentWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-current="' + agentRow.state.current + '" class="flexible_wrapper" data-id="' + agentRow.id + '">' + osImg + browserImg + '</div>');
          } else if (colCounter === 3) {
            let rowContent;

            if (agentRow.state.current) {
              rowContent = '<div class="set_status" data-status="' + agentRow.state.set + '"><svg width="12" style="margin:13px 25px" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.8125 6.5C11.8125 3.3125 9.1875 0.6875 6 0.6875C2.78906 0.6875 0.1875 3.3125 0.1875 6.5C0.1875 9.71094 2.78906 12.3125 6 12.3125C9.1875 12.3125 11.8125 9.71094 11.8125 6.5ZM5.32031 9.59375C5.17969 9.73438 4.92188 9.73438 4.78125 9.59375L2.34375 7.15625C2.20312 7.01562 2.20312 6.75781 2.34375 6.61719L2.88281 6.10156C3.02344 5.9375 3.25781 5.9375 3.39844 6.10156L5.0625 7.74219L8.57812 4.22656C8.71875 4.0625 8.95312 4.0625 9.09375 4.22656L9.63281 4.74219C9.77344 4.88281 9.77344 5.14062 9.63281 5.28125L5.32031 9.59375Z" fill="#E99C61"/></svg></div>';
            } else {
              rowContent = '<div class="set_status" data-status="' + agentRow.state.set + '"><div class="status"></div><div class="setbtn"></div></div>';
            }

            agentWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-current="' + agentRow.state.current + '" class="flexible_wrapper" data-id="' + agentRow.id + '">' + rowContent + '</div>');
          } else {
            let colData = agentRow[Object.keys(agentRow)[colCounter - 1]].toString();

            if (agentSearch.value !== 0) {
              colData = colData.replace(new RegExp(agentSearch.value, 'i'), "<span class='marker'>" + agentSearch.value + '</span>');
            }

            const divWrapper = document.createElement('DIV');
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute('data-id', agentRow.id);
            divWrapper.setAttribute('data-current', agentRow.state.current);
            const x = document.createElement('INPUT');
            x.setAttribute('type', 'text');
            x.setAttribute('value', agentRow[Object.keys(agentRow)[colCounter - 1]]);
            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changeAgentDataById(agentRow.id, Object.keys(agentRow)[colDuplicator], e.target.value);
            });
            divWrapper.innerHTML = colData;
            divWrapper.classList.add('wrapper_withoutinput');
            agentWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      agentWrapperTable.style.height = data.length * 40 + 260 + 'px';
      initCheckboxes();
      initSetter();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderAgentsItems(); // SEARCH ======================================

    agentSearch.addEventListener('keyup', e => {
      if (e.target.value.length === 0) {
        agentWrapper.querySelectorAll('.clearSearch')[0].style.display = 'none';
      } else {
        agentWrapper.querySelectorAll('.clearSearch')[0].style.display = 'block';
      }

      theadCheckbox.checked = false;
      rerenderAgentsItems();
    });
    agentWrapper.querySelectorAll('.clearSearch')[0].addEventListener('click', () => {
      agentSearch.value = '';
      agentWrapper.querySelectorAll('.search')[0].querySelectorAll('label')[0].classList.remove('active');
      rerenderAgentsItems();
    });

    const getSearchedAgentData = value => {
      let vals2;
      let agentSearchData2 = [];
      getCategorizedData().map(x => {
        let isSearchTrueForThisElem = false;
        vals2 = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              agentSearchData2.push(x);
            }
          }
        });
      });
      return [...agentSearchData2];
    };
  }

});
;

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (class {
  constructor() {
    this.init();
  }

  init() {
    for (const nav of document.querySelectorAll('.columnNav')) {
      dragElement(nav);
    }

    function dragElement(elmnt) {
      var pos1 = 0,
          pos3 = 0;

      if (document.getElementById(elmnt.id + 'header')) {
        /* if present, the header is where you move the DIV from: */
        document.getElementById(elmnt.id + 'header').onmousedown = dragMouseDown;
      } else {
        /* otherwise, move the DIV from anywhere inside the DIV: */
        elmnt.onmousedown = dragMouseDown;
      }

      let initialPos = 0;

      function dragMouseDown(e) {
        e = e || window.event;
        e.preventDefault(); // get the mouse cursor position at startup:

        pos3 = e.clientX;
        document.onmouseup = closeDragElement; // call a function whenever the cursor moves:

        document.onmousedown = e => {
          initialPos = e.clientX;
        };

        document.onmousemove = elementDrag;
      }

      function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();

        const getRightOffset = (index, wrapper) => {
          return wrapper.children.length - parseInt(index);
        };

        let columnIndex = parseInt(elmnt.parentNode.getAttribute('data-column'));
        let stopLeftPosition = 50 * parseInt(columnIndex);
        let stopRightPosition = getRightOffset(columnIndex, elmnt.parentNode.parentNode) * 50;
        pos1 = e.clientX - 15;

        if (e.clientX - 15 < stopLeftPosition) {
          pos1 = stopLeftPosition;
        } else if (e.clientX - 15 > 950 - stopRightPosition) {
          pos1 = 950 - stopRightPosition;
        }

        elmnt.parentNode.style.left = pos1 + 'px';

        if (elmnt.parentNode.parentNode.children.length > columnIndex + 1) {
          for (const wrapper of elmnt.parentNode.querySelectorAll('.flexible_wrapper')) {
            wrapper.style.maxWidth = parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        } else {
          for (const wrapper of elmnt.parentNode.querySelectorAll('.flexible_wrapper')) {
            wrapper.style.maxWidth = 950 - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }

        for (const wrapper of elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1].querySelectorAll('.flexible_wrapper')) {
          //console.log(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1]);
          wrapper.style.maxWidth = parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1].style.left) + 'px';
        }
      }

      function closeDragElement() {
        /* stop moving when mouse button is released: */
        document.onmouseup = null;
        document.onmousemove = null;
      }
    }
  }

});
;

/***/ })
/******/ ]);
//# sourceMappingURL=mw-session-setup.min.js.map