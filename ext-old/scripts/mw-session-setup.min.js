/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_proxyWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _modules_tableWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);




new _modules_proxyWorker_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
new _modules_tableWorker_js__WEBPACK_IMPORTED_MODULE_1__["default"]();

const setEventsForSelects = () => {
  const selects = document.querySelectorAll('.select');

  for (const select of selects) {
    select.addEventListener('click', function (e) {
      if (this.classList.contains('active')) {
        for (const select of selects) {
          select.querySelectorAll('ul')[0].style.display = 'none';
          select.classList.remove('active');
        }
      } else {
        for (const select of selects) {
          select.querySelectorAll('ul')[0].style.display = 'none';
          select.classList.remove('active');
        }

        if (!e.target.classList.contains('.input-option')) {
          this.classList.add('active');
          this.querySelectorAll('ul')[0].style.display = 'block';
        }
      }
    });
  }

  const selectOptions = document.querySelectorAll('li.input-option');

  for (const option of selectOptions) {
    option.addEventListener('click', function () {
      if (!this.closest('.select').classList.contains('disabled')) {
        let livalue = this.getAttribute('data-value');
        let lihtml = this.innerHTML;
        this.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
        this.closest('.select').querySelectorAll('.option').value = livalue;
      }
    });
  }

  document.addEventListener('click', e => {
    if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
      for (const select of selects) {
        select.querySelectorAll('ul')[0].style.display = 'none';
        select.classList.remove('active');
      }
    }
  });
}; // =============================================== plugins worker


let pluginsSearchData = [];
let pluginsData = [{
  'name': 'Yanado - Task Man',
  'description': 'Yanado - Task Man',
  'version': '6.6',
  'filename': 'Yanado - Task Man',
  'mimetype': 'application/x-unknown',
  'mimedescription': 'Mime description',
  'suffixes': 'ksh'
}, {
  'name': 'Yanado - Task Man',
  'description': 'Yanado - Task Man',
  'version': '6.6',
  'filename': 'Yanado - Task Man',
  'mimetype': 'application/x-unknown',
  'mimedescription': 'Mime description',
  'suffixes': 'ksh'
}];
const extendedWrapper = document.querySelectorAll('.mw__extended_settings')[0];
const extendedWrapperTable = document.querySelectorAll('.table--plugins')[0];

const rerenderPluginsItems = data => {
  let columns = extendedWrapperTable.querySelectorAll('.column');
  let x = 0;

  for (const column of columns) {
    column.querySelectorAll('.column_body')[0].innerHTML = '';
    x === 1 ? column.style.left = 57 + 'px' : column.style.left = 115 * x + 'px';
    x++;
  }

  let i = 0;

  for (const row of data) {
    let colCounter = 0;

    for (const column of columns) {
      colCounter === 0 ? extendedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div><label class="checkbox-container"><input type="checkbox" /><span class="checkmark"></span></label></div>') : extendedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div>' + row[Object.keys(row)[colCounter - 1]] + '</div>');
      colCounter++;
    }

    i++;
  }

  extendedWrapperTable.style.height = data.length * 40 + 40 + 'px';
};

window.addEventListener('load', () => {
  rerenderPluginsItems(pluginsData);
});
const pluginsExtendedSearch = document.querySelectorAll('.mw__extended_settings .main--plugins input')[0];
pluginsExtendedSearch.addEventListener('keyup', e => {
  searchPluginsData(e.target.value);
});

const searchPluginsData = value => {
  let vals;
  let searchData = [];
  let dataClone = [...pluginsData].map(x => {
    let isSearchTrueForThisElem = false;
    vals = Object.values(x).some((item, i) => {
      // get data obj
      if (typeof item !== 'object') {
        if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
          isSearchTrueForThisElem = true;
          searchData.push(x);
        }
      }
    });
  });
  rerenderPluginsItems(searchData);
};

const addPluginBtn = document.querySelectorAll('.plugin-add')[0];
const deletePluginBtn = document.querySelectorAll('.plugin-delete')[0];
addPluginBtn.addEventListener('click', () => {
  pluginsData.splice(pluginsData.length, 0, {
    'name': 'New Yanado - Task Man',
    'description': 'New Yanado - Task Man',
    'version': '6.7',
    'filename': 'New Yanado - Task Man',
    'mimetype': 'application/x-unknown',
    'mimedescription': 'Mime description',
    'suffixes': 'ksh'
  });
  rerenderPluginsItems(pluginsData);
});
deletePluginBtn.addEventListener('click', () => {
  let i = 0;
  let checkboxArray = [];

  for (const checkbox of extendedWrapper.querySelectorAll('.table--plugins .column_body input[type=checkbox]')) {
    checkboxArray.push(checkbox.checked);
  }

  let checkboxIndex = 0;
  let checkboxecondIndex = 0;

  for (const checkbox of checkboxArray) {
    if (checkbox) {
      pluginsData.splice(checkboxecondIndex - checkboxIndex, 1);
      checkboxIndex++;
    }

    checkboxecondIndex++;
  }

  rerenderPluginsItems(pluginsData);
}); // ========================================= End
// =============================================== Headers worker

let headersSearchData = [];
let headersData = [{
  'name': 'Name',
  'value': 'Value'
}];
const headersWrapperTable = extendedWrapper.querySelectorAll('.table--headers')[0];

const rerenderHeadersItems = data => {
  let columns = headersWrapperTable.querySelectorAll('.column');
  let x = 0;

  for (const column of columns) {
    column.querySelectorAll('.column_body')[0].innerHTML = '';
    x === 1 ? column.style.left = 57 + 'px' : column.style.left = 115 * x + 'px';
    x++;
  }

  let i = 0;

  for (const row of data) {
    let colCounter = 0;

    for (const column of columns) {
      colCounter === 0 ? headersWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div><label class="checkbox-container"><input type="checkbox" /><span class="checkmark"></span></label></div>') : headersWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div>' + row[Object.keys(row)[colCounter - 1]] + '</div>');
      colCounter++;
    }

    i++;
  }

  headersWrapperTable.style.height = data.length * 40 + 40 + 'px';
};

window.addEventListener('load', () => {
  rerenderHeadersItems(headersData);
});
const headersSearch = document.querySelectorAll('.mw__extended_settings .main--headers input')[0];
headersSearch.addEventListener('keyup', e => {
  searchHeadersData(e.target.value);
});

const searchHeadersData = value => {
  let vals;
  let searchData = [];
  let dataClone = [...headersData].map(x => {
    let isSearchTrueForThisElem = false;
    vals = Object.values(x).some((item, i) => {
      if (typeof item !== 'object') {
        if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
          isSearchTrueForThisElem = true;
          searchData.push(x);
        }
      }
    });
  });
  rerenderHeadersItems(searchData);
};

const addHeadersBtn = extendedWrapper.querySelectorAll('.headers-add')[0];
const deleteHeadersBtn = extendedWrapper.querySelectorAll('.headers-delete')[0];
addHeadersBtn.addEventListener('click', () => {
  headersData.splice(headersData.length, 0, {
    'Http headers': 'New name',
    'Header value': 'New Value'
  });
  rerenderHeadersItems(headersData);
});
deleteHeadersBtn.addEventListener('click', () => {
  let i = 0;
  let checkboxArray = [];

  for (const checkbox of extendedWrapper.querySelectorAll('.table--headers .column_body input[type=checkbox]')) {
    checkboxArray.push(checkbox.checked);
  }

  let checkboxIndex = 0;
  let checkboxecondIndex = 0;

  for (const checkbox of checkboxArray) {
    if (checkbox) {
      headersData.splice(checkboxecondIndex - checkboxIndex, 1);
      checkboxIndex++;
    }

    checkboxecondIndex++;
  }

  rerenderHeadersItems(headersData);
}); // ========================================= End
// =============================================== Blocked worker

let blockedSearchData = [];
let blockedData = [{
  'title': 'Twitter website title',
  'value': 'https://twitter.com/adv/detection'
}];
const blockedWrapperTable = extendedWrapper.querySelectorAll('.table--blocked')[0];

const rerenderBlockedItems = data => {
  let columns = blockedWrapperTable.querySelectorAll('.column');
  let x = 0;

  for (const column of columns) {
    column.querySelectorAll('.column_body')[0].innerHTML = '';
    x === 1 ? column.style.left = 57 + 'px' : column.style.left = 115 * x + 'px';
    x++;
  }

  let i = 0;

  for (const row of data) {
    let colCounter = 0;

    for (const column of columns) {
      colCounter === 0 ? blockedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div><label class="checkbox-container"><input type="checkbox" /><span class="checkmark"></span></label></div>') : blockedWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div>' + row[Object.keys(row)[colCounter - 1]] + '</div>');
      colCounter++;
    }

    i++;
  }

  blockedWrapperTable.style.height = data.length * 40 + 40 + 'px';
};

window.addEventListener('load', () => {
  rerenderBlockedItems(blockedData);
});
const blockedSearch = document.querySelectorAll('.mw__extended_settings .main--blocked input')[0];
blockedSearch.addEventListener('keyup', e => {
  searchBlockedData(e.target.value);
});

const searchBlockedData = value => {
  let vals;
  let searchData = [];
  let dataClone = [...blockedData].map(x => {
    let isSearchTrueForThisElem = false;
    vals = Object.values(x).some((item, i) => {
      if (typeof item !== 'object') {
        if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
          isSearchTrueForThisElem = true;
          searchData.push(x);
        }
      }
    });
  });
  rerenderBlockedItems(blockedData);
};

const addBlockedBtn = extendedWrapper.querySelectorAll('.blocked-add')[0];
const deleteBlockedBtn = extendedWrapper.querySelectorAll('.blocked-delete')[0];
addBlockedBtn.addEventListener('click', () => {
  blockedData.splice(blockedData.length, 0, {
    'Website': 'Twitter website title',
    'Banned URL': 'Banned URL'
  });
  rerenderBlockedItems(blockedData);
});
deleteBlockedBtn.addEventListener('click', () => {
  let i = 0;
  let checkboxArray = [];

  for (const checkbox of extendedWrapper.querySelectorAll('.table--blocked .column_body input[type=checkbox]')) {
    checkboxArray.push(checkbox.checked);
  }

  let checkboxIndex = 0;
  let checkboxecondIndex = 0;

  for (const checkbox of checkboxArray) {
    if (checkbox) {
      blockedData.splice(checkboxecondIndex - checkboxIndex, 1);
      checkboxIndex++;
    }

    checkboxecondIndex++;
  }

  rerenderBlockedItems(blockedData);
}); // ========================================= End

const switchers = document.querySelectorAll('.switcher-wrapper');

for (const switcher of switchers) {
  switcher.addEventListener('click', () => {
    const checkbox = switcher.querySelectorAll('input')[0];
    checkbox.checked = !checkbox.checked;
  });
}

const inputsWrapper = document.querySelectorAll('.input-wrapper');

const setInputEventListeners = input => {
  const wrapper = input.closest('div');

  input.onfocus = function () {
    wrapper.classList.add('active');
    wrapper.querySelectorAll('label')[0].classList.add('active');
  };

  input.onblur = function () {
    wrapper.classList.remove('active');

    if (input.value === '') {
      wrapper.querySelectorAll('label')[0].classList.remove('active');
    }
  };

  const label = wrapper.querySelectorAll('label')[0];
  label.addEventListener('click', () => {
    input.focus();
  });
};

for (const inputWrapper of inputsWrapper) {
  inputWrapper.addEventListener('mouseover', function () {
    this.classList.add('hover');
  });
  inputWrapper.addEventListener('mouseout', function () {
    this.classList.remove('hover');
  });
  let textField = inputWrapper.querySelectorAll('input')[0];

  if (!textField) {
    textField = inputWrapper.querySelectorAll('textarea')[0];
  }

  if (!textField.classList.contains('hidden') && !inputWrapper.classList.contains('disabled')) {
    setInputEventListeners(textField);
  }
}

setEventsForSelects(); // session-color

const sessionColor = document.querySelectorAll('.session-color')[0];
const sessionColorMark = document.querySelectorAll('.session-color-mark')[0];
const sessionColorsWrapper = document.querySelectorAll('.session-colors-wrapper')[0];
const sessionColorOption = document.querySelectorAll('.session-color-option');
const sessionHighlightColorInput = document.querySelectorAll('#session-hightlight-color')[0];
sessionColor.addEventListener('click', e => {
  sessionColorsWrapper.classList.toggle('active');
});
let prevActiveMark;

for (const option of sessionColorOption) {
  option.addEventListener('click', function () {
    let color = this.getAttribute('data-color');
    sessionColorsWrapper.classList.remove('active');
    this.classList.add('active');

    if (prevActiveMark) {
      prevActiveMark.classList.remove('active');
    }

    sessionHighlightColorInput.value = color;

    if (color !== 'none') {
      sessionColor.classList.add('mark-active');
      sessionColorMark.style.backgroundColor = color;
    } else {
      sessionColor.classList.remove('mark-active');
    }

    prevActiveMark = this;
  });
}

const items = document.querySelectorAll('.item');

for (const item of items) {
  let checkbox = item.querySelectorAll('input')[0];
  checkbox.checked ? item.classList.add('active') : item.classList.remove('active');
  checkbox.addEventListener('click', function (e) {
    e.target.checked ? item.classList.add('active') : item.classList.remove('active');
  });
}

const filesStore = new ClipboardEvent('').clipboardData || new DataTransfer();
const holder = document.getElementById('holder');
const resultWrapper = document.getElementsByClassName('result')[0];
const inputElement = document.getElementById('fileInput');

holder.ondragover = function () {
  this.className = 'hover';
  return false;
};

holder.ondragend = function () {
  this.className = '';
  return false;
};

holder.ondrop = function (e) {
  this.className = '';
  e.preventDefault();
  resultWrapper.innerHTML = '';

  for (let i = 0, len = e.dataTransfer.files.length; i < len; i++) filesStore.items.add(e.dataTransfer.files[i]);

  for (let i = 0, len = filesStore.files.length; i < len; i++) {
    let elem = document.createElement('div');
    let close = document.createElement('div');
    elem.classList.add('filewrapper');
    close.classList.add('close');
    close.addEventListener('click', () => {
      filesStore.items.remove(i);
      elem.remove();
      inputElement.files = filesStore.files;
    });
    elem.innerHTML = filesStore.files[i].name;
    elem.appendChild(close);
    resultWrapper.appendChild(elem);
  }

  inputElement.files = filesStore.files;
};

inputElement.addEventListener('change', handleFiles, false);

function handleFiles(e) {
  const fileList = this.files;
  e.preventDefault();
  resultWrapper.innerHTML = '';

  for (let i = 0, len = fileList.length; i < len; i++) filesStore.items.add(fileList[i]);

  for (let i = 0, len = filesStore.files.length; i < len; i++) {
    let elem = document.createElement('div');
    let close = document.createElement('div');
    elem.classList.add('filewrapper');
    close.classList.add('close');
    close.addEventListener('click', () => {
      filesStore.items.remove(i);
      elem.remove();
      inputElement.files = filesStore.files;
    });
    elem.innerHTML = filesStore.files[i].name;
    elem.appendChild(close);
    resultWrapper.appendChild(elem);
  }

  inputElement.files = filesStore.files;
}

const tabsManager = document.getElementsByClassName('tabs_manager');

for (const singleTabsManager of tabsManager) {
  for (const tabsManagerLink of singleTabsManager.querySelectorAll('span')) {
    tabsManagerLink.addEventListener('click', function () {
      for (const tabsManagerLink1 of singleTabsManager.querySelectorAll('span')) {
        tabsManagerLink1.classList.remove('active');
      }

      tabsManagerLink.classList.add('active');
      let indexData = tabsManagerLink.getAttribute('data-index');

      for (const main of tabsManagerLink.closest('.mw').querySelectorAll('main')) {
        main.classList.contains('active') ? main.classList.remove('active') : null;
        main.getAttribute('data-index') === indexData ? main.classList.add('active') : null;
      }

      for (const footer of tabsManagerLink.closest('.mw').querySelectorAll('footer')) {
        footer.classList.contains('active') ? footer.classList.remove('active') : null;
        footer.getAttribute('data-index') === indexData ? footer.classList.add('active') : null;
      }
    });
  }
}

const btnsWrapper = document.querySelectorAll('.btns-wrapper--js');

for (const btnWrapper of btnsWrapper) {
  const btns = btnWrapper.querySelectorAll('.btn');

  for (const btn of btns) {
    btn.addEventListener('click', () => {
      for (const btn0 of btns) btn !== btn0 ? btn0.classList.remove('active') : btn.classList.add('active');
    });
  }
}

const windows = document.querySelectorAll('.mw');

for (const singleWindow of windows) {
  singleWindow.querySelectorAll('.close')[0].addEventListener('click', () => {
    singleWindow.classList.remove('active');
  });
}

const sessionName = document.getElementById('session_name');
document.querySelectorAll('.rename')[0].addEventListener('click', () => {
  sessionName.removeAttribute('disabled');
  setInputEventListeners(sessionName);
  sessionName.focus();
});
sessionName.addEventListener('blur', () => {
  sessionName.setAttribute('disabled', 'true');
});
document.querySelectorAll('.clone')[0].addEventListener('click', () => {
  document.querySelectorAll('.clone--success')[0].classList.add('active');
  document.querySelectorAll('#session_name')[0].select();
  document.execCommand('copy');
  setTimeout(() => {
    document.querySelectorAll('.clone--success')[0].classList.remove('active');
  }, 3000);
});

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (class {
  constructor() {
    this.init();
  }

  init() {
    const proxyWrapper = document.querySelectorAll('.mw__proxy_manager')[0];
    const proxyWrapperTable = proxyWrapper.querySelectorAll('.flexible_table')[0];
    const theadCheckbox = proxyWrapperTable.querySelectorAll('.thead-checkbox input[type=checkbox]')[0];
    const proxySearch = document.querySelectorAll('.mw__proxy_manager .search input')[0];
    let proxySearchData = [];
    let proxyData = [{
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 123,
      'state': {
        'checked': false,
        'check': 'success',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'User',
      'proxyPassword': '123456',
      'dns': '46.34.117.152',
      'id': 124,
      'state': {
        'checked': false,
        'check': 'error',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Minute',
      'proxyPassword': '123456',
      'dns': '46.34.117.152',
      'id': 125,
      'state': {
        'checked': false,
        'check': 'error',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 126,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 128,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 130,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 140,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }, {
      'type': 'Socks5',
      'connectionIp': '46.34.117.152',
      'proxyIp': '46.34.117.152',
      'proxyPort': 4299,
      'proxyLogin': 'Admin',
      'proxyPassword': 'AspSFdfm',
      'dns': '46.34.117.152',
      'id': 165,
      'state': {
        'checked': false,
        'check': 'not checked',
        'set': true
      }
    }]; // DataWorkers

    const createProxy = data => {
      proxyData.splice(proxyData.length, 0, {
        'type': data[0],
        'connectionIp': data[1],
        'proxyIp': data[2],
        'proxyPort': data[3],
        'proxyLogin': data[4],
        'proxyPassword': data[5],
        'dns': data[6],
        'id': +new Date(),
        'state': {
          'checked': false,
          'check': 'not checked',
          'set': true
        }
      });
      rerenderProxyItems(proxyData);
    };

    const changeProxyDataById = (id, key, value) => {
      proxyData = [...proxyData].map(i => {
        if (parseInt(i.id) === parseInt(id)) {
          i[key] = value;
        }

        return i;
      });
    }; // BUTTONS ============================================


    const closeProxyBtn = proxyWrapper.querySelectorAll('.proxy-close')[0];
    const addProxyBtn = proxyWrapper.querySelectorAll('.proxy-add')[0];
    const addFromFileProxyBtn = proxyWrapper.querySelectorAll('.proxy-addFromFile')[0];
    const deleteProxyBtn = proxyWrapper.querySelectorAll('.proxy-delete')[0];
    const checkProxyBtn = proxyWrapper.querySelectorAll('.proxy-check')[0];
    const saveProxyBtn = proxyWrapper.querySelectorAll('.proxy-save')[0];
    addProxyBtn.addEventListener('click', () => {
      createProxy(['Not selected', '', '', '', '', '', '']);
    });
    closeProxyBtn.addEventListener('click', () => {
      proxyWrapper.classList.remove('active');
    });
    saveProxyBtn.addEventListener('click', () => {
      if (!saveProxyBtn.classList.contains('btn--disabled')) {
        proxyWrapper.classList.remove('active');
      }
    });
    checkProxyBtn.addEventListener('click', () => {
      if (!checkProxyBtn.classList.contains('btn--disabled')) {
        proxyData.map(i => {
          if (i.state.checked) {
            i.state.checked = false;
            i.state.check = 'success';
          }
        });
        theadCheckbox.checked = false;
        saveProxyBtn.classList.remove('btn--disabled');
        saveProxyBtn.classList.add('btn--green');
        rerenderProxyItems(proxyData);
      }
    });
    deleteProxyBtn.addEventListener('click', () => {
      let i = 0;
      let checkboxArray = [];

      for (const checkbox of proxyWrapper.querySelectorAll('.flexible_table .column_body input[type=checkbox]')) {
        checkboxArray.push(checkbox.checked);
      }

      let checkboxIndex = 0;
      let checkboxecondIndex = 0;

      for (const checkbox of checkboxArray) {
        if (checkbox) {
          proxyData.splice(checkboxecondIndex - checkboxIndex, 1);
          checkboxIndex++;
        } else {}

        checkboxecondIndex++;
      }

      theadCheckbox.checked = false;
      rerenderProxyItems(proxyData);
    }); // del by id !!!!!!!!!!!!!

    const showBtns = () => {
      deleteProxyBtn.classList.remove('btn--disabled');
      deleteProxyBtn.classList.add('btn--red');
      checkProxyBtn.classList.remove('btn--disabled');
      checkProxyBtn.classList.add('btn--blue');
    };

    const hideBtns = () => {
      deleteProxyBtn.classList.remove('btn--red');
      deleteProxyBtn.classList.add('btn--disabled');
      checkProxyBtn.classList.remove('btn--blue');
      checkProxyBtn.classList.add('btn--disabled');
    };

    const refreshButtonsState = () => {
      let active = false;
      proxyData.map(i => {
        if (i.state.checked) {
          active = true;
          showBtns();
        }
      });
    };

    const inputElement = document.getElementById('proxyfileInput'); // Add File button

    inputElement.addEventListener('change', handleFiles, false);

    function handleFiles(e) {
      const fileList = event.target.files;
      e.preventDefault();

      for (let i = 0; i < fileList.length; i++) {
        (function (file) {
          let reader = new FileReader();
          reader.addEventListener('load', function (e) {
            let text = e.target.result;
            createProxy(text.split(';'));
          });
          reader.readAsText(file);
        })(fileList[i]);
      }
    } // Checkboxes


    const initCheckboxes = () => {
      const checkboxes = proxyWrapperTable.querySelectorAll('.column_body')[0].querySelectorAll('input[type=checkbox]');

      for (const checkbox of checkboxes) {
        checkbox.addEventListener('change', e => {
          proxyData[+checkbox.getAttribute('data-row')].state.checked = e.target.checked;
          refreshButtonsState();
        });
      }
    }; // init main Checkbox


    theadCheckbox.addEventListener('change', function (e) {
      proxyData.map(i => {
        i.state.checked = e.target.checked;

        if (e.target.checked) {
          showBtns();
        } else {
          hideBtns();
        }
      });

      if (proxySearchData.length) {
        searchProxyData(proxySearch.value);
      } else {
        rerenderProxyItems(proxyData);
      }
    }); // init Selects

    const initEventsForSelects = () => {
      const selects = proxyWrapperTable.querySelectorAll('.select');

      for (const select of selects) {
        select.addEventListener('click', function (e) {
          if (select.classList.contains('active')) {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }
          } else {
            for (const select of selects) {
              select.querySelectorAll('ul')[0].style.display = 'none';
              select.classList.remove('active');
            }

            console.log('else');

            if (!e.target.classList.contains('.input-option')) {
              select.classList.add('active');
              select.querySelectorAll('ul')[0].style.display = 'block';
            }
          }
        });
      }

      const selectOptions = proxyWrapperTable.querySelectorAll('li.input-option');

      for (const option of selectOptions) {
        option.addEventListener('click', function () {
          if (!option.closest('.select').classList.contains('disabled')) {
            let livalue = option.getAttribute('data-value');
            let lihtml = option.innerHTML;
            option.closest('.select').querySelectorAll('.textfirst')[0].innerHTML = lihtml;
            option.closest('.select').querySelectorAll('.option').value = livalue;
          }
        });
      }

      document.addEventListener('click', e => {
        if (!e.target.classList.contains('textfirst') && !e.target.classList.contains('input-option')) {
          for (const select of selects) {
            select.querySelectorAll('ul')[0].style.display = 'none';
            select.classList.remove('active');
          }
        }
      });
    }; // Flexible wrapper


    const makeFlexibleWidth = () => {
      for (const columnNav of proxyWrapperTable.querySelectorAll('.columnNav')) {
        let columnIndex = parseInt(columnNav.parentNode.getAttribute('data-column'));

        for (const flexibleWrapper of columnNav.parentNode.querySelectorAll('.flexible_wrapper')) {
          if (10 > columnIndex + 1) {
            flexibleWrapper.style.maxWidth = parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          } else if (10 === columnIndex + 1) {
            flexibleWrapper.style.maxWidth = 950 - parseInt(columnNav.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }
      }
    };

    const initRowsEvents = () => {
      let lastHoverElemId;
      let columnsBody = proxyWrapperTable.querySelectorAll('.column_body');

      for (const columnBody of columnsBody) {
        for (const child of columnBody.childNodes) {
          child.addEventListener('mouseover', () => {
            let row = proxyWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.add('hover');
            }
          });
          child.addEventListener('mouseout', () => {
            lastHoverElemId = child.getAttribute('data-id');
            let row = proxyWrapper.querySelectorAll('[data-id="' + child.getAttribute('data-id') + '"]');

            for (const rowElem of row) {
              rowElem.classList.remove('hover');
            }
          });
        }
      }
    };

    const initEventsForCheckStatus = () => {
      let checkItems = proxyWrapper.querySelectorAll('.check_status');

      for (const wrapper of checkItems) {
        let recheck = wrapper.querySelectorAll('.recheck')[0];
        let status = wrapper.querySelectorAll('.status')[0];
        let preloader = wrapper.querySelectorAll('.preloader')[0];
        let id = wrapper.parentNode.getAttribute('data-id');
        recheck.addEventListener('click', () => {
          recheck.style.display = 'none';
          preloader.style.display = 'block';
          status.style.display = 'none';
          let proxyDataState;
          [...proxyData].map(i => {
            if (parseInt(i.id) === parseInt(id)) {
              proxyDataState = i.state;
            }
          });
          proxyDataState.check = 'success';
          status.parentNode.setAttribute('data-status', 'success');
          changeProxyDataById(id, 'state', proxyDataState);
          setTimeout(() => {
            preloader.style.display = 'none';
            status.style.display = 'block'; //recheck.style.display = 'block'
          }, 3000);
        });
      }
    }; // RERENDER ============================================


    const rerenderProxyItems = (data = proxyData) => {
      let columns = proxyWrapperTable.querySelectorAll('.column');
      let x = 0;

      for (const column of columns) {
        column.querySelectorAll('.column_body')[0].innerHTML = '';
      }

      let i = 0;

      for (const proxyRow of data) {
        let colCounter = 0;

        for (const column of columns) {
          if (colCounter === 0) {
            let checked = proxyRow.state.checked ? 'checked' : '';
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div data-id="' + proxyRow.id + '"><label class="checkbox-container"><input type="checkbox" data-row="' + i + '" ' + checked + '/><span class="checkmark"></span></label></div>');
          } else if (colCounter === 1) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="select"><div class="mm-dropdown dropdown--port"><div class="textfirst">' + proxyRow[Object.keys(proxyRow)[colCounter - 1]] + '</div><ul>  <li class="input-option" data-value="Tor">Tor</li><li class="input-option" data-value="Http">Http</li><li class="input-option" data-value="Socks5">Socks5</li><li class="input-option" data-value="Dynamic socks5">Dynamic socks5</li><li class="input-option" data-value="SSH Tunnel">SSH Tunnel</li><li class="input-option" data-value="Tor + SSH Tunnel">Tor + SSH Tunnel</li><li class="input-option" data-value="SSH + Socks5">SSH + Socks5</li></ul><input type="hidden" class="option" name="port" id="port" value=""/></div></div></div>');
          } else if (colCounter === 8) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="check_status" data-status="' + proxyRow.state.check + '"><div class="status"></div><div class="preloader"></div><div class="recheck"></div></div></div>');
          } else if (colCounter === 9) {
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].insertAdjacentHTML('beforeend', '<div class="flexible_wrapper" data-id="' + proxyRow.id + '"><div class="set_status" data-status="' + proxyRow.state.set + '"><div class="status"></div><div class="setbtn"></div></div></div>');
          } else {
            let colData = proxyRow[Object.keys(proxyRow)[colCounter - 1]].toString();

            if (proxySearch.value !== 0) {
              colData = colData.replace(new RegExp(proxySearch.value, 'i'), "<span class='marker'>" + proxySearch.value + "</span>");
            }

            const divWrapper = document.createElement("DIV");
            divWrapper.classList.add('flexible_wrapper');
            divWrapper.setAttribute("data-id", proxyRow.id);
            const x = document.createElement("INPUT");
            x.setAttribute("type", "text");
            x.setAttribute("value", proxyRow[Object.keys(proxyRow)[colCounter - 1]]);
            let colDuplicator = colCounter - 1;
            let activeWrapper = true;
            divWrapper.addEventListener('click', e => {
              if (activeWrapper) {
                divWrapper.innerHTML = '';
                divWrapper.classList.remove('wrapper_withoutinput');
                divWrapper.appendChild(x);
                activeWrapper = false;
                x.focus();
              }
            });
            x.addEventListener('blur', e => {
              divWrapper.innerHTML = e.target.value;
              divWrapper.classList.add('wrapper_withoutinput');
              activeWrapper = true;
              changeProxyDataById(proxyRow.id, Object.keys(proxyRow)[colDuplicator], e.target.value);
            });
            divWrapper.innerHTML = colData;
            divWrapper.classList.add('wrapper_withoutinput');
            proxyWrapperTable.querySelectorAll('.column_body')[colCounter].appendChild(divWrapper);
          }

          colCounter++;
        }

        i++;
      }

      proxyWrapperTable.style.height = data.length * 40 + 200 + 'px';
      initCheckboxes();
      initEventsForSelects();
      initEventsForCheckStatus();
      makeFlexibleWidth();
      initRowsEvents();
    };

    rerenderProxyItems();
    initEventsForSelects();
    makeFlexibleWidth();
    initRowsEvents();
    initEventsForCheckStatus(); // SEARCH ======================================

    proxySearch.addEventListener('keyup', e => {
      searchProxyData(e.target.value);
    });

    const searchProxyData = value => {
      let vals1;
      let vals2;
      let proxySearchData1 = [];
      let proxySearchData2 = [];
      let arrayOfvaluesId = [];
      let dataClone1 = [...proxyData].map(x => {
        let isSearchTrueForThisElem = false;
        vals1 = Object.values(x).some((item, i) => {
          if (typeof item !== 'object') {
            if (item.toString().toLowerCase().startsWith(value.toLowerCase()) && !isSearchTrueForThisElem) {
              isSearchTrueForThisElem = true;
              arrayOfvaluesId.push(x.id);
              proxySearchData1.push(x);
            }
          }
        });
      });
      let dataClone2 = [...proxyData].map(x => {
        if (arrayOfvaluesId.filter(i => i === x.id).length === 0) {
          let isSearchTrueForThisElem = false;
          vals2 = Object.values(x).some((item, i) => {
            if (typeof item !== 'object') {
              if (item.toString().toLowerCase().includes(value.toLowerCase()) && !isSearchTrueForThisElem) {
                isSearchTrueForThisElem = true;
                proxySearchData2.push(x);
              }
            }
          });
        }
      });
      rerenderProxyItems([...proxySearchData1, ...proxySearchData2]);
    }; // CHECKBOX =====================================

  }

});
;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (class {
  constructor() {
    console.log('Table Worker has start');
    this.init();
  }

  init() {
    for (const nav of document.querySelectorAll('.columnNav')) {
      dragElement(nav);
    }

    function dragElement(elmnt) {
      var pos1 = 0,
          pos3 = 0;

      if (document.getElementById(elmnt.id + 'header')) {
        /* if present, the header is where you move the DIV from: */
        document.getElementById(elmnt.id + 'header').onmousedown = dragMouseDown;
      } else {
        /* otherwise, move the DIV from anywhere inside the DIV: */
        elmnt.onmousedown = dragMouseDown;
      }

      let initialPos = 0;

      function dragMouseDown(e) {
        e = e || window.event;
        e.preventDefault(); // get the mouse cursor position at startup:

        pos3 = e.clientX;
        document.onmouseup = closeDragElement; // call a function whenever the cursor moves:

        document.onmousedown = e => {
          initialPos = e.clientX;
        };

        document.onmousemove = elementDrag;
      }

      function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();

        const getRightOffset = (index, wrapper) => {
          return wrapper.children.length - parseInt(index);
        };

        let columnIndex = parseInt(elmnt.parentNode.getAttribute('data-column'));
        let stopLeftPosition = 50 * parseInt(columnIndex);
        let stopRightPosition = getRightOffset(columnIndex, elmnt.parentNode.parentNode) * 50;
        pos1 = e.clientX - 15;

        if (e.clientX - 15 < stopLeftPosition) {
          pos1 = stopLeftPosition;
        } else if (e.clientX - 15 > 950 - stopRightPosition) {
          pos1 = 950 - stopRightPosition;
        }

        elmnt.parentNode.style.left = pos1 + 'px';

        if (elmnt.parentNode.parentNode.children.length > columnIndex + 1) {
          for (const wrapper of elmnt.parentNode.querySelectorAll('.flexible_wrapper')) {
            wrapper.style.maxWidth = parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex + 1].style.left) - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        } else {
          for (const wrapper of elmnt.parentNode.querySelectorAll('.flexible_wrapper')) {
            wrapper.style.maxWidth = 950 - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) + 'px';
          }
        }

        for (const wrapper of elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1].querySelectorAll('.flexible_wrapper')) {
          //console.log(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1]);
          wrapper.style.maxWidth = parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex].style.left) - parseInt(elmnt.parentNode.parentNode.querySelectorAll('.column')[columnIndex - 1].style.left) + 'px';
        }
      }

      function closeDragElement() {
        /* stop moving when mouse button is released: */
        document.onmouseup = null;
        document.onmousemove = null;
      }
    }
  }

});
;

/***/ })
/******/ ]);
//# sourceMappingURL=mw-session-setup.min.js.map