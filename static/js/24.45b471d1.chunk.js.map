{"version":3,"sources":["components/MobileComponents/Licenses/Generate/CorporateGenerate.jsx"],"names":["connect","state","generateData","corporateLicenseGenerate","generate","dispatch","setNewValueForStoreItem","item","itemValue","id","createItem","object","deleteItem","props","className","store","map","itemData","fullWidth","value","login","onChange","e","target","ticketID","variant","disabled","password","nickname","telegram","comment","getRowItem"],"mappings":"uHAAA,uFAoIeA,uBAXS,SAACC,GAAD,MAAY,CAChCC,aAAcD,EAAME,yBAAyBC,aAGtB,SAACC,GACxB,MAAO,CACHC,wBAAyB,SAACC,EAAMC,EAAWC,GAAlB,OAAyBJ,EAASC,YAAwBC,EAAMC,EAAWC,KACpGC,WAAY,SAACC,GAAD,OAAYN,EAASK,YAAWC,KAC5CC,WAAY,SAACH,GAAD,OAAQJ,EAASO,YAAWH,QAGjCT,EAhHW,SAACa,GAmFvB,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,iCACX,uBAAGA,UAAU,eAAb,gJAEA,0BAAMA,UAAU,uBAAhB,SAGJ,yBAAKA,UAAU,0BACdD,EAAMX,aAAaa,MAAMC,KAAI,SAAAC,GAC1B,OAxEO,SAACA,GAEhB,OAAQ,yBAAKH,UAAU,gBACf,0BAAMA,UAAU,cAAhB,SACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAO,KAAOF,EAASG,MACvBC,SAAU,SAACC,GACPT,EAAMP,wBAAwB,QAASgB,EAAEC,OAAOJ,MAAOF,EAASO,WAEpEC,QAAQ,SACRC,UAAQ,IAGZ,0BAAMZ,UAAU,cAAhB,YACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASU,SAChBN,SAAU,SAACC,GACPT,EAAMP,wBAAwB,WAAYgB,EAAEC,OAAOJ,MAAOF,EAASO,WAEvEC,QAAQ,WAGZ,0BAAMX,UAAU,cAAhB,YACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASW,SAChBP,SAAU,SAACC,GACPT,EAAMP,wBAAwB,WAAYgB,EAAEC,OAAOJ,MAAOF,EAASO,WAEvEC,QAAQ,WAGZ,0BAAMX,UAAU,cAAhB,YACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASY,SAChBR,SAAU,SAACC,GACPT,EAAMP,wBAAwB,WAAYgB,EAAEC,OAAOJ,MAAOF,EAASO,WAEvEC,QAAQ,WAGZ,0BAAMX,UAAU,cAAhB,WACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASa,QAChBT,SAAU,SAACC,GACPT,EAAMP,wBAAwB,UAAWgB,EAAEC,OAAOJ,MAAOF,EAASO,WAEtEC,QAAQ,WAGZ,kBAAC,IAAD,CAAQA,QAAQ,YAAYX,UAAU,sBAAtC,YAkBOiB,CAAWd","file":"static/js/24.45b471d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {connect} from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {IconPack} from \"../../../../Images/IconPack\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport {\r\n    setNewValueForStoreItem,\r\n    createItem,\r\n    deleteItem\r\n} from \"../../../../redux/licenses/corporate/generate/generate.actions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\n\r\nconst CorporateGenerate = (props) => {\r\n\r\n\r\n    const addHandler = () => {\r\n        const reducerStore = props.generateData.store;\r\n        const reducerDefData = props.generateData.defValues;\r\n        let ticketID = +new Date();\r\n\r\n\r\n        let newObject = {\r\n            login: reducerStore[reducerStore.length - 1].login + 1,\r\n            password: reducerDefData.password,\r\n            nickname: reducerDefData.nickname,\r\n            telegram: reducerDefData.telegram,\r\n            comment: reducerDefData.comment,\r\n            ticketID: ticketID,\r\n        };\r\n\r\n        props.createItem(newObject);\r\n    }\r\n\r\n    const getRowItem = (itemData) => {\r\n\r\n        return (<div className=\"generateCard\">\r\n                <span className=\"color-grey\">Login</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={'CU' + itemData.login}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('login', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                    disabled\r\n                />\r\n\r\n                <span className=\"color-grey\">Password</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.password}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('password', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <span className=\"color-grey\">Nickname</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.nickname}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('nickname', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <span className=\"color-grey\">Telegram</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.telegram}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('telegram', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <span className=\"color-grey\">Comment</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.comment}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('comment', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <Button variant=\"contained\" className=\"btn btn--red mb-15\">\r\n                    Exclude\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n            <div className=\"alertPanel alertPanel--mobile\">\r\n                <p className=\"color-white\">Prepare accounts for their future owners. It is not necessary to write down\r\n                    the login and password at this stage, you can easily do it later</p>\r\n                <span className=\"btn-text color-blue\">MORE</span>\r\n            </div>\r\n\r\n            <div className=\"generateItems__wrapper\">\r\n            {props.generateData.store.map(itemData => {\r\n                return getRowItem(itemData);\r\n            })}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    generateData: state.corporateLicenseGenerate.generate,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setNewValueForStoreItem: (item, itemValue, id) => dispatch(setNewValueForStoreItem(item, itemValue, id)),\r\n        createItem: (object) => dispatch(createItem(object)),\r\n        deleteItem: (id) => dispatch(deleteItem(id)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CorporateGenerate);\r\n"],"sourceRoot":""}