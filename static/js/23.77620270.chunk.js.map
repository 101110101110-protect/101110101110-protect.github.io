{"version":3,"sources":["components/MobileComponents/Licenses/Cost/CorporateCost.jsx"],"names":["connect","state","costsData","corporateLicenseCosts","costs","props","React","useState","searchValue","setSearchValue","getDayRow","type","day","date","Date","month","getMonth","getDate","className","itemHTML","i","key","aria-controls","id","amount","IconPack","userIcons","forTable","user","costAction","description","costDetail","licenseIcons","cog","boughtLeft","searchedData","filter","toLowerCase","includes","map","msg","variant","fullWidth","placeholder","value","onChange","e","target","searchComponents","calendar","length"],"mappings":"wOA8KeA,uBALS,SAACC,GAAD,MAAY,CAChCC,UAAWD,EAAME,sBAAsBC,SAI5BJ,EA1JO,SAACK,GAAW,IAAD,EACSC,IAAMC,SAAS,IADxB,mBACtBC,EADsB,KACTC,EADS,OAESH,IAAMC,UAAS,GAFxB,mBAMvBG,GANuB,UAMX,SAACC,GACf,IAGIC,EAHAC,EAAO,IAAIC,KACXC,EAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAC5C,MAAO,MAAO,MAAO,MAAO,MAAO,OAAOF,EAAKG,YAEnD,OAAQL,GACJ,IAAK,QACDC,EAAMC,EAAKI,UACX,MACJ,IAAK,YACDL,EAAMC,EAAKI,UAAY,EAM/B,OAAQ,yBAAKC,UAAU,WACnB,uBAAGA,UAAU,eAAeP,GAC5B,0BAAMO,UAAU,qBAAqBN,EAArC,IAA2CG,MA4C7CI,EAAW,SAACC,EAAGC,GACjB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,gBAAe,QAAQD,EAAI,YAC3BE,GAAI,QAAQF,EAAI,YAEhB,0BAAMH,UAAU,wBAAhB,IAAyCE,EAAEI,QAAc,0BAAMN,UAAU,gDAAgDO,IAASC,UAAUC,SAAnF,IAA8FP,EAAEQ,OAE7J,kBAAC,IAAD,KACI,0BAAMV,UAAU,8BAAhB,eACCE,EAAES,WAEH,0BAAMX,UAAU,8BAAhB,eACCE,EAAEU,YAEH,0BAAMZ,UAAU,8BAAhB,eACCE,EAAEW,WAAW,GACd,0BAAMb,UAAU,iDAAiDO,IAASO,aAAaC,IAAvF,IAA6Fb,EAAEW,WAAW,IAE1G,0BAAMb,UAAU,8BAAhB,eACCE,EAAEc,WAEH,0BAAMhB,UAAU,8BAAhB,QAdJ,sBAyBRiB,EAAe9B,EAAMH,UAAUkC,QAAO,SAAAhB,GAEtC,GAAIA,EAAEQ,KAAKS,cAAcC,SAAS9B,EAAY6B,gBAC1CjB,EAAES,WAAWQ,cAAcC,SAAS9B,EAAY6B,gBAChDjB,EAAEW,WAAW,GAAGM,cAAcC,SAAS9B,EAAY6B,gBACnDjB,EAAEW,WAAW,GAAGM,cAAcC,SAAS9B,EAAY6B,gBACnDjB,EAAEc,WAAWG,cAAcC,SAAS9B,EAAY6B,eAEhD,OAAOjB,KAYf,OAPAe,EAAeA,EAAaI,KAAI,SAACnB,EAAGC,GAEhC,OAAOF,EAASC,EAAGC,MAMnB,yBAAKH,UAAU,oBACX,yBAAKA,UAAU,oCAEX,kBAAC,IAAD,CAAmBK,GAAG,uBACjB,SAACiB,GAAD,OAAW,kBAAC,IAAD,CACRC,QAAQ,SACRC,WAAS,EACTxB,UAAU,cACVyB,YAAaH,EACbI,MAAOpC,EACPqC,SAAU,SAACC,GAAKrC,EAAeqC,EAAEC,OAAOH,aAKhD,yBAAK1B,UAAU,gCACX,yBAAKA,UAAU,YAAYO,IAASuB,iBAAiBC,YAI1DzC,EAAY0C,OAASf,EAhHhB,oCACHzB,EAAU,SACX,yBAAKQ,UAAU,2BAAf,iBAECb,EAAMH,UAAUqC,KAAI,SAACnB,EAAGC,GACrB,OAAOF,EAASC,EAAGC,MAGtBX,EAAU,aAEVL,EAAMH,UAAUqC,KAAI,SAACnB,EAAGC,GACrB,OAAOF,EAASC,EAAGC","file":"static/js/23.77620270.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {connect} from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {IconPack} from \"../../../../Images/IconPack\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\n\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\n\r\n\r\nconst CorporateCost = (props) => {\r\n    const [searchValue, setSearchValue] = React.useState('');\r\n    const [dateReverse, setDateReverse] = React.useState(false);\r\n\r\n\r\n\r\n    const getDayRow = (type) => {\r\n        let date = new Date();\r\n        var month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][date.getMonth()];\r\n        let day;\r\n        switch (type) {\r\n            case 'Today':\r\n                day = date.getDate();\r\n                break;\r\n            case 'Yesterday':\r\n                day = date.getDate() - 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (<div className=\"day-row\">\r\n            <b className=\"color-white\">{type}</b>\r\n            <span className=\"color-grey inline\">{day} {month}</span>\r\n        </div>);\r\n    }\r\n\r\n\r\n    const getTbodyData = () => {\r\n\r\n            return (<>\r\n                {getDayRow('Today')}\r\n                <div className=\"tabsContentHeader mb-10\">Amount / User</div>\r\n\r\n                {props.costsData.map((i, key) => {\r\n                    return itemHTML(i, key);\r\n                })}\r\n\r\n                {getDayRow('Yesterday')}\r\n\r\n                {props.costsData.map((i, key) => {\r\n                    return itemHTML(i, key);\r\n                })}\r\n\r\n            </>);\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    const prepearAmount = (amount, type) => {\r\n        switch (type) {\r\n            case 'loss':\r\n                return (\r\n                    <span className=\"red\">{amount}</span>)\r\n                break;\r\n            case 'profit':\r\n                return (<span className=\"green\">{amount}</span>)\r\n                break;\r\n            default:\r\n                return amount\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    const itemHTML = (i, key) => {\r\n        return  (\r\n            <Accordion >\r\n                <AccordionSummary\r\n                    aria-controls={\"panel\"+key+\"a-content\"}\r\n                    id={\"panel\"+key+\"a-header\"}\r\n                >\r\n                    <span className=\"color-red mr-10 bold\">${i.amount}</span><span className=\"bold icon-inside align-items-baseline inline\">{IconPack.userIcons.forTable} {i.user}</span>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <span className=\"accordion-data-description\">Cost action</span>\r\n                    {i.costAction}\r\n\r\n                    <span className=\"accordion-data-description\">Description</span>\r\n                    {i.description}\r\n\r\n                    <span className=\"accordion-data-description\">Cost detail</span>\r\n                    {i.costDetail[0]}\r\n                    <span className=\"ml-10 icon-inside inline align-items-baseline\">{IconPack.licenseIcons.cog} {i.costDetail[1]}</span>\r\n\r\n                    <span className=\"accordion-data-description\">Bought left</span>\r\n                    {i.boughtLeft}\r\n\r\n                    <span className=\"accordion-data-description\">Date</span>\r\n                    13 Feb, 11:10:22\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n    let searchedData = props.costsData.filter(i => {\r\n\r\n        if (i.user.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.costAction.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.costDetail[0].toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.costDetail[1].toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.boughtLeft.toLowerCase().includes(searchValue.toLowerCase())\r\n          ) {\r\n            return i\r\n        }\r\n\r\n    })\r\n\r\n    searchedData = searchedData.map((i, key) => {\r\n\r\n        return itemHTML(i, key);\r\n    });\r\n\r\n\r\n    /* active */\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n            <div className=\"filterPanel filterPanel--mobile \">\r\n\r\n                <FormattedMessage  id='filterPanel.search'>\r\n                    {(msg) => ( <TextField\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        className=\"search_area\"\r\n                        placeholder={msg}\r\n                        value={searchValue}\r\n                        onChange={(e)=>{setSearchValue(e.target.value)}}\r\n                    >\r\n                    </TextField>)}\r\n                </FormattedMessage>\r\n\r\n                <div className=\"search_additional_components\">\r\n                    <div className=\"calendar\">{IconPack.searchComponents.calendar}</div>\r\n                </div>\r\n            </div>\r\n\r\n              {searchValue.length ? searchedData : getTbodyData() }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    costsData: state.corporateLicenseCosts.costs,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(CorporateCost);"],"sourceRoot":""}