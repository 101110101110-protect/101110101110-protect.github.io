{"version":3,"sources":["redux/app/app.actions.js","components/AuthWindows/LangDropdown/LangDropdown.jsx","components/AuthWindows/AuthWindow.jsx"],"names":["setCurrentLanguage","lang","type","appTypes","SET_CURRENT_LANGUAGE","payload","setLanguageModal","bool","SET_LANGUAGE_MODAL","setAuthLanguageModal","SET_AUTH_LANGUAGE_MODAL","setChatState","SET_CHAT_STATE","setChatId","SET_CHAT_ID","setAccessRightsModal","obj","SET_ACCESS_RIGHTS_MODAL","setAccessRightsForOneUserModal","SET_ACCESS_RIGHTS_FOR_ONE_USER_MODAL","setBuyPLicenseModal","SET_BUY_P_LICENSE_MODAL","setBuyCLicenseModal","SET_BUY_C_LICENSE_MODAL","setRefillBalanceModal","SET_REFILL_BALANCE_MODAL","setRefillLicenseModal","SET_REFILL_LICENSE_MODAL","setLicenseDaysSettingsModal","SET_LICENSE_DAYS_SETTINGS_MODAL","setChangeEmailModal","SET_CHANGE_EMAIL_MODAL","setChangePasswordlModal","SET_CHANGE_PASSWORD_MODAL","setChangeTelegramModal","SET_CHANGE_TELEGRAM_MODAL","setAutoRenewalModal","SET_AUTO_RENEWAL_MODAL","setMigrationModal","SET_MIGRATION_MODAL","setAuthorizationDataModal","SET_AUTHORIZATION_DATA_MODAL","setAuthorizationDataForOneUserModal","SET_AUTHORIZATION_DATA_FOR_ONE_USER_MODAL","setChangeDealModal","SET_CHANGE_DEAL_MODAL","setNewEmailAuthModal","SET_NEW_EMAIL_AUTHMODAL","setChangePasswordAuthModal","SET_CHANGE_PASSWORD_AUTHMODAL","setResetPassAuthModal","SET_RESET_PASS_AUTHMODAL","setSignInAuthModal","SET_SIGNIN_AUTHMODAL","setSignUpAuthModal","SET_SIGNUP_AUTHMODAL","connect","state","appState","appOptions","dispatch","val","props","currentLang","appLanguage","currentAppLanguage","langListClone","languagesInterface","component","langListContent","map","item","current","value","key","title","toString","onClick","e","newLangVal","className","src","icon","alt","find","langObj","modals","authLanguageDropdown"],"mappings":"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","file":"static/js/14.c58231d1.chunk.js","sourcesContent":["import { appTypes} from './app.types'\r\nimport {usersTypes} from \"../licenses/corporate/users/users.types\";\r\n\r\nexport const setCurrentLanguage = lang => ({\r\n  type: appTypes.SET_CURRENT_LANGUAGE,\r\n  payload: lang\r\n});\r\n\r\nexport const setDashboard = bool => ({\r\n  type: appTypes.SET_DASHBOARD,\r\n  payload: bool\r\n});\r\n\r\nexport const setLanguageModal = bool => ({\r\n  type: appTypes.SET_LANGUAGE_MODAL,\r\n  payload: bool\r\n});\r\n\r\nexport const setAuthLanguageModal = bool => ({\r\n  type: appTypes.SET_AUTH_LANGUAGE_MODAL,\r\n  payload: bool\r\n});\r\n\r\nexport const setChatState = bool => ({\r\n  type: appTypes.SET_CHAT_STATE,\r\n  payload: bool\r\n});\r\n\r\nexport const setChatId = bool => ({\r\n  type: appTypes.SET_CHAT_ID,\r\n  payload: bool\r\n});\r\n\r\nexport const setAccessRightsModal = obj => ({\r\n  type: appTypes.SET_ACCESS_RIGHTS_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setAccessRightsForOneUserModal = obj => ({\r\n  type: appTypes.SET_ACCESS_RIGHTS_FOR_ONE_USER_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setBuyPLicenseModal = bool => ({\r\n  type: appTypes.SET_BUY_P_LICENSE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setBuyCLicenseModal = bool => ({\r\n  type: appTypes.SET_BUY_C_LICENSE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setRefillBalanceModal = bool => ({\r\n  type: appTypes.SET_REFILL_BALANCE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setRefillLicenseModal = bool => ({\r\n  type: appTypes.SET_REFILL_LICENSE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setLicenseDaysSettingsModal = obj => ({\r\n  type: appTypes.SET_LICENSE_DAYS_SETTINGS_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setChangeEmailModal = bool => ({\r\n  type: appTypes.SET_CHANGE_EMAIL_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setChangePasswordlModal = bool => ({\r\n  type: appTypes.SET_CHANGE_PASSWORD_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setChangeTelegramModal = bool => ({\r\n  type: appTypes.SET_CHANGE_TELEGRAM_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setAutoRenewalModal = bool => ({\r\n  type: appTypes.SET_AUTO_RENEWAL_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setMigrationModal = bool => ({\r\n  type: appTypes.SET_MIGRATION_MODAL,\r\n  payload: bool\r\n})\r\n\r\n\r\nexport const setAuthorizationDataModal =  obj  => ({\r\n  type: appTypes.SET_AUTHORIZATION_DATA_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setAuthorizationDataForOneUserModal =  obj  => ({\r\n  type: appTypes.SET_AUTHORIZATION_DATA_FOR_ONE_USER_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setChangeDealModal =  obj  => ({\r\n  type: appTypes.SET_CHANGE_DEAL_MODAL,\r\n  payload: obj\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const setNewEmailAuthModal = bool => ({\r\n  type: appTypes.SET_NEW_EMAIL_AUTHMODAL,\r\n  payload: bool\r\n})\r\nexport const setChangePasswordAuthModal = bool => ({\r\n  type: appTypes.SET_CHANGE_PASSWORD_AUTHMODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setResetPassAuthModal = bool => ({\r\n  type: appTypes.SET_RESET_PASS_AUTHMODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setSignInAuthModal = bool => ({\r\n  type: appTypes.SET_SIGNIN_AUTHMODAL,\r\n  payload: bool\r\n})\r\nexport const setSignUpAuthModal = bool => ({\r\n  type: appTypes.SET_SIGNUP_AUTHMODAL,\r\n  payload: bool\r\n})","import React, {Fragment} from 'react';\r\nimport {setCurrentLanguage, setAuthLanguageModal} from \"../../../redux/app/app.actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst LangDropdown = (props) => {\r\n    let currentLang = props.appState.appLanguage.currentAppLanguage;\r\n    let langListClone = [...props.appState.appLanguage.languagesInterface];\r\n    let component = null;\r\n\r\n    const clickHandler = ( newLangVal ,e ) => {\r\n\r\n        props.setCurrentLanguage(newLangVal);\r\n        props.setAuthLanguageModal(false);\r\n\r\n\r\n    };\r\n\r\n    let langListContent = langListClone.map((item)=>{\r\n        let current = '';\r\n        if(item.value === currentLang){\r\n            current = 'currentLang';\r\n        }\r\n        return (<div key={item.title.toString()} onClick={(e)=> { clickHandler(item.value, e) }} className={current}><img src={item.icon} alt=\"\"/> {item.title}</div>)\r\n    });\r\n    let currentLangObj = langListClone.find((langObj) => {\r\n        return langObj.value === currentLang;\r\n    });\r\n\r\n\r\n\r\n    if(props.appState.modals.authLanguageDropdown) {\r\n        component = ( <div className=\"appLanguageDropdown\">\r\n            <div className=\"content\">\r\n                {langListContent}\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    return component;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrentLanguage: (val) => dispatch(setCurrentLanguage(val)),\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LangDropdown);","import React from 'react';\r\nimport {IconPack} from '../../Images/IconPack';\r\n\r\nimport LangDropdown from './LangDropdown/LangDropdown';\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {setAuthLanguageModal} from \"../../redux/app/app.actions\";\r\nimport './style.scss';\r\n\r\nconst AuthWindow = (props) => {\r\n\r\n    let modalWindow = null;\r\n\r\n    //        authModals: {\r\n    //             resetPass: false,\r\n    //             setNewEmail: false,\r\n    //             setNewPassword: false,\r\n    //             signIn: true,\r\n    //             signUp: false,\r\n    //         },\r\n\r\n\r\n\r\n    let currentLang = props.appState.appLanguage.currentAppLanguage;\r\n    let langListClone = [...props.appState.appLanguage.languagesInterface];\r\n\r\n\r\n    let langListContent = langListClone.map((item)=>{\r\n        let current = '';\r\n        if(item.value === currentLang){\r\n            current = 'currentLang';\r\n        }\r\n\r\n        return (<div key={item.toString()} className={current}><img src={item.icon} alt=\"\"/> {item.title}</div>)\r\n    });\r\n\r\n    let currentLangObj = langListClone.find((langObj) => {\r\n        return langObj.value === currentLang;\r\n    });\r\n\r\n    if(modalWindow) {\r\n       return (<div className=\"AuthWindow\">\r\n           <div className=\"logo\">\r\n               {IconPack.menuIcons.logo}\r\n           </div>\r\n           {modalWindow}\r\n           <div className=\"appLanguage appLanguage--auth\" onClick={() => {props.setAuthLanguageModal(true)}}>\r\n               <img src={currentLangObj.icon} alt=\"\"/>\r\n               {currentLangObj.value}\r\n           </div>\r\n           <LangDropdown />\r\n       </div>);\r\n    }else {\r\n        return null;\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthWindow);"],"sourceRoot":""}