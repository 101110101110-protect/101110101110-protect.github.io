{"version":3,"sources":["components/Licenses/Generate/CorporateGenerate.jsx"],"names":["connect","state","generateData","corporateLicenseGenerate","generate","dispatch","setNewValueForStoreItem","item","itemValue","id","createItem","object","deleteItem","props","getRowItem","itemData","className","fullWidth","value","login","onChange","e","target","ticketID","variant","disabled","password","nickname","telegram","comment","store","length","onClick","IconPack","buttons","minus","reducerStore","reducerDefData","defValues","Date","newObject","addHandler","plus","map"],"mappings":"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","file":"static/js/15.5a6e238d.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {connect} from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {IconPack} from \"../../../Images/IconPack\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport { setNewValueForStoreItem, createItem, deleteItem } from \"../../../redux/licenses/corporate/generate/generate.actions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n\r\nconst CorporateGenerate = (props) => {\r\n\r\n\r\n\r\n    const addHandler = () => {\r\n        const reducerStore =  props.generateData.store;\r\n        const reducerDefData =  props.generateData.defValues;\r\n        let ticketID = + new Date();\r\n\r\n\r\n        let newObject = {\r\n            login: reducerStore[reducerStore.length-1].login + 1,\r\n            password: reducerDefData.password,\r\n            nickname: reducerDefData.nickname,\r\n            telegram: reducerDefData.telegram,\r\n            comment: reducerDefData.comment,\r\n            ticketID: ticketID,\r\n        };\r\n\r\n        props.createItem(newObject);\r\n    }\r\n\r\n    const getRowItem = (itemData) => {\r\n\r\n        return (<TableRow className=\"inputs-row\">\r\n                <TableCell className=\"padding-sides-10 color-white\">\r\n                    <TextField\r\n                        fullWidth\r\n                        value={'CU' + itemData.login}\r\n                        onChange={(e)=> {props.setNewValueForStoreItem('login', e.target.value, itemData.ticketID)}}\r\n                        variant=\"filled\"\r\n                        disabled\r\n                    />\r\n                </TableCell>\r\n                <TableCell className=\"padding-sides-10 color-white\">\r\n                    <TextField\r\n                        fullWidth\r\n                        value={itemData.password}\r\n                        onChange={(e)=> {props.setNewValueForStoreItem('password', e.target.value, itemData.ticketID)}}\r\n                        variant=\"filled\"\r\n                    />\r\n                </TableCell>\r\n                <TableCell className=\"padding-sides-10 color-white\">\r\n                    <TextField\r\n                        fullWidth\r\n                        value={itemData.nickname}\r\n                        onChange={(e)=> {props.setNewValueForStoreItem('nickname', e.target.value, itemData.ticketID)}}\r\n                        variant=\"filled\"\r\n                    />\r\n                </TableCell>\r\n                <TableCell className=\"padding-sides-10 color-grey\">\r\n                    <TextField\r\n                        fullWidth\r\n                        value={itemData.telegram}\r\n                        onChange={(e)=> {props.setNewValueForStoreItem('telegram', e.target.value, itemData.ticketID)}}\r\n                        variant=\"filled\"\r\n                    />\r\n                </TableCell>\r\n                <TableCell className=\"padding-sides-10 color-grey\">\r\n                    <TextField\r\n                        fullWidth\r\n                        value={itemData.comment}\r\n                        onChange={(e)=> {props.setNewValueForStoreItem('comment', e.target.value, itemData.ticketID)}}\r\n                        variant=\"filled\"\r\n                        className=\"w80p\"\r\n                    />\r\n                    <div className=\"generateTable__btnsWrapper\">\r\n                        {props.generateData.store.length > 1 ? (<Button className=\"btn--table\" onClick={()=>{props.deleteItem(itemData.ticketID)}}>{IconPack.buttons.minus}</Button>) : null }\r\n                        <Button className=\"btn--table\" onClick={()=>{addHandler()}}>{IconPack.buttons.plus}</Button>\r\n                    </div>\r\n                </TableCell>\r\n            </TableRow>\r\n        );}\r\n\r\n\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n            <div className=\"alertPanel\">\r\n                <p className=\"color-white\">Prepare accounts for their future owners. It is not necessary to write down the login and password at this stage, you can easily do it later</p>\r\n                <span className=\"btn-text color-blue\">MORE</span>\r\n            </div>\r\n            <Table className=\"configTable\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className=\"padding-sides-20 \"><FormattedMessage id='table.login' /></TableCell>\r\n                        <TableCell className=\"padding-sides-10 \"><FormattedMessage id='table.password' /></TableCell>\r\n                        <TableCell className=\"padding-sides-10\"><FormattedMessage id='table.nickname' /></TableCell>\r\n                        <TableCell className=\"padding-sides-10\"><FormattedMessage id='table.telegram' /></TableCell>\r\n                        <TableCell className=\"padding-sides-10 w500\"><FormattedMessage id='table.commentRoleOrMore' /></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"no-hover\">\r\n                    {props.generateData.store.map(itemData => {\r\n                        return getRowItem(itemData);\r\n                    })}\r\n\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    generateData: state.corporateLicenseGenerate.generate,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setNewValueForStoreItem: (item, itemValue, id) => dispatch(setNewValueForStoreItem(item, itemValue, id)),\r\n        createItem: (object) => dispatch(createItem(object)),\r\n        deleteItem: ( id ) => dispatch(deleteItem( id )),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CorporateGenerate);\r\n"],"sourceRoot":""}