{"version":3,"sources":["components/MobileComponents/Licenses/Activity/CorporateActivity.jsx"],"names":["connect","state","activityData","corporateLicenseActivity","activity","props","React","useState","searchValue","setSearchValue","getDayRow","type","day","date","Date","month","getMonth","getDate","className","searchedData","filter","i","user","toLowerCase","includes","description","action","map","key","aria-controls","id","IconPack","userIcons","forTable","licenseIcons","mail","msg","variant","fullWidth","placeholder","value","onChange","e","target","searchComponents","calendar","length"],"mappings":"+NA0JeA,uBALS,SAACC,GAAD,MAAY,CAChCC,aAAcD,EAAME,yBAAyBC,YAIlCJ,EA5IW,SAACK,GAAW,IAAD,EACKC,IAAMC,SAAS,IADpB,mBAC1BC,EAD0B,KACbC,EADa,KAG3BC,EAAY,SAACC,GACf,IAGIC,EAHAC,EAAO,IAAIC,KACXC,EAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAC5C,MAAO,MAAO,MAAO,MAAO,MAAO,OAAOF,EAAKG,YAInD,OAAQL,GACJ,IAAK,QACDC,EAAMC,EAAKI,UACX,MACJ,IAAK,YACDL,EAAMC,EAAKI,UAAY,EAOhC,OAAQ,yBAAKC,UAAU,WACd,uBAAGA,UAAU,eAAeP,GAC5B,0BAAMO,UAAU,qBAAqBN,EAArC,IAA2CG,KAuDnDI,EAAed,EAAMH,aAAakB,QAAO,SAAAC,GACzC,GAAIA,EAAEC,KAAKC,cAAcC,SAAShB,EAAYe,gBAC1CF,EAAEI,YAAY,GAAGF,cAAcC,SAAShB,EAAYe,gBACpDF,EAAEI,YAAY,GAAGF,cAAcC,SAAShB,EAAYe,gBACpDF,EAAEK,OAAOH,cAAcC,SAAShB,EAAYe,eAC5C,OAAOF,KAyBf,OArBAF,EAAeA,EAAaQ,KAAI,SAACN,EAAGO,GAE9B,OAAU,kBAAC,IAAD,KACN,kBAAC,IAAD,CACIC,gBAAe,QAAQD,EAAI,YAC3BE,GAAI,QAAQF,EAAI,YAEhB,0BAAMV,UAAU,iDAAiDa,IAASC,UAAUC,SAAUZ,EAAEC,MAAaD,EAAEK,QAEnH,kBAAC,IAAD,KACI,0BAAMR,UAAU,8BAAhB,eACCG,EAAEI,YAAY,GAAG,0BAAMP,UAAU,4DAA4Da,IAASG,aAAaC,KAAMd,EAAEI,YAAY,IACxI,0BAAMP,UAAU,8BAAhB,QAHJ,wBAaN,yBAAKA,UAAU,oBACP,yBAAKA,UAAU,oCACX,kBAAC,IAAD,CAAmBY,GAAG,uBACjB,SAACM,GAAD,OAAW,kBAAC,IAAD,CACRC,QAAQ,SACRC,WAAS,EACTpB,UAAU,cACVqB,YAAaH,EACbI,MAAOhC,EACPiC,SAAU,SAACC,GAAKjC,EAAeiC,EAAEC,OAAOH,aAKhD,yBAAKtB,UAAU,gCACX,yBAAKA,UAAU,YAAYa,IAASa,iBAAiBC,YAIhErC,EAAYsC,OAAS3B,EAjGlB,oCACHT,EAAU,SACX,yBAAKQ,UAAU,oBAAf,iBACCb,EAAMH,aAAayB,KAAI,SAACN,EAAGO,GACxB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,gBAAe,QAAQD,EAAI,YAC3BE,GAAI,QAAQF,EAAI,YAEhB,0BAAMV,UAAU,sDAAsDa,IAASC,UAAUC,SAAUZ,EAAEC,MAAY,0BAAMJ,UAAU,QAAQG,EAAEK,SAE/I,kBAAC,IAAD,KACI,0BAAMR,UAAU,8BAAhB,eACCG,EAAEI,YAAY,GAAG,0BAAMP,UAAU,4DAA4Da,IAASG,aAAaC,KAAMd,EAAEI,YAAY,IACxI,0BAAMP,UAAU,8BAAhB,QAHJ,wBAUXR,EAAU,aAEVL,EAAMH,aAAayB,KAAI,SAACN,EAAGO,GACxB,OAAa,kBAAC,IAAD,KACL,kBAAC,IAAD,CACIC,gBAAe,QAAQD,EAAI,YAC3BE,GAAI,QAAQF,EAAI,YAEhB,0BAAMV,UAAU,sDAAsDa,IAASC,UAAUC,SAAUZ,EAAEC,MAAY,0BAAMJ,UAAU,QAAQG,EAAEK,SAE/I,kBAAC,IAAD,KACI,0BAAMR,UAAU,8BAAhB,eACCG,EAAEI,YAAY,GAAG,0BAAMP,UAAU,4DAA4Da,IAASG,aAAaC,KAAMd,EAAEI,YAAY,IACxI,0BAAMP,UAAU,8BAAhB,QAHJ","file":"static/js/22.5f487f5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {IconPack} from \"../../../../Images/IconPack\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\n\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\n\r\n\r\nconst CorporateActivity = (props) => {\r\n    const [searchValue, setSearchValue] = React.useState('');\r\n\r\n    const getDayRow = (type) => {\r\n        let date = new Date();\r\n        var month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][date.getMonth()];\r\n        let day;\r\n\r\n\r\n        switch (type) {\r\n            case 'Today':\r\n                day = date.getDate();\r\n                break;\r\n            case 'Yesterday':\r\n                day = date.getDate() - 1;\r\n                break;\r\n            default:\r\n                    break;\r\n        }\r\n\r\n\r\n       return (<div className=\"day-row\">\r\n                <b className=\"color-white\">{type}</b>\r\n                <span className=\"color-grey inline\">{day} {month}</span>\r\n       </div>);\r\n    }\r\n\r\n\r\n\r\n\r\n    const getTbodyData = () => {\r\n        return (<>\r\n            {getDayRow('Today')}\r\n            <div className=\"color-grey mb-10\">User / Action</div>\r\n            {props.activityData.map((i, key) => {\r\n                return  (\r\n                    <Accordion >\r\n                        <AccordionSummary\r\n                            aria-controls={\"panel\"+key+\"a-content\"}\r\n                            id={\"panel\"+key+\"a-header\"}\r\n                        >\r\n                            <span className=\"icon-inside align-items-baseline inline mr-10 bold\">{IconPack.userIcons.forTable}{i.user}</span><span className=\"bold\">{i.action}</span>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <span className=\"accordion-data-description\">Description</span>\r\n                            {i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span>\r\n                            <span className=\"accordion-data-description\">Date</span>\r\n                             13 Feb, 11:10:22\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                );\r\n            })}\r\n\r\n            {getDayRow('Yesterday')}\r\n\r\n            {props.activityData.map((i, key) => {\r\n                return  (    <Accordion>\r\n                        <AccordionSummary\r\n                            aria-controls={\"panel\"+key+\"a-content\"}\r\n                            id={\"panel\"+key+\"a-header\"}\r\n                        >\r\n                            <span className=\"icon-inside align-items-baseline inline mr-10 bold\">{IconPack.userIcons.forTable}{i.user}</span><span className=\"bold\">{i.action}</span>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <span className=\"accordion-data-description\">Description</span>\r\n                            {i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span>\r\n                            <span className=\"accordion-data-description\">Date</span>\r\n                            13 Feb, 11:10:22\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                );\r\n            })}\r\n\r\n        </>);\r\n    };\r\n\r\n\r\n\r\n    let searchedData = props.activityData.filter(i => {\r\n        if (i.user.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.description[0].toLowerCase().includes(searchValue.toLowerCase())||\r\n            i.description[1].toLowerCase().includes(searchValue.toLowerCase())||\r\n            i.action.toLowerCase().includes(searchValue.toLowerCase())) {\r\n            return i\r\n        }\r\n    })\r\n\r\n    searchedData = searchedData.map((i, key) => {\r\n\r\n          return  ( <Accordion>\r\n              <AccordionSummary\r\n                  aria-controls={\"panel\"+key+\"a-content\"}\r\n                  id={\"panel\"+key+\"a-header\"}\r\n              >\r\n                  <span className=\"icon-inside align-items-baseline inline mr-10\">{IconPack.userIcons.forTable}{i.user}</span>{i.action}\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                  <span className=\"accordion-data-description\">Description</span>\r\n                  {i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span>\r\n                  <span className=\"accordion-data-description\">Date</span>\r\n                  13 Feb, 11:10:22\r\n              </AccordionDetails>\r\n          </Accordion>);\r\n    });\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n                <div className=\"filterPanel filterPanel--mobile \">\r\n                    <FormattedMessage  id='filterPanel.search'>\r\n                        {(msg) => ( <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            className=\"search_area\"\r\n                            placeholder={msg}\r\n                            value={searchValue}\r\n                            onChange={(e)=>{setSearchValue(e.target.value)}}\r\n                        >\r\n                        </TextField>)}\r\n                    </FormattedMessage>\r\n\r\n                    <div className=\"search_additional_components\">\r\n                        <div className=\"calendar\">{IconPack.searchComponents.calendar}</div>\r\n                    </div>\r\n                </div>\r\n\r\n            {searchValue.length ? searchedData : getTbodyData() }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    activityData: state.corporateLicenseActivity.activity,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(CorporateActivity);"],"sourceRoot":""}