{"version":3,"sources":["redux/licenses/corporate/invite/invite.actions.js","components/MobileComponents/Licenses/Invite/CorporateInvite.jsx"],"names":["setNewValueForInviteStoreItem","item","itemValue","id","type","inviteTypes","SET_NEW_VALUE_INVITE_FOR_STORE_ITEM","payload","createInviteItem","object","CREATE_INVITE_ITEM","deleteInviteItem","DELETE_INVITE_ITEM","connect","state","inviteData","corporateLicenseInvite","invite","dispatch","props","className","store","map","itemData","fullWidth","value","login","onChange","e","setNewValueForStoreItem","target","ticketID","variant","disabled","newLogin","password","nickname","telegram","comment","getRowItem"],"mappings":"uHAAA,kHAGaA,EAAgC,SAAEC,EAAMC,EAAWC,GAAnB,MAA4B,CACrEC,KAAMC,IAAYC,oCAClBC,QAAS,CAACN,OAAMC,YAAWC,QAGlBK,EAAmB,SAACC,GAAD,MAAa,CACzCL,KAAMC,IAAYK,mBAClBH,QAASE,IAGAE,EAAmB,SAACR,GAAD,MAAS,CACrCC,KAAMC,IAAYO,mBAClBL,QAASJ,K,iCCfb,uFA6IeU,uBAXS,SAACC,GAAD,MAAY,CAChCC,WAAYD,EAAME,uBAAuBC,WAGlB,SAACC,GACxB,MAAO,CACHlB,8BAA+B,SAACC,EAAMC,EAAWC,GAAlB,OAAyBe,EAASlB,YAA8BC,EAAMC,EAAWC,KAChHK,iBAAkB,SAACC,GAAD,OAAYS,EAASV,YAAiBC,KACxDE,iBAAkB,SAAER,GAAF,OAAUe,EAASP,YAAkBR,QAGhDU,EA1HS,SAACM,GAgGrB,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,iCACX,uBAAGA,UAAU,eAAb,wIACA,0BAAMA,UAAU,uBAAhB,SAEJ,yBAAKA,UAAU,0BACND,EAAMJ,WAAWM,MAAMC,KAAI,SAAAC,GACxB,OAjFD,SAACA,GAChB,OACI,yBAAKH,UAAU,gBACX,0BAAMA,UAAU,cAAhB,SACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAO,KAAOF,EAASG,MACvBC,SAAU,SAACC,GACPT,EAAMU,wBAAwB,QAASD,EAAEE,OAAOL,MAAOF,EAASQ,WAEpEC,QAAQ,SACRC,UAAQ,IAGZ,0BAAMb,UAAU,cAAhB,aACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAO,KAAOF,EAASW,SACvBP,SAAU,SAACC,GAAMT,EAAMnB,8BAA8B,WAAY4B,EAAEE,OAAOL,MAAOF,EAASQ,WAC1FC,QAAQ,SACRC,UAAQ,IAGZ,0BAAMb,UAAU,cAAhB,YACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASY,SAChBR,SAAU,SAACC,GACPT,EAAMU,wBAAwB,WAAYD,EAAEE,OAAOL,MAAOF,EAASQ,WAEvEC,QAAQ,WAGZ,0BAAMZ,UAAU,cAAhB,YACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASa,SAChBT,SAAU,SAACC,GACPT,EAAMU,wBAAwB,WAAYD,EAAEE,OAAOL,MAAOF,EAASQ,WAEvEC,QAAQ,WAGZ,0BAAMZ,UAAU,cAAhB,YACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASc,SAChBV,SAAU,SAACC,GACPT,EAAMU,wBAAwB,WAAYD,EAAEE,OAAOL,MAAOF,EAASQ,WAEvEC,QAAQ,WAGZ,0BAAMZ,UAAU,cAAhB,WACA,kBAAC,IAAD,CACII,WAAS,EACTC,MAAOF,EAASe,QAChBX,SAAU,SAACC,GACPT,EAAMU,wBAAwB,UAAWD,EAAEE,OAAOL,MAAOF,EAASQ,WAEtEC,QAAQ,WAGZ,kBAAC,IAAD,CAAQA,QAAQ,YAAYZ,UAAU,sBAAtC,YAkBemB,CAAWhB","file":"static/js/16.45e39301.chunk.js","sourcesContent":["import { inviteTypes} from './invite.types'\r\n\r\n\r\nexport const setNewValueForInviteStoreItem = ( item, itemValue, id ) => ({\r\n    type: inviteTypes.SET_NEW_VALUE_INVITE_FOR_STORE_ITEM,\r\n    payload: {item, itemValue, id}\r\n})\r\n\r\nexport const createInviteItem = (object) => ({\r\n    type: inviteTypes.CREATE_INVITE_ITEM,\r\n    payload: object\r\n})\r\n\r\nexport const deleteInviteItem = (id) => ({\r\n    type: inviteTypes.DELETE_INVITE_ITEM,\r\n    payload: id\r\n})","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {connect} from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {IconPack} from \"../../../../Images/IconPack\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport {\r\n    setNewValueForInviteStoreItem,\r\n    createInviteItem,\r\n    deleteInviteItem\r\n} from \"../../../../redux/licenses/corporate/invite/invite.actions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nconst CorporateInvite = (props) => {\r\n\r\n\r\n    const addHandler = () => {\r\n        const reducerStore =  props.inviteData.store;\r\n        const reducerDefData =  props.inviteData.defValues;\r\n        let ticketID = + new Date();\r\n\r\n\r\n        let newObject = {\r\n            login: reducerStore[reducerStore.length-1].login + 1,\r\n            newLogin: reducerStore[reducerStore.length-1].login + 1,\r\n            password: reducerDefData.password,\r\n            nickname: reducerDefData.nickname,\r\n            telegram: reducerDefData.telegram,\r\n            comment: reducerDefData.comment,\r\n            ticketID: ticketID,\r\n        };\r\n\r\n        props.createInviteItem(newObject);\r\n    }\r\n\r\n\r\n    const getRowItem = (itemData) => {\r\n        return (\r\n            <div className=\"generateCard\">\r\n                <span className=\"color-grey\">Login</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={'CU' + itemData.login}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('login', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                    disabled\r\n                />\r\n\r\n                <span className=\"color-grey\">New login</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={'CU' + itemData.newLogin}\r\n                    onChange={(e)=> {props.setNewValueForInviteStoreItem('newLogin', e.target.value, itemData.ticketID)}}\r\n                    variant=\"filled\"\r\n                    disabled\r\n                />\r\n\r\n                <span className=\"color-grey\">Password</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.password}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('password', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <span className=\"color-grey\">Nickname</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.nickname}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('nickname', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <span className=\"color-grey\">Telegram</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.telegram}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('telegram', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <span className=\"color-grey\">Comment</span>\r\n                <TextField\r\n                    fullWidth\r\n                    value={itemData.comment}\r\n                    onChange={(e) => {\r\n                        props.setNewValueForStoreItem('comment', e.target.value, itemData.ticketID)\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n\r\n                <Button variant=\"contained\" className=\"btn btn--red mb-15\">\r\n                    Exclude\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n            <div className=\"alertPanel alertPanel--mobile\">\r\n                <p className=\"color-white\">The users listed below will be invited to join your license. You can only invite users with whom you have an agreement on migration.</p>\r\n                <span className=\"btn-text color-blue\">MORE</span>\r\n            </div>\r\n            <div className=\"generateItems__wrapper\">\r\n                    {props.inviteData.store.map(itemData => {\r\n                        return getRowItem(itemData);\r\n                    })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inviteData: state.corporateLicenseInvite.invite,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setNewValueForInviteStoreItem: (item, itemValue, id) => dispatch(setNewValueForInviteStoreItem(item, itemValue, id)),\r\n        createInviteItem: (object) => dispatch(createInviteItem(object)),\r\n        deleteInviteItem: ( id ) => dispatch(deleteInviteItem( id )),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CorporateInvite);"],"sourceRoot":""}