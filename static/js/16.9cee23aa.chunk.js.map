{"version":3,"sources":["redux/app/app.actions.js","components/AuthWindows/LangDropdown/LangDropdown.jsx","components/AuthWindows/SignIn.jsx","components/AuthWindows/SignUp.jsx","components/AuthWindows/SetNewPassword.jsx","components/AuthWindows/SetNewEmail.jsx","components/AuthWindows/ResetPass.jsx","components/AuthWindows/AuthDashboard.jsx"],"names":["setCurrentLanguage","lang","type","appTypes","SET_CURRENT_LANGUAGE","payload","setLanguageModal","bool","SET_LANGUAGE_MODAL","setAuthLanguageModal","SET_AUTH_LANGUAGE_MODAL","setAccessRightsModal","obj","SET_ACCESS_RIGHTS_MODAL","setAccessRightsForOneUserModal","SET_ACCESS_RIGHTS_FOR_ONE_USER_MODAL","setBuyPLicenseModal","SET_BUY_P_LICENSE_MODAL","setBuyCLicenseModal","SET_BUY_C_LICENSE_MODAL","setRefillBalanceModal","SET_REFILL_BALANCE_MODAL","setRefillLicenseModal","SET_REFILL_LICENSE_MODAL","setLicenseDaysSettingsModal","SET_LICENSE_DAYS_SETTINGS_MODAL","setChangeEmailModal","SET_CHANGE_EMAIL_MODAL","setChangePasswordlModal","SET_CHANGE_PASSWORD_MODAL","setChangeTelegramModal","SET_CHANGE_TELEGRAM_MODAL","setAutoRenewalModal","SET_AUTO_RENEWAL_MODAL","setMigrationModal","SET_MIGRATION_MODAL","setAuthorizationDataModal","SET_AUTHORIZATION_DATA_MODAL","setAuthorizationDataForOneUserModal","SET_AUTHORIZATION_DATA_FOR_ONE_USER_MODAL","setChangeDealModal","SET_CHANGE_DEAL_MODAL","setNewEmailAuthModal","SET_NEW_EMAIL_AUTHMODAL","setChangePasswordAuthModal","SET_CHANGE_PASSWORD_AUTHMODAL","connect","state","appState","appOptions","dispatch","val","props","currentLang","appLanguage","currentAppLanguage","langListClone","languagesInterface","component","langListContent","map","item","current","value","key","title","toString","onClick","e","newLangVal","className","src","icon","alt","find","langObj","modals","authLanguageDropdown","history","useHistory","React","useState","value1","setValue1","value2","setValue2","layoutProvider","m","s","push","id","msg","variant","fullWidth","label","onChange","target","Button","value3","setValue3","value4","setValue4","value5","setValue5","value6","setValue6","checked","name","newValue","event","login","setLogin","placeholder","console","log","wrapperClasses","useEffect","window","location","pathname","currentLangObj","langDropdown","IconPack","menuIcons","logo","path","render"],"mappings":"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","file":"static/js/16.9cee23aa.chunk.js","sourcesContent":["import { appTypes} from './app.types'\r\nimport {usersTypes} from \"../licenses/corporate/users/users.types\";\r\n\r\nexport const setCurrentLanguage = lang => ({\r\n  type: appTypes.SET_CURRENT_LANGUAGE,\r\n  payload: lang\r\n});\r\n\r\nexport const setDashboard = bool => ({\r\n  type: appTypes.SET_DASHBOARD,\r\n  payload: bool\r\n});\r\n\r\nexport const setLanguageModal = bool => ({\r\n  type: appTypes.SET_LANGUAGE_MODAL,\r\n  payload: bool\r\n});\r\n\r\nexport const setAuthLanguageModal = bool => ({\r\n  type: appTypes.SET_AUTH_LANGUAGE_MODAL,\r\n  payload: bool\r\n});\r\n\r\n\r\nexport const setAccessRightsModal = obj => ({\r\n  type: appTypes.SET_ACCESS_RIGHTS_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setAccessRightsForOneUserModal = obj => ({\r\n  type: appTypes.SET_ACCESS_RIGHTS_FOR_ONE_USER_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setBuyPLicenseModal = bool => ({\r\n  type: appTypes.SET_BUY_P_LICENSE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setBuyCLicenseModal = bool => ({\r\n  type: appTypes.SET_BUY_C_LICENSE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setRefillBalanceModal = bool => ({\r\n  type: appTypes.SET_REFILL_BALANCE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setRefillLicenseModal = bool => ({\r\n  type: appTypes.SET_REFILL_LICENSE_MODAL,\r\n  payload: bool\r\n})\r\nexport const setLicenseDaysSettingsModal = obj => ({\r\n  type: appTypes.SET_LICENSE_DAYS_SETTINGS_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setChangeEmailModal = bool => ({\r\n  type: appTypes.SET_CHANGE_EMAIL_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setChangePasswordlModal = bool => ({\r\n  type: appTypes.SET_CHANGE_PASSWORD_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setChangeTelegramModal = bool => ({\r\n  type: appTypes.SET_CHANGE_TELEGRAM_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setAutoRenewalModal = bool => ({\r\n  type: appTypes.SET_AUTO_RENEWAL_MODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setMigrationModal = bool => ({\r\n  type: appTypes.SET_MIGRATION_MODAL,\r\n  payload: bool\r\n})\r\n\r\n\r\nexport const setAuthorizationDataModal =  obj  => ({\r\n  type: appTypes.SET_AUTHORIZATION_DATA_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setAuthorizationDataForOneUserModal =  obj  => ({\r\n  type: appTypes.SET_AUTHORIZATION_DATA_FOR_ONE_USER_MODAL,\r\n  payload: obj\r\n})\r\n\r\nexport const setChangeDealModal =  obj  => ({\r\n  type: appTypes.SET_CHANGE_DEAL_MODAL,\r\n  payload: obj\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const setNewEmailAuthModal = bool => ({\r\n  type: appTypes.SET_NEW_EMAIL_AUTHMODAL,\r\n  payload: bool\r\n})\r\nexport const setChangePasswordAuthModal = bool => ({\r\n  type: appTypes.SET_CHANGE_PASSWORD_AUTHMODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setResetPassAuthModal = bool => ({\r\n  type: appTypes.SET_RESET_PASS_AUTHMODAL,\r\n  payload: bool\r\n})\r\n\r\nexport const setSignInAuthModal = bool => ({\r\n  type: appTypes.SET_SIGNIN_AUTHMODAL,\r\n  payload: bool\r\n})\r\nexport const setSignUpAuthModal = bool => ({\r\n  type: appTypes.SET_SIGNUP_AUTHMODAL,\r\n  payload: bool\r\n})","import React, {Fragment} from 'react';\r\nimport {setCurrentLanguage, setAuthLanguageModal} from \"../../../redux/app/app.actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst LangDropdown = (props) => {\r\n    let currentLang = props.appState.appLanguage.currentAppLanguage;\r\n    let langListClone = [...props.appState.appLanguage.languagesInterface];\r\n    let component = null;\r\n\r\n    const clickHandler = ( newLangVal ,e ) => {\r\n\r\n        props.setCurrentLanguage(newLangVal);\r\n        props.setAuthLanguageModal(false);\r\n\r\n\r\n    };\r\n\r\n    let langListContent = langListClone.map((item)=>{\r\n        let current = '';\r\n        if(item.value === currentLang){\r\n            current = 'currentLang';\r\n        }\r\n        return (<div key={item.title.toString()} onClick={(e)=> { clickHandler(item.value, e) }} className={current}><img src={item.icon} alt=\"\"/> {item.title}</div>)\r\n    });\r\n    let currentLangObj = langListClone.find((langObj) => {\r\n        return langObj.value === currentLang;\r\n    });\r\n\r\n\r\n\r\n    if(props.appState.modals.authLanguageDropdown) {\r\n        component = ( <div className=\"appLanguageDropdown\">\r\n            <div className=\"content\">\r\n                {langListContent}\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    return component;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrentLanguage: (val) => dispatch(setCurrentLanguage(val)),\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LangDropdown);","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { setAuthLanguageModal} from \"../../redux/app/app.actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport './style.scss';\r\nimport layoutProvider from \"../Helpers/LayoutProvider\";\r\n\r\nconst SignIn = (props) => {\r\n    const history = useHistory();\r\n\r\n    const [value1, setValue1] = React.useState('');\r\n    const [value2, setValue2] = React.useState('');\r\n\r\n    return <div className={layoutProvider({\r\n        m:\"authModal w400\",\r\n        s:\"authModal w100p sign\",\r\n    })}>\r\n        <header>\r\n            <div onClick={()=>{\r\n                history.push(\"/auth/sign_up\");\r\n            }}><FormattedMessage id='button.signUp' /></div>\r\n            <div className=\"active\"><FormattedMessage id='button.signIn' /></div>\r\n        </header>\r\n        <main>\r\n            <FormattedMessage  id='auth.loginOrEmail'>\r\n                {(msg) => (   <TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value2}\r\n                    onChange={(e)=>{setValue2(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n            <FormattedMessage  id='auth.password'>\r\n                {(msg) => (   <TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value1}\r\n                    type=\"password\"\r\n                    onChange={(e)=>{setValue1(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n\r\n\r\n        </main>\r\n        <footer>\r\n            <Button variant=\"contained\" className=\"btn btn--blue\" onClick={()=>{\r\n                history.push(\"/licenses/new\");\r\n            }}>\r\n                <FormattedMessage id='button.signIn' />\r\n            </Button>\r\n\r\n            <div className=\"btn btn--text\" onClick={()=>{\r\n                history.push(\"/auth/reset_password\");\r\n            }}><FormattedMessage id='button.forgotPassword' /></div>\r\n        </footer>\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport Switch from \"@material-ui/core/Switch/Switch\";\r\nimport {\r\n    setAuthLanguageModal\r\n} from \"../../redux/app/app.actions\";\r\nimport {connect} from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport {BrowserRouter as Router,\r\n    Route,\r\n    useHistory\r\n} from \"react-router-dom\";\r\n\r\nimport layoutProvider from \"../Helpers/LayoutProvider\";\r\n\r\n\r\nconst SignUp = (props) => {\r\n\r\n    const [value1, setValue1] = React.useState();\r\n    const [value2, setValue2] =  React.useState();\r\n    const [value3, setValue3] =  React.useState();\r\n    const [value4, setValue4] = React.useState();\r\n    const [value5, setValue5] = React.useState();\r\n    const [value6, setValue6] = React.useState(true);\r\n\r\n    const history = useHistory();\r\n\r\n    return  (<>\r\n        <div className={layoutProvider({\r\n            m:\"authModal w400\",\r\n            s:\"authModal w100p sign\",\r\n        })}>\r\n\r\n        <header>\r\n            <div className=\"active\"><FormattedMessage id='button.signUp' /></div>\r\n            <div onClick={()=>{\r\n                history.push(\"/auth/sign_in\");\r\n            }}><FormattedMessage id='button.signIn' /></div>\r\n        </header>\r\n        <main>\r\n            <FormattedMessage  id='auth.login'>\r\n                {(msg) => (   <TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value1}\r\n                    onChange={(e)=>{ setValue1(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n            <div className=\"doubled\">\r\n\r\n                <FormattedMessage  id='auth.password'>\r\n                    {(msg) => (   <TextField\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label={msg}\r\n                        value={value2}\r\n                        type=\"password\"\r\n                        onChange={(e)=>{ setValue2(e.target.value)}}>\r\n                    </TextField>)}\r\n                </FormattedMessage>\r\n\r\n\r\n\r\n                <FormattedMessage  id='auth.passwordAgain'>\r\n                    {(msg) => (   <TextField\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label={msg}\r\n                        value={value3}\r\n                        type=\"password\"\r\n                        onChange={(e)=>{ setValue3(e.target.value)}}>\r\n                    </TextField>)}\r\n                </FormattedMessage>\r\n\r\n            </div>\r\n            <FormattedMessage  id='auth.email'>\r\n                {(msg) => (   <TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value4}\r\n                    onChange={(e)=>{ setValue4(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n\r\n            <FormattedMessage  id='auth.promocode'>\r\n                {(msg) => (<TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value5}\r\n                    onChange={(e)=>{ setValue5(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n\r\n        </main>\r\n        <footer>\r\n            <div className=\"switch-wrapper\">\r\n                <Switch checked={ value6 }\r\n                        name=\"autoRenew\"\r\n                        onChange={(e)=>{ setValue6(!value6)}} />\r\n                <p><span className=\"color-white\">I accept</span> terms of service</p>\r\n            </div>\r\n\r\n            <Button variant=\"contained\" className=\"btn btn--blue\" onClick={()=>{ history.push(\"/licenses/new\") }}>\r\n                <FormattedMessage id='button.toRegister' />\r\n            </Button>\r\n        </footer>\r\n    </div> </>);\r\n\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport {\r\n    setAuthLanguageModal\r\n} from \"../../redux/app/app.actions\";\r\nimport {connect} from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './style.scss';\r\nimport {BrowserRouter, useHistory} from \"react-router-dom\";\r\nimport layoutProvider from \"../Helpers/LayoutProvider\";\r\n\r\n\r\nconst SetNewPassword = (props) => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [value1, setValue1] = React.useState();\r\n    const [value2, setValue2] = React.useState();\r\n\r\n    const handleChange1 = (event, newValue) => {\r\n        setValue1(newValue);\r\n    };\r\n\r\n    const handleChange2 = (event) => {\r\n        setValue2(event.value);\r\n    };\r\n\r\n    const cancelHandler = () => {\r\n        history.push(\"/auth/sign_in\")\r\n    }\r\n\r\n    const changePassHandler = () => {\r\n\r\n        history.push(\"/auth/sign_in\")\r\n    }\r\n\r\n\r\n    return <div className={layoutProvider({\r\n        m:\"authModal w400\",\r\n        s:\"authModal authModal--mobile w100p authModal--popup\",\r\n    })}>\r\n        <header>\r\n            <p><FormattedMessage  id='auth.setANewPassword' /></p>\r\n            {layoutProvider({})}\r\n        </header>\r\n        <main>\r\n            <FormattedMessage  id='auth.newPassword'>\r\n                {(msg) => (<TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value1}\r\n                    type=\"password\"\r\n                    onChange={(e)=>{handleChange1(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n            <FormattedMessage  id='auth.newPasswordAgain'>\r\n                {(msg) => (<TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={value2}\r\n                    type=\"password\"\r\n                    onChange={(e)=>{handleChange2(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n\r\n        </main>\r\n        <footer>\r\n            <Button variant=\"contained\" className=\"btn btn--blue\" onClick={()=>{changePassHandler()}}>\r\n                <FormattedMessage id='button.changePassword' />\r\n            </Button>\r\n            <div className=\"btn btn--text\" onClick={()=>{cancelHandler()}}><FormattedMessage id='button.cancelChangePassword' /></div>\r\n        </footer>\r\n    </div>\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetNewPassword);","import React, {useState, useHistory} from 'react';\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport {IconPack} from \"../../Images/IconPack\";\r\n\r\nimport {setAuthLanguageModal} from \"../../redux/app/app.actions\";\r\nimport {connect} from \"react-redux\";\r\nimport layoutProvider from \"../Helpers/LayoutProvider\";\r\n\r\nconst SetNewEmail = (props) => {\r\n\r\n    const [login, setLogin] = React.useState();\r\n    let history = useHistory();\r\n\r\n\r\n    return <div className={layoutProvider({\r\n        m:\"authModal w400\",\r\n        s:\"authModal authModal--mobile w100p authModal--popup\",\r\n    })}>\r\n        <header>\r\n            <p><FormattedMessage  id='auth.setANewEmail' /></p>\r\n        </header>\r\n        <main>\r\n            <FormattedMessage  id='auth.newEmail'>\r\n                {(msg) => (   <TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label=\"New email\"\r\n                    placeholder={msg}\r\n                    value={login}\r\n                    onChange={(e)=>{setLogin(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n\r\n        </main>\r\n        <footer>\r\n            <p>We will send a password reset link <span className=\"color-white\">to your email</span> account associated with the specified login</p>\r\n            <div className=\"btn btn--blue\" onClick={()=>{history.push('licenses/new')}}><FormattedMessage id='button.sendResetPasswordLink' /></div>\r\n            <div className=\"btn btn--text\"  onClick={()=>{history.push('licenses/new')}} ><FormattedMessage id='button.cancelChangePassword' /></div>\r\n        </footer>\r\n    </div>\r\n\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetNewEmail);\r\n","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport {connect} from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n    setAuthLanguageModal\r\n} from \"../../redux/app/app.actions\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport {IconPack} from \"../../Images/IconPack\";\r\nimport LangDropdown from \"./LangDropdown/LangDropdown\";\r\n import './style.scss';\r\nimport {BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport layoutProvider from \"../Helpers/LayoutProvider\";\r\n\r\n\r\nconst ResetPass = (props) => {\r\n\r\n\r\n    console.log('res pass');\r\n    const [login, setLogin] = React.useState();\r\n    let history = useHistory();\r\n    const cancelHandler = () => {\r\n        history.push(\"/auth/sign_in\")\r\n    };\r\n    const loginHandler = () => {\r\n\r\n    };\r\n\r\n\r\n    return  (<div className={layoutProvider({\r\n            m:\"authModal w400\",\r\n            s:\"authModal authModal--mobile w100p authModal--popup\",\r\n        })}>\r\n        <header>\r\n            <p><FormattedMessage  id='auth.resetPassword'/></p>\r\n        </header>\r\n        <main>\r\n            <FormattedMessage  id='auth.youreLogin'>\r\n                {(msg) => (<TextField\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    label={msg}\r\n                    value={login}\r\n                    onChange={(e)=>{setLogin(e.target.value)}}>\r\n                </TextField>)}\r\n            </FormattedMessage>\r\n\r\n        </main>\r\n        <footer>\r\n            <p>We will send a password reset link <span className=\"color-white\">to your email</span> account associated with the specified login</p>\r\n            <Button variant=\"contained\" className=\"btn btn--blue\" onClick={()=>{\r\n                history.push(\"/auth/set_new_password\");\r\n            }}>\r\n                <FormattedMessage id='button.sendResetPasswordLink' />\r\n            </Button>\r\n            <div className=\"btn btn--text\" onClick={()=>{cancelHandler()}}><FormattedMessage id='button.cancelChangePassword' /></div>\r\n        </footer>\r\n    </div>);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAuthLanguageModal: (bool) => dispatch(setAuthLanguageModal(bool)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPass);","import React, {useEffect, useState} from 'react';\r\nimport {IconPack} from '../../Images/IconPack';\r\n\r\nimport LangDropdown from './LangDropdown/LangDropdown';\r\n\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {setAuthLanguageModal} from \"../../redux/app/app.actions\";\r\nimport './style.scss';\r\n\r\nimport SignIn from \"./SignIn\";\r\nimport SignUp from \"./SignUp\";\r\nimport SetNewPassword from \"./SetNewPassword\";\r\nimport SetNewEmail from \"./SetNewEmail\";\r\nimport ResetPass from \"./ResetPass\";\r\nimport layoutProvider from \"../Helpers/LayoutProvider\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route, useHistory\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst AuthDashboard = (props) => {\r\n\r\n    let wrapperClasses = layoutProvider({\r\n        m:\"AuthWindow\",\r\n        s:\"AuthWindow AuthWindow--mobile\"\r\n    });\r\n\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n\r\n        if( window.location.pathname === '/') {\r\n            history.push('licenses/new')\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    let currentLang = props.appState.appLanguage.currentAppLanguage;\r\n    let langListClone = [...props.appState.appLanguage.languagesInterface];\r\n\r\n\r\n    let langListContent = langListClone.map((item)=>{\r\n        let current = '';\r\n        if(item.value === currentLang){\r\n            current = 'currentLang';\r\n        }\r\n\r\n        return (<div key={item.toString()} className={current}><img src={item.icon} alt=\"\"/> {item.title}</div>)\r\n    });\r\n\r\n    let currentLangObj = langListClone.find((langObj) => {\r\n        return langObj.value === currentLang;\r\n    });\r\n\r\n    let langDropdown =  <><div className=\"appLanguage appLanguage--auth\" onClick={() => {props.setAuthLanguageModal(true)}}>\r\n        <img src={currentLangObj.icon} alt=\"\"/>\r\n        {currentLangObj.value}\r\n    </div>\r\n    <LangDropdown /></>;\r\n\r\n    return (<div className={wrapperClasses}>\r\n        <div className=\"logo\">\r\n            {IconPack.menuIcons.logo}\r\n        </div>\r\n\r\n        <Route path={'/auth/sign_in'} render={() =>  <SignIn />} />\r\n        <Route path={'/auth/sign_up'} render={() =>  <SignUp />} />\r\n        <Route path={'/auth/set_new_password'} render={() =>  <SetNewPassword />} />\r\n        <Route path={'/auth/set_new_email'} render={() =>  <SetNewEmail />} />\r\n        <Route path={'/auth/reset_password'} render={() =>  <ResetPass />} />\r\n\r\n\r\n        {layoutProvider({\r\n            m:langDropdown,\r\n            s:''\r\n        })}\r\n\r\n    </div>);\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    appState: state.appOptions.appState\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthDashboard);"],"sourceRoot":""}