{"version":3,"sources":["components/MobileComponents/Licenses/Cost/CorporateCost.jsx"],"names":["connect","state","costsData","corporateLicenseCosts","costs","props","React","useState","searchValue","setSearchValue","dateReverse","setDateReverse","getDayRow","type","day","date","Date","month","getMonth","getDate","className","colspan","itemHTML","i","key","amount","IconPack","userIcons","forTable","user","costAction","costDetail","licenseIcons","cog","boughtLeft","searchedData","filter","toLowerCase","includes","map","id","msg","variant","fullWidth","placeholder","value","onChange","e","target","searchComponents","calendar","onClick","tableIcons","length","reverse"],"mappings":"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","file":"static/js/25.149f6ec0.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {connect} from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {IconPack} from \"../../../../Images/IconPack\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\n\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nconst CorporateCost = (props) => {\r\n    const [searchValue, setSearchValue] = React.useState('');\r\n    const [dateReverse, setDateReverse] = React.useState(false);\r\n\r\n\r\n\r\n    const getDayRow = (type) => {\r\n        let date = new Date();\r\n        var month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][date.getMonth()];\r\n        let day;\r\n        switch (type) {\r\n            case 'Today':\r\n                day = date.getDate();\r\n                break;\r\n            case 'Yesterday':\r\n                day = date.getDate() - 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return (<TableRow className=\"date-row\">\r\n            <TableCell className=\"padding-sides-20 color-white\" colspan=\"6\">\r\n                <b className=\"color-white\">{type}</b>\r\n                <span className=\"color-grey inline\">{day} {month}</span>\r\n            </TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n\r\n    const getTbodyData = (reversed) => {\r\n\r\n        if(!reversed){\r\n            return (<>\r\n                {getDayRow('Today')}\r\n\r\n                {props.costsData.map((i, key) => {\r\n                    return itemHTML(i, key);\r\n                })}\r\n\r\n                {getDayRow('Yesterday')}\r\n\r\n                {props.costsData.map((i, key) => {\r\n                    return itemHTML(i, key);\r\n                })}\r\n\r\n            </>);\r\n        }else {\r\n            return (<>\r\n\r\n                {getDayRow('Yesterday')}\r\n\r\n                {props.costsData.map((i, key) => {\r\n                    return itemHTML(i, key);\r\n                }).reverse()}\r\n\r\n\r\n                {getDayRow('Today')}\r\n\r\n                {props.costsData.map((i, key) => {\r\n                        return itemHTML(i, key);\r\n                    }).reverse()}\r\n\r\n            </>);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const prepearAmount = (amount, type) => {\r\n        switch (type) {\r\n            case 'loss':\r\n                return (\r\n                    <span className=\"red\">{amount}</span>)\r\n                break;\r\n            case 'profit':\r\n                return (<span className=\"green\">{amount}</span>)\r\n                break;\r\n            default:\r\n                return amount\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    const itemHTML = (i, key) => {\r\n        return  (   <TableRow key={key}>\r\n            <TableCell className=\"padding-sides-25 red text-align-right\">${i.amount}</TableCell>\r\n            <TableCell className=\"padding-sides-15 color-white\"><span className=\"icon-inside inline align-items-baseline\">{IconPack.userIcons.forTable}</span>{i.user}</TableCell>\r\n            <TableCell className=\"padding-sides-10 color-white\">{i.costAction}</TableCell>\r\n            <TableCell className=\"padding-sides-20 color-white\">{i.costDetail[0]}\r\n                <span className=\"ml-10 icon-inside inline align-items-baseline\">{IconPack.licenseIcons.cog} {i.costDetail[1]}</span>\r\n            </TableCell>\r\n            <TableCell className=\"padding-sides-20 color-white text-align-right\">{i.boughtLeft}</TableCell>\r\n            <TableCell className=\"padding-sides-15 color-grey\">3 Apr, 19:20:55</TableCell>\r\n        </TableRow>);\r\n    }\r\n\r\n\r\n\r\n\r\n    let searchedData = props.costsData.filter(i => {\r\n\r\n        if (i.user.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.costAction.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.costDetail[0].toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.costDetail[1].toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.boughtLeft.toLowerCase().includes(searchValue.toLowerCase())\r\n          ) {\r\n            return i\r\n        }\r\n\r\n    })\r\n\r\n    searchedData = searchedData.map((i, key) => {\r\n\r\n        return itemHTML(i, key);\r\n    });\r\n\r\n\r\n    /* active */\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n            <div className=\"filterPanel\">\r\n\r\n                <FormattedMessage  id='filterPanel.search'>\r\n                    {(msg) => ( <TextField\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        className=\"search_area\"\r\n                        placeholder={msg}\r\n                        value={searchValue}\r\n                        onChange={(e)=>{setSearchValue(e.target.value)}}\r\n                    >\r\n                    </TextField>)}\r\n                </FormattedMessage>\r\n\r\n                <div className=\"search_additional_components\">\r\n                    <div className=\"calendar\">{IconPack.searchComponents.calendar}</div>\r\n                </div>\r\n            </div>\r\n            <Table className=\"configTable\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className=\"padding-sides-25 w125 text-align-right\"><FormattedMessage id='table.amount' /></TableCell>\r\n                        <TableCell className=\"padding-sides-15 w150\"><FormattedMessage id='table.user' /></TableCell>\r\n                        <TableCell className=\"padding-sides-10 w120\"><FormattedMessage id='table.costAction' /></TableCell>\r\n                        <TableCell className=\"padding-sides-20 \"><FormattedMessage id='table.costDetail' /></TableCell>\r\n                        <TableCell className=\"padding-sides-20 w125 text-align-right\"><FormattedMessage id='table.boughtLeft' /></TableCell>\r\n                        <TableCell className={dateReverse ? 'padding-sides-15 w125 td-date' : 'padding-sides-15 w125 td-date rotate-child-180 '} onClick={()=>{setDateReverse(!dateReverse)}}>{IconPack.tableIcons.date} <FormattedMessage id='table.date' /></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody  className=\"no-hover\">\r\n                    {searchValue.length ? searchedData : getTbodyData(dateReverse) }\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    costsData: state.corporateLicenseCosts.costs,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(CorporateCost);"],"sourceRoot":""}