{"version":3,"sources":["components/Licenses/Activity/CorporateActivity.jsx"],"names":["connect","state","activityData","corporateLicenseActivity","activity","props","React","useState","searchValue","setSearchValue","dateReverse","setDateReverse","getDayRow","type","day","date","Date","month","getMonth","getDate","className","colspan","searchedData","filter","i","user","toLowerCase","includes","description","action","map","key","IconPack","userIcons","forTable","licenseIcons","mail","id","msg","variant","fullWidth","placeholder","value","onChange","e","target","searchComponents","calendar","onClick","tableIcons","length","reverse"],"mappings":"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","file":"static/js/19.df4f3a1b.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {connect} from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {IconPack} from \"../../../Images/IconPack\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\n\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n\r\nconst CorporateActivity = (props) => {\r\n    const [searchValue, setSearchValue] = React.useState('');\r\n    const [dateReverse, setDateReverse] = React.useState(false);\r\n\r\n    const getDayRow = (type) => {\r\n        let date = new Date();\r\n        var month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][date.getMonth()];\r\n        let day;\r\n\r\n\r\n        switch (type) {\r\n            case 'Today':\r\n                day = date.getDate();\r\n                break;\r\n            case 'Yesterday':\r\n                day = date.getDate() - 1;\r\n                break;\r\n            default:\r\n                    break;\r\n        }\r\n\r\n\r\n       return (<TableRow className=\"date-row\">\r\n            <TableCell className=\"padding-sides-20 color-white\" colspan=\"4\">\r\n                <b className=\"color-white\">{type}</b>\r\n                <span className=\"color-grey inline\">{day} {month}</span>\r\n            </TableCell>\r\n       </TableRow>);\r\n    }\r\n\r\n\r\n    const getTbodyData = (reversed) => {\r\n\r\n        if(!reversed){\r\n            return (<>\r\n                {getDayRow('Today')}\r\n\r\n                {props.activityData.map((i, key) => {\r\n                    return  ( <TableRow >\r\n                        <TableCell className=\"padding-sides-15 color-white\"><span className=\"icon-inside align-items-baseline inline\">{IconPack.userIcons.forTable}{i.user}</span></TableCell>\r\n                        <TableCell className=\"padding-sides-0 color-white\">{i.action}</TableCell>\r\n                        <TableCell className=\"padding-sides-25 color-white\">{i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span> </TableCell>\r\n                        <TableCell className=\"padding-sides-20 color-grey\">13 Feb, 11:10:22</TableCell>\r\n                    </TableRow>);\r\n                })}\r\n\r\n                {getDayRow('Yesterday')}\r\n\r\n                {props.activityData.map((i, key) => {\r\n                    return  ( <TableRow >\r\n                        <TableCell className=\"padding-sides-15 color-white\"><span className=\"icon-inside align-items-baseline inline\">{IconPack.userIcons.forTable}{i.user}</span></TableCell>\r\n                        <TableCell className=\"padding-sides-0 color-white\">{i.action}</TableCell>\r\n                        <TableCell className=\"padding-sides-25 color-white\">{i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span> </TableCell>\r\n                        <TableCell className=\"padding-sides-20 color-grey\">13 Feb, 11:10:22</TableCell>\r\n                    </TableRow>);\r\n                })}\r\n\r\n                </>);\r\n        }else {\r\n            return (<>\r\n\r\n                {getDayRow('Yesterday')}\r\n\r\n                {props.activityData.map((i, key) => {\r\n                    return (<TableRow>\r\n                        <TableCell className=\"padding-sides-15 color-white\"><span className=\"icon-inside align-items-baseline inline\">{IconPack.userIcons.forTable}{i.user}</span></TableCell>\r\n                        <TableCell className=\"padding-sides-0 color-white\">{i.action}</TableCell>\r\n                        <TableCell className=\"padding-sides-25 color-white\">{i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span>\r\n                        </TableCell>\r\n                        <TableCell className=\"padding-sides-20 color-grey\">13 Feb, 11:10:22</TableCell>\r\n                    </TableRow>);\r\n                }).reverse()}\r\n\r\n\r\n                {getDayRow('Today')}\r\n\r\n                {props.activityData.map((i, key) => {\r\n                    return (<TableRow>\r\n                        <TableCell className=\"padding-sides-15 color-white\"><span className=\"icon-inside align-items-baseline inline\">{IconPack.userIcons.forTable}{i.user}</span></TableCell>\r\n                        <TableCell className=\"padding-sides-0 color-white\">{i.action}</TableCell>\r\n                        <TableCell className=\"padding-sides-25 color-white\">{i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span>\r\n                        </TableCell>\r\n                        <TableCell className=\"padding-sides-20 color-grey\">13 Feb, 11:10:22</TableCell>\r\n                    </TableRow>);\r\n                }).reverse()}\r\n\r\n            </>);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    let searchedData = props.activityData.filter(i => {\r\n        if (i.user.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n            i.description[0].toLowerCase().includes(searchValue.toLowerCase())||\r\n            i.description[1].toLowerCase().includes(searchValue.toLowerCase())||\r\n            i.action.toLowerCase().includes(searchValue.toLowerCase())) {\r\n            return i\r\n        }\r\n    })\r\n\r\n    searchedData = searchedData.map((i, key) => {\r\n\r\n          return  ( <TableRow key={key} >\r\n                    <TableCell className=\"padding-sides-15 color-white\"><span className=\"icon-inside align-items-baseline inline\">{IconPack.userIcons.forTable}{i.user}</span></TableCell>\r\n                    <TableCell className=\"padding-sides-0 color-white\">{i.action}</TableCell>\r\n                    <TableCell className=\"padding-sides-25 color-white\">{i.description[0]}<span className=\"color-grey icon-inside align-items-baseline inline ml-10\">{IconPack.licenseIcons.mail}{i.description[1]}</span> </TableCell>\r\n                    <TableCell className=\"padding-sides-20 color-grey\">13 Feb, 11:10:22</TableCell>\r\n                </TableRow>);\r\n    });\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"сustomStyle\">\r\n                <div className=\"filterPanel\">\r\n                    <FormattedMessage  id='filterPanel.search'>\r\n                        {(msg) => ( <TextField\r\n                            variant=\"filled\"\r\n                            fullWidth\r\n                            className=\"search_area\"\r\n                            placeholder={msg}\r\n                            value={searchValue}\r\n                            onChange={(e)=>{setSearchValue(e.target.value)}}\r\n                        >\r\n                        </TextField>)}\r\n                    </FormattedMessage>\r\n\r\n                    <div className=\"search_additional_components\">\r\n                        <div className=\"calendar\">{IconPack.searchComponents.calendar}</div>\r\n\r\n                    </div>\r\n                </div>\r\n            <Table className=\"configTable\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className=\"padding-sides-20 w160\"> <FormattedMessage id='table.user' /></TableCell>\r\n                        <TableCell className=\"padding-sides-0 w140\"> <FormattedMessage id='table.action' /></TableCell>\r\n                        <TableCell className=\"padding-sides-25\"> <FormattedMessage id='table.description' /></TableCell>\r\n                        <TableCell className={dateReverse ? 'padding-sides-25 w140 td-date' : 'padding-sides-25 w140 td-date rotate-child-180 '} onClick={()=>{setDateReverse(!dateReverse)}}>{IconPack.tableIcons.date}  <FormattedMessage id='table.date' /></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"no-hover\">\r\n                    {searchValue.length ? searchedData : getTbodyData(dateReverse) }\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    activityData: state.corporateLicenseActivity.activity,\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(CorporateActivity);"],"sourceRoot":""}